// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data_1 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [in_data_1] 32 $depth 4 
// $pipe  in_data_2 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [in_data_2] 32 $depth 4 
// $pipe  in_data_3 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [in_data_3] 32 $depth 4 
// $pipe  in_data_4 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [in_data_4] 32 $depth 4 
// $noblock $pipe  noblock_obuf_1_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_4] 33 $depth 256 
// $pipe  out_data_1 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [out_data_1] 32 $depth 4 
// $pipe  out_data_2 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [out_data_2] 32 $depth 4 
// $pipe  out_data_3 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [out_data_3] 32 $depth 4 
// $pipe  out_data_4 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [out_data_4] 32 $depth 4 
$constant $W[ONE_1] : $int<1> := _b1// 1
$constant $W[ONE_2] : $int<2> := _b01// 1
$constant $W[ONE_3] : $int<3> := _b001// 1
$constant $W[ONE_33] : $int<33> := _b000000000000000000000000000000001// 1
$constant $W[ONE_8] : $int<8> := _b00000001// 1
$constant $W[ZERO_1] : $int<1> := _b0// 0
$constant $W[ZERO_2] : $int<2> := _b00// 0
$constant $W[ZERO_3] : $int<3> := _b000// 0
$constant $W[ZERO_33] : $int<33> := _b000000000000000000000000000000000// 0
$constant $W[ZERO_8] : $int<8> := _b00000000// 0
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/switch2x2.opt.aa, line 59
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/switch2x2.opt.aa, line 59
  }
  // end data-path
}
$module [inputPort_1_Daemon] 
{
  // pipe-declarations for block %inputPort_1_Daemon
  //  file .Aa/switch2x2.opt.aa, line 66
  // pipe-declarations for block %inputPort_1_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 71
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_64] // Branch Block  file .Aa/switch2x2.opt.aa, line 71
    {
      $P [branch_block_stmt_64__entry__]
      branch_block_stmt_64__entry__ <-| ($entry)
      $P [branch_block_stmt_64__exit__]
      branch_block_stmt_64__exit__ |-> ($exit)
      $P [do_while_stmt_65__entry__] 
      $P [do_while_stmt_65__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 73
      <o> [do_while_stmt_65]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_65__entry__] 
        $P[do_while_stmt_65__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_65_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_67
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_67_sample_start_] 
          $T[phi_stmt_67_sample_completed_] 
          $T[phi_stmt_67_update_start_] 
          $T[phi_stmt_67_update_completed_] 
          $T[phi_stmt_67_sample_start__ps] 
          phi_stmt_67_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_67_sample_completed__ps] 
          phi_stmt_67_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_67_update_start__ps] 
          phi_stmt_67_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_67_update_completed__ps] 
          phi_stmt_67_update_completed_ <-& (phi_stmt_67_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_67_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_67_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_67_update_start_)
          $T[phi_stmt_67_loopback_trigger] 
          phi_stmt_67_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_67_loopback_sample_req] 
          $T[phi_stmt_67_loopback_sample_req_ps] 
          phi_stmt_67_loopback_sample_req <-& (phi_stmt_67_loopback_sample_req_ps)
          phi_stmt_67_loopback_sample_req &-> ($null)
          $T[phi_stmt_67_entry_trigger] 
          phi_stmt_67_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_67_entry_sample_req] 
          $T[phi_stmt_67_entry_sample_req_ps] 
          phi_stmt_67_entry_sample_req <-& (phi_stmt_67_entry_sample_req_ps)
          phi_stmt_67_entry_sample_req &-> ($null)
          phi_stmt_67_update_start_ o<-& (phi_stmt_67_update_completed_ 0)
          phi_stmt_67_sample_start_ o<-& (phi_stmt_67_sample_completed_ 1)
          $T[phi_stmt_67_merged_reqs] 
          $T[phi_stmt_67_phi_mux_ack] 
          $T[phi_stmt_67_phi_mux_ack_ps] 
          phi_stmt_67_phi_mux_ack_ps <-& (phi_stmt_67_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_67_update_completed_)
          $T[type_cast_71_sample_start__ps] 
          $T[type_cast_71_sample_completed__ps] 
          $T[type_cast_71_update_start__ps] 
          $T[type_cast_71_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_71_sample_start_] 
          $T[type_cast_71_sample_completed_] 
          type_cast_71_sample_completed_ <-& (type_cast_71_sample_start_)
          $T[type_cast_71_update_start_] 
          $T [type_cast_71_update_completed_] $delay 
          type_cast_71_update_completed_ <-& (type_cast_71_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_71_sample_start_ <-& (type_cast_71_sample_start__ps)
          type_cast_71_update_start_ <-& (type_cast_71_update_start__ps)
          // Phi complete dependency.
          type_cast_71_sample_completed__ps <-& (type_cast_71_sample_completed_)
          type_cast_71_update_completed__ps <-& (type_cast_71_update_completed_)
          $T[R_next_count_down_72_sample_start__ps] 
          $T[R_next_count_down_72_sample_completed__ps] 
          $T[R_next_count_down_72_update_start__ps] 
          $T[R_next_count_down_72_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_72_sample_start_] 
          $T[R_next_count_down_72_sample_completed_] 
          $T[R_next_count_down_72_update_start_] 
          $T[R_next_count_down_72_update_completed_] 
          ;;[R_next_count_down_72_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_72_sample_start_ &-> (R_next_count_down_72_Sample)
          R_next_count_down_72_sample_completed_ <-& (R_next_count_down_72_Sample)
          ;;[R_next_count_down_72_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_72_update_start_ &-> (R_next_count_down_72_Update)
          R_next_count_down_72_update_completed_ <-& (R_next_count_down_72_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_72_sample_start_ <-& (R_next_count_down_72_sample_start__ps)
          R_next_count_down_72_update_start_ <-& (R_next_count_down_72_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_72_sample_completed__ps <-& (R_next_count_down_72_sample_completed_)
          R_next_count_down_72_update_completed__ps <-& (R_next_count_down_72_update_completed_)
          $phisequencer [ phi_stmt_67_phi_seq] : 
          phi_stmt_67_entry_trigger type_cast_71_sample_start__ps type_cast_71_sample_completed__ps type_cast_71_update_start__ps type_cast_71_update_completed__ps phi_stmt_67_loopback_trigger R_next_count_down_72_sample_start__ps R_next_count_down_72_sample_completed__ps R_next_count_down_72_update_start__ps R_next_count_down_72_update_completed__ps :
          phi_stmt_67_sample_start__ps phi_stmt_67_sample_completed__ps phi_stmt_67_update_start__ps phi_stmt_67_update_completed__ps :
          phi_stmt_67_entry_sample_req_ps phi_stmt_67_loopback_sample_req_ps : 
          phi_stmt_67_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_67
          // start:  single source PHI statement phi_stmt_73
          // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_73_sample_start_] 
          $T[phi_stmt_73_sample_completed_] 
          $T[phi_stmt_73_update_start_] 
          $T[phi_stmt_73_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_73_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_73_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_73_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_1
          $T[RPIPE_in_data_1_75_sample_start_] 
          $T[RPIPE_in_data_1_75_sample_completed_] 
          $T[RPIPE_in_data_1_75_update_start_] 
          $T[RPIPE_in_data_1_75_update_completed_] 
          ;;[RPIPE_in_data_1_75_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_1_75_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_1_75_sample_start_ &-> (RPIPE_in_data_1_75_Sample)
          RPIPE_in_data_1_75_sample_completed_ <-& (RPIPE_in_data_1_75_Sample)
          RPIPE_in_data_1_75_update_start_ <-& (RPIPE_in_data_1_75_sample_completed_)
          RPIPE_in_data_1_75_update_start_ &-> (RPIPE_in_data_1_75_Update)
          RPIPE_in_data_1_75_update_completed_ <-& (RPIPE_in_data_1_75_Update)
          RPIPE_in_data_1_75_sample_start_ o<-& (RPIPE_in_data_1_75_update_completed_ 0)
          // RAW reenables for in_data_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_1_75_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_1_75_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_1_75_update_start_)
          phi_stmt_73_update_completed_ <-& (RPIPE_in_data_1_75_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_73_update_completed_)
          // done: PHI Statement phi_stmt_73
          // start:  PHI statement phi_stmt_76
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_76_sample_start_] 
          $T[phi_stmt_76_sample_completed_] 
          $T[phi_stmt_76_update_start_] 
          $T[phi_stmt_76_update_completed_] 
          $T[phi_stmt_76_sample_start__ps] 
          phi_stmt_76_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_76_sample_completed__ps] 
          phi_stmt_76_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_76_update_start__ps] 
          phi_stmt_76_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_76_update_completed__ps] 
          phi_stmt_76_update_completed_ <-& (phi_stmt_76_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_76_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_76_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_76_update_start_)
          $T[phi_stmt_76_loopback_trigger] 
          phi_stmt_76_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_76_loopback_sample_req] 
          $T[phi_stmt_76_loopback_sample_req_ps] 
          phi_stmt_76_loopback_sample_req <-& (phi_stmt_76_loopback_sample_req_ps)
          phi_stmt_76_loopback_sample_req &-> ($null)
          $T[phi_stmt_76_entry_trigger] 
          phi_stmt_76_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_76_entry_sample_req] 
          $T[phi_stmt_76_entry_sample_req_ps] 
          phi_stmt_76_entry_sample_req <-& (phi_stmt_76_entry_sample_req_ps)
          phi_stmt_76_entry_sample_req &-> ($null)
          phi_stmt_76_update_start_ o<-& (phi_stmt_76_update_completed_ 0)
          phi_stmt_76_sample_start_ o<-& (phi_stmt_76_sample_completed_ 1)
          $T[phi_stmt_76_merged_reqs] 
          $T[phi_stmt_76_phi_mux_ack] 
          $T[phi_stmt_76_phi_mux_ack_ps] 
          phi_stmt_76_phi_mux_ack_ps <-& (phi_stmt_76_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_76_update_completed_)
          $T[konst_78_sample_start__ps] 
          $T[konst_78_sample_completed__ps] 
          $T[konst_78_update_start__ps] 
          $T[konst_78_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_78_sample_start_] 
          $T[konst_78_sample_completed_] 
          konst_78_sample_completed_ <-& (konst_78_sample_start_)
          $T[konst_78_update_start_] 
          $T [konst_78_update_completed_] $delay 
          konst_78_update_completed_ <-& (konst_78_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_78_sample_start_ <-& (konst_78_sample_start__ps)
          konst_78_update_start_ <-& (konst_78_update_start__ps)
          // Phi complete dependency.
          konst_78_sample_completed__ps <-& (konst_78_sample_completed_)
          konst_78_update_completed__ps <-& (konst_78_update_completed_)
          $T[R_next_last_dest_id_79_sample_start__ps] 
          $T[R_next_last_dest_id_79_sample_completed__ps] 
          $T[R_next_last_dest_id_79_update_start__ps] 
          $T[R_next_last_dest_id_79_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_79_sample_start_] 
          $T[R_next_last_dest_id_79_sample_completed_] 
          $T[R_next_last_dest_id_79_update_start_] 
          $T[R_next_last_dest_id_79_update_completed_] 
          ;;[R_next_last_dest_id_79_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_79_sample_start_ &-> (R_next_last_dest_id_79_Sample)
          R_next_last_dest_id_79_sample_completed_ <-& (R_next_last_dest_id_79_Sample)
          ;;[R_next_last_dest_id_79_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_79_update_start_ &-> (R_next_last_dest_id_79_Update)
          R_next_last_dest_id_79_update_completed_ <-& (R_next_last_dest_id_79_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_79_sample_start_ <-& (R_next_last_dest_id_79_sample_start__ps)
          R_next_last_dest_id_79_update_start_ <-& (R_next_last_dest_id_79_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_79_sample_completed__ps <-& (R_next_last_dest_id_79_sample_completed_)
          R_next_last_dest_id_79_update_completed__ps <-& (R_next_last_dest_id_79_update_completed_)
          $phisequencer [ phi_stmt_76_phi_seq] : 
          phi_stmt_76_entry_trigger konst_78_sample_start__ps konst_78_sample_completed__ps konst_78_update_start__ps konst_78_update_completed__ps phi_stmt_76_loopback_trigger R_next_last_dest_id_79_sample_start__ps R_next_last_dest_id_79_sample_completed__ps R_next_last_dest_id_79_update_start__ps R_next_last_dest_id_79_update_completed__ps :
          phi_stmt_76_sample_start__ps phi_stmt_76_sample_completed__ps phi_stmt_76_update_start__ps phi_stmt_76_update_completed__ps :
          phi_stmt_76_entry_sample_req_ps phi_stmt_76_loopback_sample_req_ps : 
          phi_stmt_76_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_76
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 83
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 84
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 85
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 86
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 87
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 88
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 89
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 90
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_1
          $T[WPIPE_noblock_obuf_1_1_121_sample_start_] 
          $T[WPIPE_noblock_obuf_1_1_121_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_1_121_update_start_] 
          $T[WPIPE_noblock_obuf_1_1_121_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_1_121 with guard R_send_to_1_120
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_1_121_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_1_121_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_1_121_sample_start_ &-> (WPIPE_noblock_obuf_1_1_121_Sample)
          WPIPE_noblock_obuf_1_1_121_sample_completed_ <-& (WPIPE_noblock_obuf_1_1_121_Sample)
          WPIPE_noblock_obuf_1_1_121_update_start_ <-& (WPIPE_noblock_obuf_1_1_121_sample_completed_)
          WPIPE_noblock_obuf_1_1_121_update_start_ &-> (WPIPE_noblock_obuf_1_1_121_Update)
          WPIPE_noblock_obuf_1_1_121_update_completed_ <-& (WPIPE_noblock_obuf_1_1_121_Update)
          WPIPE_noblock_obuf_1_1_121_sample_start_ o<-& (WPIPE_noblock_obuf_1_1_121_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_1_121_sample_start_
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_1_121_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 91
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 92
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_2
          $T[WPIPE_noblock_obuf_1_2_130_sample_start_] 
          $T[WPIPE_noblock_obuf_1_2_130_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_2_130_update_start_] 
          $T[WPIPE_noblock_obuf_1_2_130_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_2_130 with guard R_send_to_2_129
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_2_130_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_2_130_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_2_130_sample_start_ &-> (WPIPE_noblock_obuf_1_2_130_Sample)
          WPIPE_noblock_obuf_1_2_130_sample_completed_ <-& (WPIPE_noblock_obuf_1_2_130_Sample)
          WPIPE_noblock_obuf_1_2_130_update_start_ <-& (WPIPE_noblock_obuf_1_2_130_sample_completed_)
          WPIPE_noblock_obuf_1_2_130_update_start_ &-> (WPIPE_noblock_obuf_1_2_130_Update)
          WPIPE_noblock_obuf_1_2_130_update_completed_ <-& (WPIPE_noblock_obuf_1_2_130_Update)
          WPIPE_noblock_obuf_1_2_130_sample_start_ o<-& (WPIPE_noblock_obuf_1_2_130_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_2_130_sample_start_
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_2_130_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 93
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 94
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_3
          $T[WPIPE_noblock_obuf_1_3_139_sample_start_] 
          $T[WPIPE_noblock_obuf_1_3_139_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_3_139_update_start_] 
          $T[WPIPE_noblock_obuf_1_3_139_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_3_139 with guard R_send_to_3_138
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_3_139_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_3_139_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_3_139_sample_start_ &-> (WPIPE_noblock_obuf_1_3_139_Sample)
          WPIPE_noblock_obuf_1_3_139_sample_completed_ <-& (WPIPE_noblock_obuf_1_3_139_Sample)
          WPIPE_noblock_obuf_1_3_139_update_start_ <-& (WPIPE_noblock_obuf_1_3_139_sample_completed_)
          WPIPE_noblock_obuf_1_3_139_update_start_ &-> (WPIPE_noblock_obuf_1_3_139_Update)
          WPIPE_noblock_obuf_1_3_139_update_completed_ <-& (WPIPE_noblock_obuf_1_3_139_Update)
          WPIPE_noblock_obuf_1_3_139_sample_start_ o<-& (WPIPE_noblock_obuf_1_3_139_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_3_139_sample_start_
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_3_139_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 95
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 96
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_4
          $T[WPIPE_noblock_obuf_1_4_148_sample_start_] 
          $T[WPIPE_noblock_obuf_1_4_148_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_4_148_update_start_] 
          $T[WPIPE_noblock_obuf_1_4_148_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_4_148 with guard R_send_to_4_147
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_4_148_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_4_148_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_4_148_sample_start_ &-> (WPIPE_noblock_obuf_1_4_148_Sample)
          WPIPE_noblock_obuf_1_4_148_sample_completed_ <-& (WPIPE_noblock_obuf_1_4_148_Sample)
          WPIPE_noblock_obuf_1_4_148_update_start_ <-& (WPIPE_noblock_obuf_1_4_148_sample_completed_)
          WPIPE_noblock_obuf_1_4_148_update_start_ &-> (WPIPE_noblock_obuf_1_4_148_Update)
          WPIPE_noblock_obuf_1_4_148_update_completed_ <-& (WPIPE_noblock_obuf_1_4_148_Update)
          WPIPE_noblock_obuf_1_4_148_sample_start_ o<-& (WPIPE_noblock_obuf_1_4_148_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_4_148_sample_start_
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_4_148_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_1
          // read-dependencies for pipe in_data_1
          // write-dependencies for pipe in_data_1
          // signal write dependencies for in_data_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_65__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_65_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_65__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_65_loop_body : condition_evaluated
        $bind do_while_stmt_65__entry__  => do_while_stmt_65_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_65_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_65__exit__)
      }
      do_while_stmt_65__entry__ |-> (do_while_stmt_65)
      do_while_stmt_65__exit__ <-| (do_while_stmt_65)
      do_while_stmt_65__entry__ <-| (branch_block_stmt_64__entry__)
      do_while_stmt_65__exit__ |-> (branch_block_stmt_64__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 75
    // constant-object-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // constant-object-declarations for block %inputPort_1_Daemon
    //  file .Aa/switch2x2.opt.aa, line 66
    // constant-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 73
    // 1 
    $constant $W[konst_152_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 75
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_71_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    // 0 
    $constant $W[konst_78_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_83_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_97_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_100_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_111_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_117_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_126_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_135_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_144_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 73
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 75
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    $W[next_count_down_103_72_buffered] : $int<16>
    // count_down
    $W[count_down_67] : $int<16>
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // in_data_1
    $W[RPIPE_in_data_1_75_wire] : $int<32>
    // input_word
    $W[input_word_73] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    $W[next_last_dest_id_109_79_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_76] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 83
    // new_packet
    $W[new_packet_85] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 84
    // dest_id
    $W[dest_id_89] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 85
    // pkt_length
    $W[pkt_length_93] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 86
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_98_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_101_wire] : $int<16>
    // next_count_down
    $W[next_count_down_103] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 87
    // next_last_dest_id
    $W[next_last_dest_id_109] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 88
    // data_to_outport
    $W[data_to_outport_114] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 89
    // send_to_1
    $W[send_to_1_119] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 90
    // noblock_obuf_1_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 91
    // send_to_2
    $W[send_to_2_128] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 92
    // noblock_obuf_1_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 93
    // send_to_3
    $W[send_to_3_137] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 94
    // noblock_obuf_1_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 95
    // send_to_4
    $W[send_to_4_146] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 96
    // noblock_obuf_1_4
    // datapath-instances for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 73
    ==0? [do_while_stmt_65_branch] (konst_152_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 75
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    # := [next_count_down_103_72_buf] (next_count_down_103) (next_count_down_103_72_buffered)     $fullrate
    $buffering $out next_count_down_103_72_buf next_count_down_103_72_buffered  1
    # $phi [phi_stmt_67] (type_cast_71_wire_constant next_count_down_103_72_buffered) ( count_down_67 ) $fullrate
    // $buffering  $out phi_stmt_67 count_down_67 2
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // in_data_1
    $ioport $in [RPIPE_in_data_1_75_inst] (in_data_1) (RPIPE_in_data_1_75_wire)  $fullrate 
    $buffering $out RPIPE_in_data_1_75_inst RPIPE_in_data_1_75_wire 1
    # := [ssrc_phi_stmt_73] (RPIPE_in_data_1_75_wire) (input_word_73)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    # := [next_last_dest_id_109_79_buf] (next_last_dest_id_109) (next_last_dest_id_109_79_buffered)     $fullrate
    $buffering $out next_last_dest_id_109_79_buf next_last_dest_id_109_79_buffered  1
    # $phi [phi_stmt_76] (konst_78_wire_constant next_last_dest_id_109_79_buffered) ( last_dest_id_76 ) $fullrate
    // $buffering  $out phi_stmt_76 last_dest_id_76 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 83
    // (count_down == 0 )
    ==[EQ_u16_u1_84_inst] (count_down_67 konst_83_wire_constant) (new_packet_85)   $flowthrough 
    $delay EQ_u16_u1_84_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 84
    // ( $slice input_word 31 24 ) 
    [:] [slice_88_inst] (input_word_73 31 24) (dest_id_89)  $flowthrough
    $delay slice_88_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 85
    // ( $slice input_word 23 8 ) 
    [:] [slice_92_inst] (input_word_73 23 8) (pkt_length_93)  $flowthrough
    $delay slice_92_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 86
    // (pkt_length - 1 )
    -[SUB_u16_u16_98_inst] (pkt_length_93 konst_97_wire_constant) (SUB_u16_u16_98_wire)   $flowthrough 
    $delay SUB_u16_u16_98_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_101_inst] (count_down_67 konst_100_wire_constant) (SUB_u16_u16_101_wire)   $flowthrough 
    $delay SUB_u16_u16_101_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_102_inst] (new_packet_85 SUB_u16_u16_98_wire SUB_u16_u16_101_wire) (next_count_down_103)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 87
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_108_inst] (new_packet_85 dest_id_89 last_dest_id_76) (next_last_dest_id_109)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 88
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_113_inst] (R_ONE_1_111_wire_constant input_word_73) (data_to_outport_114)   $flowthrough 
    $delay CONCAT_u1_u33_113_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 89
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_118_inst] (next_last_dest_id_109 konst_117_wire_constant) (send_to_1_119)   $flowthrough 
    $delay EQ_u8_u1_118_inst 0
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 90
    // noblock_obuf_1_1
    $ioport $out [WPIPE_noblock_obuf_1_1_121_inst]  (data_to_outport_114) (noblock_obuf_1_1) $guard ( send_to_1_119 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 91
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_127_inst] (next_last_dest_id_109 konst_126_wire_constant) (send_to_2_128)   $flowthrough 
    $delay EQ_u8_u1_127_inst 0
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 92
    // noblock_obuf_1_2
    $ioport $out [WPIPE_noblock_obuf_1_2_130_inst]  (data_to_outport_114) (noblock_obuf_1_2) $guard ( send_to_2_128 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 93
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_136_inst] (next_last_dest_id_109 konst_135_wire_constant) (send_to_3_137)   $flowthrough 
    $delay EQ_u8_u1_136_inst 0
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 94
    // noblock_obuf_1_3
    $ioport $out [WPIPE_noblock_obuf_1_3_139_inst]  (data_to_outport_114) (noblock_obuf_1_3) $guard ( send_to_3_137 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 95
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_145_inst] (next_last_dest_id_109 konst_144_wire_constant) (send_to_4_146)   $flowthrough 
    $delay EQ_u8_u1_145_inst 0
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 96
    // noblock_obuf_1_4
    $ioport $out [WPIPE_noblock_obuf_1_4_148_inst]  (data_to_outport_114) (noblock_obuf_1_4) $guard ( send_to_4_146 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_65
  //  file .Aa/switch2x2.opt.aa, line 73
  phi_stmt_67 <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_entry_sample_req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_loopback_sample_req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_phi_mux_ack)
  next_count_down_103_72_buf <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_72_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_72_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_72_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_72_Update/ack)
  // in_data_1
  RPIPE_in_data_1_75_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Sample/rr branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Update/cr) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Sample/ra branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Update/ca)
  phi_stmt_76 <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_entry_sample_req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_loopback_sample_req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_phi_mux_ack)
  next_last_dest_id_109_79_buf <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 83
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 84
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 85
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 86
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 87
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 88
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 89
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 90
  // data_to_outport
  // noblock_obuf_1_1
  WPIPE_noblock_obuf_1_1_121_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 91
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 92
  // data_to_outport
  // noblock_obuf_1_2
  WPIPE_noblock_obuf_1_2_130_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 93
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 94
  // data_to_outport
  // noblock_obuf_1_3
  WPIPE_noblock_obuf_1_3_139_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 95
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 96
  // data_to_outport
  // noblock_obuf_1_4
  WPIPE_noblock_obuf_1_4_148_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Update/ack)
  do_while_stmt_65_branch <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/condition_evaluated) (branch_block_stmt_64/do_while_stmt_65/loop_exit/ack branch_block_stmt_64/do_while_stmt_65/loop_taken/ack)
}
$module [inputPort_2_Daemon] 
{
  // pipe-declarations for block %inputPort_2_Daemon
  //  file .Aa/switch2x2.opt.aa, line 100
  // pipe-declarations for block %inputPort_2_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 105
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_156] // Branch Block  file .Aa/switch2x2.opt.aa, line 105
    {
      $P [branch_block_stmt_156__entry__]
      branch_block_stmt_156__entry__ <-| ($entry)
      $P [branch_block_stmt_156__exit__]
      branch_block_stmt_156__exit__ |-> ($exit)
      $P [do_while_stmt_157__entry__] 
      $P [do_while_stmt_157__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 107
      <o> [do_while_stmt_157]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_157__entry__] 
        $P[do_while_stmt_157__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_157_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_159
          // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_159_sample_start_] 
          $T[phi_stmt_159_sample_completed_] 
          $T[phi_stmt_159_update_start_] 
          $T[phi_stmt_159_update_completed_] 
          $T[phi_stmt_159_sample_start__ps] 
          phi_stmt_159_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_159_sample_completed__ps] 
          phi_stmt_159_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_159_update_start__ps] 
          phi_stmt_159_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_159_update_completed__ps] 
          phi_stmt_159_update_completed_ <-& (phi_stmt_159_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_159_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_159_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_159_update_start_)
          $T[phi_stmt_159_loopback_trigger] 
          phi_stmt_159_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_159_loopback_sample_req] 
          $T[phi_stmt_159_loopback_sample_req_ps] 
          phi_stmt_159_loopback_sample_req <-& (phi_stmt_159_loopback_sample_req_ps)
          phi_stmt_159_loopback_sample_req &-> ($null)
          $T[phi_stmt_159_entry_trigger] 
          phi_stmt_159_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_159_entry_sample_req] 
          $T[phi_stmt_159_entry_sample_req_ps] 
          phi_stmt_159_entry_sample_req <-& (phi_stmt_159_entry_sample_req_ps)
          phi_stmt_159_entry_sample_req &-> ($null)
          phi_stmt_159_update_start_ o<-& (phi_stmt_159_update_completed_ 0)
          phi_stmt_159_sample_start_ o<-& (phi_stmt_159_sample_completed_ 1)
          $T[phi_stmt_159_merged_reqs] 
          $T[phi_stmt_159_phi_mux_ack] 
          $T[phi_stmt_159_phi_mux_ack_ps] 
          phi_stmt_159_phi_mux_ack_ps <-& (phi_stmt_159_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_159_update_completed_)
          $T[R_next_count_down_161_sample_start__ps] 
          $T[R_next_count_down_161_sample_completed__ps] 
          $T[R_next_count_down_161_update_start__ps] 
          $T[R_next_count_down_161_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_count_down_161_sample_start_] 
          $T[R_next_count_down_161_sample_completed_] 
          $T[R_next_count_down_161_update_start_] 
          $T[R_next_count_down_161_update_completed_] 
          ;;[R_next_count_down_161_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_161_sample_start_ &-> (R_next_count_down_161_Sample)
          R_next_count_down_161_sample_completed_ <-& (R_next_count_down_161_Sample)
          ;;[R_next_count_down_161_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_161_update_start_ &-> (R_next_count_down_161_Update)
          R_next_count_down_161_update_completed_ <-& (R_next_count_down_161_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_161_sample_start_ <-& (R_next_count_down_161_sample_start__ps)
          R_next_count_down_161_update_start_ <-& (R_next_count_down_161_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_161_sample_completed__ps <-& (R_next_count_down_161_sample_completed_)
          R_next_count_down_161_update_completed__ps <-& (R_next_count_down_161_update_completed_)
          $T[type_cast_163_sample_start__ps] 
          $T[type_cast_163_sample_completed__ps] 
          $T[type_cast_163_update_start__ps] 
          $T[type_cast_163_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_163_sample_start_] 
          $T[type_cast_163_sample_completed_] 
          type_cast_163_sample_completed_ <-& (type_cast_163_sample_start_)
          $T[type_cast_163_update_start_] 
          $T [type_cast_163_update_completed_] $delay 
          type_cast_163_update_completed_ <-& (type_cast_163_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_163_sample_start_ <-& (type_cast_163_sample_start__ps)
          type_cast_163_update_start_ <-& (type_cast_163_update_start__ps)
          // Phi complete dependency.
          type_cast_163_sample_completed__ps <-& (type_cast_163_sample_completed_)
          type_cast_163_update_completed__ps <-& (type_cast_163_update_completed_)
          $phisequencer [ phi_stmt_159_phi_seq] : 
          phi_stmt_159_loopback_trigger R_next_count_down_161_sample_start__ps R_next_count_down_161_sample_completed__ps R_next_count_down_161_update_start__ps R_next_count_down_161_update_completed__ps phi_stmt_159_entry_trigger type_cast_163_sample_start__ps type_cast_163_sample_completed__ps type_cast_163_update_start__ps type_cast_163_update_completed__ps :
          phi_stmt_159_sample_start__ps phi_stmt_159_sample_completed__ps phi_stmt_159_update_start__ps phi_stmt_159_update_completed__ps :
          phi_stmt_159_loopback_sample_req_ps phi_stmt_159_entry_sample_req_ps : 
          phi_stmt_159_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_159
          // start:  single source PHI statement phi_stmt_164
          // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_164_sample_start_] 
          $T[phi_stmt_164_sample_completed_] 
          $T[phi_stmt_164_update_start_] 
          $T[phi_stmt_164_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_164_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_164_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_164_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_2
          $T[RPIPE_in_data_2_166_sample_start_] 
          $T[RPIPE_in_data_2_166_sample_completed_] 
          $T[RPIPE_in_data_2_166_update_start_] 
          $T[RPIPE_in_data_2_166_update_completed_] 
          ;;[RPIPE_in_data_2_166_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_2_166_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_2_166_sample_start_ &-> (RPIPE_in_data_2_166_Sample)
          RPIPE_in_data_2_166_sample_completed_ <-& (RPIPE_in_data_2_166_Sample)
          RPIPE_in_data_2_166_update_start_ <-& (RPIPE_in_data_2_166_sample_completed_)
          RPIPE_in_data_2_166_update_start_ &-> (RPIPE_in_data_2_166_Update)
          RPIPE_in_data_2_166_update_completed_ <-& (RPIPE_in_data_2_166_Update)
          RPIPE_in_data_2_166_sample_start_ o<-& (RPIPE_in_data_2_166_update_completed_ 0)
          // RAW reenables for in_data_2
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_2_166_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_2_166_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_2_166_update_start_)
          phi_stmt_164_update_completed_ <-& (RPIPE_in_data_2_166_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_164_update_completed_)
          // done: PHI Statement phi_stmt_164
          // start:  PHI statement phi_stmt_167
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_167_sample_start_] 
          $T[phi_stmt_167_sample_completed_] 
          $T[phi_stmt_167_update_start_] 
          $T[phi_stmt_167_update_completed_] 
          $T[phi_stmt_167_sample_start__ps] 
          phi_stmt_167_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_167_sample_completed__ps] 
          phi_stmt_167_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_167_update_start__ps] 
          phi_stmt_167_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_167_update_completed__ps] 
          phi_stmt_167_update_completed_ <-& (phi_stmt_167_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_167_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_167_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_167_update_start_)
          $T[phi_stmt_167_loopback_trigger] 
          phi_stmt_167_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_167_loopback_sample_req] 
          $T[phi_stmt_167_loopback_sample_req_ps] 
          phi_stmt_167_loopback_sample_req <-& (phi_stmt_167_loopback_sample_req_ps)
          phi_stmt_167_loopback_sample_req &-> ($null)
          $T[phi_stmt_167_entry_trigger] 
          phi_stmt_167_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_167_entry_sample_req] 
          $T[phi_stmt_167_entry_sample_req_ps] 
          phi_stmt_167_entry_sample_req <-& (phi_stmt_167_entry_sample_req_ps)
          phi_stmt_167_entry_sample_req &-> ($null)
          phi_stmt_167_update_start_ o<-& (phi_stmt_167_update_completed_ 0)
          phi_stmt_167_sample_start_ o<-& (phi_stmt_167_sample_completed_ 1)
          $T[phi_stmt_167_merged_reqs] 
          $T[phi_stmt_167_phi_mux_ack] 
          $T[phi_stmt_167_phi_mux_ack_ps] 
          phi_stmt_167_phi_mux_ack_ps <-& (phi_stmt_167_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_167_update_completed_)
          $T[konst_169_sample_start__ps] 
          $T[konst_169_sample_completed__ps] 
          $T[konst_169_update_start__ps] 
          $T[konst_169_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_169_sample_start_] 
          $T[konst_169_sample_completed_] 
          konst_169_sample_completed_ <-& (konst_169_sample_start_)
          $T[konst_169_update_start_] 
          $T [konst_169_update_completed_] $delay 
          konst_169_update_completed_ <-& (konst_169_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_169_sample_start_ <-& (konst_169_sample_start__ps)
          konst_169_update_start_ <-& (konst_169_update_start__ps)
          // Phi complete dependency.
          konst_169_sample_completed__ps <-& (konst_169_sample_completed_)
          konst_169_update_completed__ps <-& (konst_169_update_completed_)
          $T[R_next_last_dest_id_170_sample_start__ps] 
          $T[R_next_last_dest_id_170_sample_completed__ps] 
          $T[R_next_last_dest_id_170_update_start__ps] 
          $T[R_next_last_dest_id_170_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_170_sample_start_] 
          $T[R_next_last_dest_id_170_sample_completed_] 
          $T[R_next_last_dest_id_170_update_start_] 
          $T[R_next_last_dest_id_170_update_completed_] 
          ;;[R_next_last_dest_id_170_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_170_sample_start_ &-> (R_next_last_dest_id_170_Sample)
          R_next_last_dest_id_170_sample_completed_ <-& (R_next_last_dest_id_170_Sample)
          ;;[R_next_last_dest_id_170_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_170_update_start_ &-> (R_next_last_dest_id_170_Update)
          R_next_last_dest_id_170_update_completed_ <-& (R_next_last_dest_id_170_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_170_sample_start_ <-& (R_next_last_dest_id_170_sample_start__ps)
          R_next_last_dest_id_170_update_start_ <-& (R_next_last_dest_id_170_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_170_sample_completed__ps <-& (R_next_last_dest_id_170_sample_completed_)
          R_next_last_dest_id_170_update_completed__ps <-& (R_next_last_dest_id_170_update_completed_)
          $phisequencer [ phi_stmt_167_phi_seq] : 
          phi_stmt_167_entry_trigger konst_169_sample_start__ps konst_169_sample_completed__ps konst_169_update_start__ps konst_169_update_completed__ps phi_stmt_167_loopback_trigger R_next_last_dest_id_170_sample_start__ps R_next_last_dest_id_170_sample_completed__ps R_next_last_dest_id_170_update_start__ps R_next_last_dest_id_170_update_completed__ps :
          phi_stmt_167_sample_start__ps phi_stmt_167_sample_completed__ps phi_stmt_167_update_start__ps phi_stmt_167_update_completed__ps :
          phi_stmt_167_entry_sample_req_ps phi_stmt_167_loopback_sample_req_ps : 
          phi_stmt_167_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_167
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 117
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 118
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 119
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 120
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 121
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 122
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 123
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 124
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_1
          $T[WPIPE_noblock_obuf_2_1_212_sample_start_] 
          $T[WPIPE_noblock_obuf_2_1_212_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_1_212_update_start_] 
          $T[WPIPE_noblock_obuf_2_1_212_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_1_212 with guard R_send_to_1_211
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_1_212_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_1_212_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_1_212_sample_start_ &-> (WPIPE_noblock_obuf_2_1_212_Sample)
          WPIPE_noblock_obuf_2_1_212_sample_completed_ <-& (WPIPE_noblock_obuf_2_1_212_Sample)
          WPIPE_noblock_obuf_2_1_212_update_start_ <-& (WPIPE_noblock_obuf_2_1_212_sample_completed_)
          WPIPE_noblock_obuf_2_1_212_update_start_ &-> (WPIPE_noblock_obuf_2_1_212_Update)
          WPIPE_noblock_obuf_2_1_212_update_completed_ <-& (WPIPE_noblock_obuf_2_1_212_Update)
          WPIPE_noblock_obuf_2_1_212_sample_start_ o<-& (WPIPE_noblock_obuf_2_1_212_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_1_212_sample_start_
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_1_212_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 125
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 126
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_2
          $T[WPIPE_noblock_obuf_2_2_221_sample_start_] 
          $T[WPIPE_noblock_obuf_2_2_221_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_2_221_update_start_] 
          $T[WPIPE_noblock_obuf_2_2_221_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_2_221 with guard R_send_to_2_220
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_2_221_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_2_221_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_2_221_sample_start_ &-> (WPIPE_noblock_obuf_2_2_221_Sample)
          WPIPE_noblock_obuf_2_2_221_sample_completed_ <-& (WPIPE_noblock_obuf_2_2_221_Sample)
          WPIPE_noblock_obuf_2_2_221_update_start_ <-& (WPIPE_noblock_obuf_2_2_221_sample_completed_)
          WPIPE_noblock_obuf_2_2_221_update_start_ &-> (WPIPE_noblock_obuf_2_2_221_Update)
          WPIPE_noblock_obuf_2_2_221_update_completed_ <-& (WPIPE_noblock_obuf_2_2_221_Update)
          WPIPE_noblock_obuf_2_2_221_sample_start_ o<-& (WPIPE_noblock_obuf_2_2_221_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_2_221_sample_start_
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_2_221_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 127
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 128
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_3
          $T[WPIPE_noblock_obuf_2_3_230_sample_start_] 
          $T[WPIPE_noblock_obuf_2_3_230_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_3_230_update_start_] 
          $T[WPIPE_noblock_obuf_2_3_230_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_3_230 with guard R_send_to_3_229
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_3_230_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_3_230_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_3_230_sample_start_ &-> (WPIPE_noblock_obuf_2_3_230_Sample)
          WPIPE_noblock_obuf_2_3_230_sample_completed_ <-& (WPIPE_noblock_obuf_2_3_230_Sample)
          WPIPE_noblock_obuf_2_3_230_update_start_ <-& (WPIPE_noblock_obuf_2_3_230_sample_completed_)
          WPIPE_noblock_obuf_2_3_230_update_start_ &-> (WPIPE_noblock_obuf_2_3_230_Update)
          WPIPE_noblock_obuf_2_3_230_update_completed_ <-& (WPIPE_noblock_obuf_2_3_230_Update)
          WPIPE_noblock_obuf_2_3_230_sample_start_ o<-& (WPIPE_noblock_obuf_2_3_230_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_3_230_sample_start_
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_3_230_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 129
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 130
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_4
          $T[WPIPE_noblock_obuf_2_4_239_sample_start_] 
          $T[WPIPE_noblock_obuf_2_4_239_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_4_239_update_start_] 
          $T[WPIPE_noblock_obuf_2_4_239_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_4_239 with guard R_send_to_4_238
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_4_239_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_4_239_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_4_239_sample_start_ &-> (WPIPE_noblock_obuf_2_4_239_Sample)
          WPIPE_noblock_obuf_2_4_239_sample_completed_ <-& (WPIPE_noblock_obuf_2_4_239_Sample)
          WPIPE_noblock_obuf_2_4_239_update_start_ <-& (WPIPE_noblock_obuf_2_4_239_sample_completed_)
          WPIPE_noblock_obuf_2_4_239_update_start_ &-> (WPIPE_noblock_obuf_2_4_239_Update)
          WPIPE_noblock_obuf_2_4_239_update_completed_ <-& (WPIPE_noblock_obuf_2_4_239_Update)
          WPIPE_noblock_obuf_2_4_239_sample_start_ o<-& (WPIPE_noblock_obuf_2_4_239_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_4_239_sample_start_
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_4_239_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_2
          // read-dependencies for pipe in_data_2
          // write-dependencies for pipe in_data_2
          // signal write dependencies for in_data_2
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_157__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_157_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_157__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_157_loop_body : condition_evaluated
        $bind do_while_stmt_157__entry__  => do_while_stmt_157_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_157_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_157__exit__)
      }
      do_while_stmt_157__entry__ |-> (do_while_stmt_157)
      do_while_stmt_157__exit__ <-| (do_while_stmt_157)
      do_while_stmt_157__entry__ <-| (branch_block_stmt_156__entry__)
      do_while_stmt_157__exit__ |-> (branch_block_stmt_156__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 109
    // constant-object-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // constant-object-declarations for block %inputPort_2_Daemon
    //  file .Aa/switch2x2.opt.aa, line 100
    // constant-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 107
    // 1 
    $constant $W[konst_243_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 109
    // constant-declarations for phi:  			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_163_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    // 0 
    $constant $W[konst_169_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_174_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_188_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_191_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_202_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_208_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_217_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_226_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_235_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 107
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 109
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    $W[next_count_down_194_161_buffered] : $int<16>
    // count_down
    $W[count_down_159] : $int<16>
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // in_data_2
    $W[RPIPE_in_data_2_166_wire] : $int<32>
    // input_word
    $W[input_word_164] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    $W[next_last_dest_id_200_170_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_167] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 117
    // new_packet
    $W[new_packet_176] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 118
    // dest_id
    $W[dest_id_180] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 119
    // pkt_length
    $W[pkt_length_184] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 120
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_189_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_192_wire] : $int<16>
    // next_count_down
    $W[next_count_down_194] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 121
    // next_last_dest_id
    $W[next_last_dest_id_200] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 122
    // data_to_outport
    $W[data_to_outport_205] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 123
    // send_to_1
    $W[send_to_1_210] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 124
    // noblock_obuf_2_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 125
    // send_to_2
    $W[send_to_2_219] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 126
    // noblock_obuf_2_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 127
    // send_to_3
    $W[send_to_3_228] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 128
    // noblock_obuf_2_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 129
    // send_to_4
    $W[send_to_4_237] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 130
    // noblock_obuf_2_4
    // datapath-instances for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 107
    ==0? [do_while_stmt_157_branch] (konst_243_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 109
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    # := [next_count_down_194_161_buf] (next_count_down_194) (next_count_down_194_161_buffered)     $fullrate
    $buffering $out next_count_down_194_161_buf next_count_down_194_161_buffered  1
    # $phi [phi_stmt_159] (next_count_down_194_161_buffered type_cast_163_wire_constant) ( count_down_159 ) $fullrate
    // $buffering  $out phi_stmt_159 count_down_159 2
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // in_data_2
    $ioport $in [RPIPE_in_data_2_166_inst] (in_data_2) (RPIPE_in_data_2_166_wire)  $fullrate 
    $buffering $out RPIPE_in_data_2_166_inst RPIPE_in_data_2_166_wire 1
    # := [ssrc_phi_stmt_164] (RPIPE_in_data_2_166_wire) (input_word_164)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    # := [next_last_dest_id_200_170_buf] (next_last_dest_id_200) (next_last_dest_id_200_170_buffered)     $fullrate
    $buffering $out next_last_dest_id_200_170_buf next_last_dest_id_200_170_buffered  1
    # $phi [phi_stmt_167] (konst_169_wire_constant next_last_dest_id_200_170_buffered) ( last_dest_id_167 ) $fullrate
    // $buffering  $out phi_stmt_167 last_dest_id_167 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 117
    // (count_down == 0 )
    ==[EQ_u16_u1_175_inst] (count_down_159 konst_174_wire_constant) (new_packet_176)   $flowthrough 
    $delay EQ_u16_u1_175_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 118
    // ( $slice input_word 31 24 ) 
    [:] [slice_179_inst] (input_word_164 31 24) (dest_id_180)  $flowthrough
    $delay slice_179_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 119
    // ( $slice input_word 23 8 ) 
    [:] [slice_183_inst] (input_word_164 23 8) (pkt_length_184)  $flowthrough
    $delay slice_183_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 120
    // (pkt_length - 1 )
    -[SUB_u16_u16_189_inst] (pkt_length_184 konst_188_wire_constant) (SUB_u16_u16_189_wire)   $flowthrough 
    $delay SUB_u16_u16_189_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_192_inst] (count_down_159 konst_191_wire_constant) (SUB_u16_u16_192_wire)   $flowthrough 
    $delay SUB_u16_u16_192_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_193_inst] (new_packet_176 SUB_u16_u16_189_wire SUB_u16_u16_192_wire) (next_count_down_194)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 121
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_199_inst] (new_packet_176 dest_id_180 last_dest_id_167) (next_last_dest_id_200)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 122
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_204_inst] (R_ONE_1_202_wire_constant input_word_164) (data_to_outport_205)   $flowthrough 
    $delay CONCAT_u1_u33_204_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 123
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_209_inst] (next_last_dest_id_200 konst_208_wire_constant) (send_to_1_210)   $flowthrough 
    $delay EQ_u8_u1_209_inst 0
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 124
    // noblock_obuf_2_1
    $ioport $out [WPIPE_noblock_obuf_2_1_212_inst]  (data_to_outport_205) (noblock_obuf_2_1) $guard ( send_to_1_210 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 125
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_218_inst] (next_last_dest_id_200 konst_217_wire_constant) (send_to_2_219)   $flowthrough 
    $delay EQ_u8_u1_218_inst 0
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 126
    // noblock_obuf_2_2
    $ioport $out [WPIPE_noblock_obuf_2_2_221_inst]  (data_to_outport_205) (noblock_obuf_2_2) $guard ( send_to_2_219 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 127
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_227_inst] (next_last_dest_id_200 konst_226_wire_constant) (send_to_3_228)   $flowthrough 
    $delay EQ_u8_u1_227_inst 0
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 128
    // noblock_obuf_2_3
    $ioport $out [WPIPE_noblock_obuf_2_3_230_inst]  (data_to_outport_205) (noblock_obuf_2_3) $guard ( send_to_3_228 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 129
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_236_inst] (next_last_dest_id_200 konst_235_wire_constant) (send_to_4_237)   $flowthrough 
    $delay EQ_u8_u1_236_inst 0
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 130
    // noblock_obuf_2_4
    $ioport $out [WPIPE_noblock_obuf_2_4_239_inst]  (data_to_outport_205) (noblock_obuf_2_4) $guard ( send_to_4_237 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_157
  //  file .Aa/switch2x2.opt.aa, line 107
  phi_stmt_159 <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_loopback_sample_req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_entry_sample_req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_phi_mux_ack)
  next_count_down_194_161_buf <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Update/ack)
  // in_data_2
  RPIPE_in_data_2_166_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Sample/rr branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Update/cr) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Sample/ra branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Update/ca)
  phi_stmt_167 <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_entry_sample_req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_loopback_sample_req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_phi_mux_ack)
  next_last_dest_id_200_170_buf <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 117
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 118
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 119
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 120
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 121
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 122
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 123
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 124
  // data_to_outport
  // noblock_obuf_2_1
  WPIPE_noblock_obuf_2_1_212_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 125
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 126
  // data_to_outport
  // noblock_obuf_2_2
  WPIPE_noblock_obuf_2_2_221_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 127
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 128
  // data_to_outport
  // noblock_obuf_2_3
  WPIPE_noblock_obuf_2_3_230_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 129
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 130
  // data_to_outport
  // noblock_obuf_2_4
  WPIPE_noblock_obuf_2_4_239_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Update/ack)
  do_while_stmt_157_branch <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/condition_evaluated) (branch_block_stmt_156/do_while_stmt_157/loop_exit/ack branch_block_stmt_156/do_while_stmt_157/loop_taken/ack)
}
$module [inputPort_3_Daemon] 
{
  // pipe-declarations for block %inputPort_3_Daemon
  //  file .Aa/switch2x2.opt.aa, line 134
  // pipe-declarations for block %inputPort_3_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 139
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_247] // Branch Block  file .Aa/switch2x2.opt.aa, line 139
    {
      $P [branch_block_stmt_247__entry__]
      branch_block_stmt_247__entry__ <-| ($entry)
      $P [branch_block_stmt_247__exit__]
      branch_block_stmt_247__exit__ |-> ($exit)
      $P [do_while_stmt_248__entry__] 
      $P [do_while_stmt_248__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 141
      <o> [do_while_stmt_248]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_248__entry__] 
        $P[do_while_stmt_248__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_248_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_250
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_250_sample_start_] 
          $T[phi_stmt_250_sample_completed_] 
          $T[phi_stmt_250_update_start_] 
          $T[phi_stmt_250_update_completed_] 
          $T[phi_stmt_250_sample_start__ps] 
          phi_stmt_250_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_250_sample_completed__ps] 
          phi_stmt_250_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_250_update_start__ps] 
          phi_stmt_250_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_250_update_completed__ps] 
          phi_stmt_250_update_completed_ <-& (phi_stmt_250_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_250_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_250_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_250_update_start_)
          $T[phi_stmt_250_loopback_trigger] 
          phi_stmt_250_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_250_loopback_sample_req] 
          $T[phi_stmt_250_loopback_sample_req_ps] 
          phi_stmt_250_loopback_sample_req <-& (phi_stmt_250_loopback_sample_req_ps)
          phi_stmt_250_loopback_sample_req &-> ($null)
          $T[phi_stmt_250_entry_trigger] 
          phi_stmt_250_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_250_entry_sample_req] 
          $T[phi_stmt_250_entry_sample_req_ps] 
          phi_stmt_250_entry_sample_req <-& (phi_stmt_250_entry_sample_req_ps)
          phi_stmt_250_entry_sample_req &-> ($null)
          phi_stmt_250_update_start_ o<-& (phi_stmt_250_update_completed_ 0)
          phi_stmt_250_sample_start_ o<-& (phi_stmt_250_sample_completed_ 1)
          $T[phi_stmt_250_merged_reqs] 
          $T[phi_stmt_250_phi_mux_ack] 
          $T[phi_stmt_250_phi_mux_ack_ps] 
          phi_stmt_250_phi_mux_ack_ps <-& (phi_stmt_250_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_250_update_completed_)
          $T[type_cast_253_sample_start__ps] 
          $T[type_cast_253_sample_completed__ps] 
          $T[type_cast_253_update_start__ps] 
          $T[type_cast_253_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_253_sample_start_] 
          $T[type_cast_253_sample_completed_] 
          type_cast_253_sample_completed_ <-& (type_cast_253_sample_start_)
          $T[type_cast_253_update_start_] 
          $T [type_cast_253_update_completed_] $delay 
          type_cast_253_update_completed_ <-& (type_cast_253_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_253_sample_start_ <-& (type_cast_253_sample_start__ps)
          type_cast_253_update_start_ <-& (type_cast_253_update_start__ps)
          // Phi complete dependency.
          type_cast_253_sample_completed__ps <-& (type_cast_253_sample_completed_)
          type_cast_253_update_completed__ps <-& (type_cast_253_update_completed_)
          $T[R_next_count_down_254_sample_start__ps] 
          $T[R_next_count_down_254_sample_completed__ps] 
          $T[R_next_count_down_254_update_start__ps] 
          $T[R_next_count_down_254_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_254_sample_start_] 
          $T[R_next_count_down_254_sample_completed_] 
          $T[R_next_count_down_254_update_start_] 
          $T[R_next_count_down_254_update_completed_] 
          ;;[R_next_count_down_254_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_254_sample_start_ &-> (R_next_count_down_254_Sample)
          R_next_count_down_254_sample_completed_ <-& (R_next_count_down_254_Sample)
          ;;[R_next_count_down_254_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_254_update_start_ &-> (R_next_count_down_254_Update)
          R_next_count_down_254_update_completed_ <-& (R_next_count_down_254_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_254_sample_start_ <-& (R_next_count_down_254_sample_start__ps)
          R_next_count_down_254_update_start_ <-& (R_next_count_down_254_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_254_sample_completed__ps <-& (R_next_count_down_254_sample_completed_)
          R_next_count_down_254_update_completed__ps <-& (R_next_count_down_254_update_completed_)
          $phisequencer [ phi_stmt_250_phi_seq] : 
          phi_stmt_250_entry_trigger type_cast_253_sample_start__ps type_cast_253_sample_completed__ps type_cast_253_update_start__ps type_cast_253_update_completed__ps phi_stmt_250_loopback_trigger R_next_count_down_254_sample_start__ps R_next_count_down_254_sample_completed__ps R_next_count_down_254_update_start__ps R_next_count_down_254_update_completed__ps :
          phi_stmt_250_sample_start__ps phi_stmt_250_sample_completed__ps phi_stmt_250_update_start__ps phi_stmt_250_update_completed__ps :
          phi_stmt_250_entry_sample_req_ps phi_stmt_250_loopback_sample_req_ps : 
          phi_stmt_250_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_250
          // start:  single source PHI statement phi_stmt_255
          // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_255_sample_start_] 
          $T[phi_stmt_255_sample_completed_] 
          $T[phi_stmt_255_update_start_] 
          $T[phi_stmt_255_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_255_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_255_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_255_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_3
          $T[RPIPE_in_data_3_257_sample_start_] 
          $T[RPIPE_in_data_3_257_sample_completed_] 
          $T[RPIPE_in_data_3_257_update_start_] 
          $T[RPIPE_in_data_3_257_update_completed_] 
          ;;[RPIPE_in_data_3_257_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_3_257_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_3_257_sample_start_ &-> (RPIPE_in_data_3_257_Sample)
          RPIPE_in_data_3_257_sample_completed_ <-& (RPIPE_in_data_3_257_Sample)
          RPIPE_in_data_3_257_update_start_ <-& (RPIPE_in_data_3_257_sample_completed_)
          RPIPE_in_data_3_257_update_start_ &-> (RPIPE_in_data_3_257_Update)
          RPIPE_in_data_3_257_update_completed_ <-& (RPIPE_in_data_3_257_Update)
          RPIPE_in_data_3_257_sample_start_ o<-& (RPIPE_in_data_3_257_update_completed_ 0)
          // RAW reenables for in_data_3
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_3_257_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_3_257_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_3_257_update_start_)
          phi_stmt_255_update_completed_ <-& (RPIPE_in_data_3_257_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_255_update_completed_)
          // done: PHI Statement phi_stmt_255
          // start:  PHI statement phi_stmt_258
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_258_sample_start_] 
          $T[phi_stmt_258_sample_completed_] 
          $T[phi_stmt_258_update_start_] 
          $T[phi_stmt_258_update_completed_] 
          $T[phi_stmt_258_sample_start__ps] 
          phi_stmt_258_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_258_sample_completed__ps] 
          phi_stmt_258_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_258_update_start__ps] 
          phi_stmt_258_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_258_update_completed__ps] 
          phi_stmt_258_update_completed_ <-& (phi_stmt_258_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_258_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_258_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_258_update_start_)
          $T[phi_stmt_258_loopback_trigger] 
          phi_stmt_258_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_258_loopback_sample_req] 
          $T[phi_stmt_258_loopback_sample_req_ps] 
          phi_stmt_258_loopback_sample_req <-& (phi_stmt_258_loopback_sample_req_ps)
          phi_stmt_258_loopback_sample_req &-> ($null)
          $T[phi_stmt_258_entry_trigger] 
          phi_stmt_258_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_258_entry_sample_req] 
          $T[phi_stmt_258_entry_sample_req_ps] 
          phi_stmt_258_entry_sample_req <-& (phi_stmt_258_entry_sample_req_ps)
          phi_stmt_258_entry_sample_req &-> ($null)
          phi_stmt_258_update_start_ o<-& (phi_stmt_258_update_completed_ 0)
          phi_stmt_258_sample_start_ o<-& (phi_stmt_258_sample_completed_ 1)
          $T[phi_stmt_258_merged_reqs] 
          $T[phi_stmt_258_phi_mux_ack] 
          $T[phi_stmt_258_phi_mux_ack_ps] 
          phi_stmt_258_phi_mux_ack_ps <-& (phi_stmt_258_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_258_update_completed_)
          $T[konst_260_sample_start__ps] 
          $T[konst_260_sample_completed__ps] 
          $T[konst_260_update_start__ps] 
          $T[konst_260_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_260_sample_start_] 
          $T[konst_260_sample_completed_] 
          konst_260_sample_completed_ <-& (konst_260_sample_start_)
          $T[konst_260_update_start_] 
          $T [konst_260_update_completed_] $delay 
          konst_260_update_completed_ <-& (konst_260_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_260_sample_start_ <-& (konst_260_sample_start__ps)
          konst_260_update_start_ <-& (konst_260_update_start__ps)
          // Phi complete dependency.
          konst_260_sample_completed__ps <-& (konst_260_sample_completed_)
          konst_260_update_completed__ps <-& (konst_260_update_completed_)
          $T[R_next_last_dest_id_261_sample_start__ps] 
          $T[R_next_last_dest_id_261_sample_completed__ps] 
          $T[R_next_last_dest_id_261_update_start__ps] 
          $T[R_next_last_dest_id_261_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_261_sample_start_] 
          $T[R_next_last_dest_id_261_sample_completed_] 
          $T[R_next_last_dest_id_261_update_start_] 
          $T[R_next_last_dest_id_261_update_completed_] 
          ;;[R_next_last_dest_id_261_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_261_sample_start_ &-> (R_next_last_dest_id_261_Sample)
          R_next_last_dest_id_261_sample_completed_ <-& (R_next_last_dest_id_261_Sample)
          ;;[R_next_last_dest_id_261_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_261_update_start_ &-> (R_next_last_dest_id_261_Update)
          R_next_last_dest_id_261_update_completed_ <-& (R_next_last_dest_id_261_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_261_sample_start_ <-& (R_next_last_dest_id_261_sample_start__ps)
          R_next_last_dest_id_261_update_start_ <-& (R_next_last_dest_id_261_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_261_sample_completed__ps <-& (R_next_last_dest_id_261_sample_completed_)
          R_next_last_dest_id_261_update_completed__ps <-& (R_next_last_dest_id_261_update_completed_)
          $phisequencer [ phi_stmt_258_phi_seq] : 
          phi_stmt_258_entry_trigger konst_260_sample_start__ps konst_260_sample_completed__ps konst_260_update_start__ps konst_260_update_completed__ps phi_stmt_258_loopback_trigger R_next_last_dest_id_261_sample_start__ps R_next_last_dest_id_261_sample_completed__ps R_next_last_dest_id_261_update_start__ps R_next_last_dest_id_261_update_completed__ps :
          phi_stmt_258_sample_start__ps phi_stmt_258_sample_completed__ps phi_stmt_258_update_start__ps phi_stmt_258_update_completed__ps :
          phi_stmt_258_entry_sample_req_ps phi_stmt_258_loopback_sample_req_ps : 
          phi_stmt_258_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_258
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 151
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 152
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 153
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 154
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 155
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 156
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 157
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 158
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_1
          $T[WPIPE_noblock_obuf_3_1_303_sample_start_] 
          $T[WPIPE_noblock_obuf_3_1_303_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_1_303_update_start_] 
          $T[WPIPE_noblock_obuf_3_1_303_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_1_303 with guard R_send_to_1_302
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_1_303_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_1_303_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_1_303_sample_start_ &-> (WPIPE_noblock_obuf_3_1_303_Sample)
          WPIPE_noblock_obuf_3_1_303_sample_completed_ <-& (WPIPE_noblock_obuf_3_1_303_Sample)
          WPIPE_noblock_obuf_3_1_303_update_start_ <-& (WPIPE_noblock_obuf_3_1_303_sample_completed_)
          WPIPE_noblock_obuf_3_1_303_update_start_ &-> (WPIPE_noblock_obuf_3_1_303_Update)
          WPIPE_noblock_obuf_3_1_303_update_completed_ <-& (WPIPE_noblock_obuf_3_1_303_Update)
          WPIPE_noblock_obuf_3_1_303_sample_start_ o<-& (WPIPE_noblock_obuf_3_1_303_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_1_303_sample_start_
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_1_303_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 159
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 160
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_2
          $T[WPIPE_noblock_obuf_3_2_312_sample_start_] 
          $T[WPIPE_noblock_obuf_3_2_312_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_2_312_update_start_] 
          $T[WPIPE_noblock_obuf_3_2_312_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_2_312 with guard R_send_to_2_311
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_2_312_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_2_312_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_2_312_sample_start_ &-> (WPIPE_noblock_obuf_3_2_312_Sample)
          WPIPE_noblock_obuf_3_2_312_sample_completed_ <-& (WPIPE_noblock_obuf_3_2_312_Sample)
          WPIPE_noblock_obuf_3_2_312_update_start_ <-& (WPIPE_noblock_obuf_3_2_312_sample_completed_)
          WPIPE_noblock_obuf_3_2_312_update_start_ &-> (WPIPE_noblock_obuf_3_2_312_Update)
          WPIPE_noblock_obuf_3_2_312_update_completed_ <-& (WPIPE_noblock_obuf_3_2_312_Update)
          WPIPE_noblock_obuf_3_2_312_sample_start_ o<-& (WPIPE_noblock_obuf_3_2_312_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_2_312_sample_start_
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_2_312_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 161
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 162
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_3
          $T[WPIPE_noblock_obuf_3_3_321_sample_start_] 
          $T[WPIPE_noblock_obuf_3_3_321_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_3_321_update_start_] 
          $T[WPIPE_noblock_obuf_3_3_321_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_3_321 with guard R_send_to_3_320
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_3_321_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_3_321_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_3_321_sample_start_ &-> (WPIPE_noblock_obuf_3_3_321_Sample)
          WPIPE_noblock_obuf_3_3_321_sample_completed_ <-& (WPIPE_noblock_obuf_3_3_321_Sample)
          WPIPE_noblock_obuf_3_3_321_update_start_ <-& (WPIPE_noblock_obuf_3_3_321_sample_completed_)
          WPIPE_noblock_obuf_3_3_321_update_start_ &-> (WPIPE_noblock_obuf_3_3_321_Update)
          WPIPE_noblock_obuf_3_3_321_update_completed_ <-& (WPIPE_noblock_obuf_3_3_321_Update)
          WPIPE_noblock_obuf_3_3_321_sample_start_ o<-& (WPIPE_noblock_obuf_3_3_321_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_3_321_sample_start_
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_3_321_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 163
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 164
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_4
          $T[WPIPE_noblock_obuf_3_4_330_sample_start_] 
          $T[WPIPE_noblock_obuf_3_4_330_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_4_330_update_start_] 
          $T[WPIPE_noblock_obuf_3_4_330_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_4_330 with guard R_send_to_4_329
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_4_330_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_4_330_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_4_330_sample_start_ &-> (WPIPE_noblock_obuf_3_4_330_Sample)
          WPIPE_noblock_obuf_3_4_330_sample_completed_ <-& (WPIPE_noblock_obuf_3_4_330_Sample)
          WPIPE_noblock_obuf_3_4_330_update_start_ <-& (WPIPE_noblock_obuf_3_4_330_sample_completed_)
          WPIPE_noblock_obuf_3_4_330_update_start_ &-> (WPIPE_noblock_obuf_3_4_330_Update)
          WPIPE_noblock_obuf_3_4_330_update_completed_ <-& (WPIPE_noblock_obuf_3_4_330_Update)
          WPIPE_noblock_obuf_3_4_330_sample_start_ o<-& (WPIPE_noblock_obuf_3_4_330_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_4_330_sample_start_
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_4_330_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_3
          // read-dependencies for pipe in_data_3
          // write-dependencies for pipe in_data_3
          // signal write dependencies for in_data_3
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_248__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_248_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_248__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_248_loop_body : condition_evaluated
        $bind do_while_stmt_248__entry__  => do_while_stmt_248_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_248_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_248__exit__)
      }
      do_while_stmt_248__entry__ |-> (do_while_stmt_248)
      do_while_stmt_248__exit__ <-| (do_while_stmt_248)
      do_while_stmt_248__entry__ <-| (branch_block_stmt_247__entry__)
      do_while_stmt_248__exit__ |-> (branch_block_stmt_247__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 143
    // constant-object-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // constant-object-declarations for block %inputPort_3_Daemon
    //  file .Aa/switch2x2.opt.aa, line 134
    // constant-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 141
    // 1 
    $constant $W[konst_334_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 143
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_253_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    // 0 
    $constant $W[konst_260_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_265_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_279_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_282_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_293_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_299_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_308_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_317_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_326_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 141
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 143
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    $W[next_count_down_285_254_buffered] : $int<16>
    // count_down
    $W[count_down_250] : $int<16>
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // in_data_3
    $W[RPIPE_in_data_3_257_wire] : $int<32>
    // input_word
    $W[input_word_255] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    $W[next_last_dest_id_291_261_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_258] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 151
    // new_packet
    $W[new_packet_267] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 152
    // dest_id
    $W[dest_id_271] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 153
    // pkt_length
    $W[pkt_length_275] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 154
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_280_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_283_wire] : $int<16>
    // next_count_down
    $W[next_count_down_285] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 155
    // next_last_dest_id
    $W[next_last_dest_id_291] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 156
    // data_to_outport
    $W[data_to_outport_296] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 157
    // send_to_1
    $W[send_to_1_301] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 158
    // noblock_obuf_3_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 159
    // send_to_2
    $W[send_to_2_310] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 160
    // noblock_obuf_3_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 161
    // send_to_3
    $W[send_to_3_319] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 162
    // noblock_obuf_3_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 163
    // send_to_4
    $W[send_to_4_328] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 164
    // noblock_obuf_3_4
    // datapath-instances for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 141
    ==0? [do_while_stmt_248_branch] (konst_334_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 143
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    # := [next_count_down_285_254_buf] (next_count_down_285) (next_count_down_285_254_buffered)     $fullrate
    $buffering $out next_count_down_285_254_buf next_count_down_285_254_buffered  1
    # $phi [phi_stmt_250] (type_cast_253_wire_constant next_count_down_285_254_buffered) ( count_down_250 ) $fullrate
    // $buffering  $out phi_stmt_250 count_down_250 2
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // in_data_3
    $ioport $in [RPIPE_in_data_3_257_inst] (in_data_3) (RPIPE_in_data_3_257_wire)  $fullrate 
    $buffering $out RPIPE_in_data_3_257_inst RPIPE_in_data_3_257_wire 1
    # := [ssrc_phi_stmt_255] (RPIPE_in_data_3_257_wire) (input_word_255)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    # := [next_last_dest_id_291_261_buf] (next_last_dest_id_291) (next_last_dest_id_291_261_buffered)     $fullrate
    $buffering $out next_last_dest_id_291_261_buf next_last_dest_id_291_261_buffered  1
    # $phi [phi_stmt_258] (konst_260_wire_constant next_last_dest_id_291_261_buffered) ( last_dest_id_258 ) $fullrate
    // $buffering  $out phi_stmt_258 last_dest_id_258 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 151
    // (count_down == 0 )
    ==[EQ_u16_u1_266_inst] (count_down_250 konst_265_wire_constant) (new_packet_267)   $flowthrough 
    $delay EQ_u16_u1_266_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 152
    // ( $slice input_word 31 24 ) 
    [:] [slice_270_inst] (input_word_255 31 24) (dest_id_271)  $flowthrough
    $delay slice_270_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 153
    // ( $slice input_word 23 8 ) 
    [:] [slice_274_inst] (input_word_255 23 8) (pkt_length_275)  $flowthrough
    $delay slice_274_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 154
    // (pkt_length - 1 )
    -[SUB_u16_u16_280_inst] (pkt_length_275 konst_279_wire_constant) (SUB_u16_u16_280_wire)   $flowthrough 
    $delay SUB_u16_u16_280_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_283_inst] (count_down_250 konst_282_wire_constant) (SUB_u16_u16_283_wire)   $flowthrough 
    $delay SUB_u16_u16_283_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_284_inst] (new_packet_267 SUB_u16_u16_280_wire SUB_u16_u16_283_wire) (next_count_down_285)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 155
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_290_inst] (new_packet_267 dest_id_271 last_dest_id_258) (next_last_dest_id_291)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 156
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_295_inst] (R_ONE_1_293_wire_constant input_word_255) (data_to_outport_296)   $flowthrough 
    $delay CONCAT_u1_u33_295_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 157
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_300_inst] (next_last_dest_id_291 konst_299_wire_constant) (send_to_1_301)   $flowthrough 
    $delay EQ_u8_u1_300_inst 0
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 158
    // noblock_obuf_3_1
    $ioport $out [WPIPE_noblock_obuf_3_1_303_inst]  (data_to_outport_296) (noblock_obuf_3_1) $guard ( send_to_1_301 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 159
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_309_inst] (next_last_dest_id_291 konst_308_wire_constant) (send_to_2_310)   $flowthrough 
    $delay EQ_u8_u1_309_inst 0
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 160
    // noblock_obuf_3_2
    $ioport $out [WPIPE_noblock_obuf_3_2_312_inst]  (data_to_outport_296) (noblock_obuf_3_2) $guard ( send_to_2_310 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 161
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_318_inst] (next_last_dest_id_291 konst_317_wire_constant) (send_to_3_319)   $flowthrough 
    $delay EQ_u8_u1_318_inst 0
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 162
    // noblock_obuf_3_3
    $ioport $out [WPIPE_noblock_obuf_3_3_321_inst]  (data_to_outport_296) (noblock_obuf_3_3) $guard ( send_to_3_319 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 163
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_327_inst] (next_last_dest_id_291 konst_326_wire_constant) (send_to_4_328)   $flowthrough 
    $delay EQ_u8_u1_327_inst 0
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 164
    // noblock_obuf_3_4
    $ioport $out [WPIPE_noblock_obuf_3_4_330_inst]  (data_to_outport_296) (noblock_obuf_3_4) $guard ( send_to_4_328 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_248
  //  file .Aa/switch2x2.opt.aa, line 141
  phi_stmt_250 <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_entry_sample_req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_loopback_sample_req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_phi_mux_ack)
  next_count_down_285_254_buf <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Update/ack)
  // in_data_3
  RPIPE_in_data_3_257_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Sample/rr branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Update/cr) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Sample/ra branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Update/ca)
  phi_stmt_258 <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_entry_sample_req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_loopback_sample_req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_phi_mux_ack)
  next_last_dest_id_291_261_buf <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 151
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 152
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 153
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 154
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 155
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 156
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 157
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 158
  // data_to_outport
  // noblock_obuf_3_1
  WPIPE_noblock_obuf_3_1_303_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 159
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 160
  // data_to_outport
  // noblock_obuf_3_2
  WPIPE_noblock_obuf_3_2_312_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 161
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 162
  // data_to_outport
  // noblock_obuf_3_3
  WPIPE_noblock_obuf_3_3_321_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 163
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 164
  // data_to_outport
  // noblock_obuf_3_4
  WPIPE_noblock_obuf_3_4_330_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Update/ack)
  do_while_stmt_248_branch <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/condition_evaluated) (branch_block_stmt_247/do_while_stmt_248/loop_exit/ack branch_block_stmt_247/do_while_stmt_248/loop_taken/ack)
}
$module [inputPort_4_Daemon] 
{
  // pipe-declarations for block %inputPort_4_Daemon
  //  file .Aa/switch2x2.opt.aa, line 168
  // pipe-declarations for block %inputPort_4_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 173
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_338] // Branch Block  file .Aa/switch2x2.opt.aa, line 173
    {
      $P [branch_block_stmt_338__entry__]
      branch_block_stmt_338__entry__ <-| ($entry)
      $P [branch_block_stmt_338__exit__]
      branch_block_stmt_338__exit__ |-> ($exit)
      $P [do_while_stmt_339__entry__] 
      $P [do_while_stmt_339__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 175
      <o> [do_while_stmt_339]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_339__entry__] 
        $P[do_while_stmt_339__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_339_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_341
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_341_sample_start_] 
          $T[phi_stmt_341_sample_completed_] 
          $T[phi_stmt_341_update_start_] 
          $T[phi_stmt_341_update_completed_] 
          $T[phi_stmt_341_sample_start__ps] 
          phi_stmt_341_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_341_sample_completed__ps] 
          phi_stmt_341_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_341_update_start__ps] 
          phi_stmt_341_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_341_update_completed__ps] 
          phi_stmt_341_update_completed_ <-& (phi_stmt_341_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_341_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_341_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_341_update_start_)
          $T[phi_stmt_341_loopback_trigger] 
          phi_stmt_341_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_341_loopback_sample_req] 
          $T[phi_stmt_341_loopback_sample_req_ps] 
          phi_stmt_341_loopback_sample_req <-& (phi_stmt_341_loopback_sample_req_ps)
          phi_stmt_341_loopback_sample_req &-> ($null)
          $T[phi_stmt_341_entry_trigger] 
          phi_stmt_341_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_341_entry_sample_req] 
          $T[phi_stmt_341_entry_sample_req_ps] 
          phi_stmt_341_entry_sample_req <-& (phi_stmt_341_entry_sample_req_ps)
          phi_stmt_341_entry_sample_req &-> ($null)
          phi_stmt_341_update_start_ o<-& (phi_stmt_341_update_completed_ 0)
          phi_stmt_341_sample_start_ o<-& (phi_stmt_341_sample_completed_ 1)
          $T[phi_stmt_341_merged_reqs] 
          $T[phi_stmt_341_phi_mux_ack] 
          $T[phi_stmt_341_phi_mux_ack_ps] 
          phi_stmt_341_phi_mux_ack_ps <-& (phi_stmt_341_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_341_update_completed_)
          $T[type_cast_344_sample_start__ps] 
          $T[type_cast_344_sample_completed__ps] 
          $T[type_cast_344_update_start__ps] 
          $T[type_cast_344_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_344_sample_start_] 
          $T[type_cast_344_sample_completed_] 
          type_cast_344_sample_completed_ <-& (type_cast_344_sample_start_)
          $T[type_cast_344_update_start_] 
          $T [type_cast_344_update_completed_] $delay 
          type_cast_344_update_completed_ <-& (type_cast_344_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_344_sample_start_ <-& (type_cast_344_sample_start__ps)
          type_cast_344_update_start_ <-& (type_cast_344_update_start__ps)
          // Phi complete dependency.
          type_cast_344_sample_completed__ps <-& (type_cast_344_sample_completed_)
          type_cast_344_update_completed__ps <-& (type_cast_344_update_completed_)
          $T[R_next_count_down_345_sample_start__ps] 
          $T[R_next_count_down_345_sample_completed__ps] 
          $T[R_next_count_down_345_update_start__ps] 
          $T[R_next_count_down_345_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_345_sample_start_] 
          $T[R_next_count_down_345_sample_completed_] 
          $T[R_next_count_down_345_update_start_] 
          $T[R_next_count_down_345_update_completed_] 
          ;;[R_next_count_down_345_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_345_sample_start_ &-> (R_next_count_down_345_Sample)
          R_next_count_down_345_sample_completed_ <-& (R_next_count_down_345_Sample)
          ;;[R_next_count_down_345_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_345_update_start_ &-> (R_next_count_down_345_Update)
          R_next_count_down_345_update_completed_ <-& (R_next_count_down_345_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_345_sample_start_ <-& (R_next_count_down_345_sample_start__ps)
          R_next_count_down_345_update_start_ <-& (R_next_count_down_345_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_345_sample_completed__ps <-& (R_next_count_down_345_sample_completed_)
          R_next_count_down_345_update_completed__ps <-& (R_next_count_down_345_update_completed_)
          $phisequencer [ phi_stmt_341_phi_seq] : 
          phi_stmt_341_entry_trigger type_cast_344_sample_start__ps type_cast_344_sample_completed__ps type_cast_344_update_start__ps type_cast_344_update_completed__ps phi_stmt_341_loopback_trigger R_next_count_down_345_sample_start__ps R_next_count_down_345_sample_completed__ps R_next_count_down_345_update_start__ps R_next_count_down_345_update_completed__ps :
          phi_stmt_341_sample_start__ps phi_stmt_341_sample_completed__ps phi_stmt_341_update_start__ps phi_stmt_341_update_completed__ps :
          phi_stmt_341_entry_sample_req_ps phi_stmt_341_loopback_sample_req_ps : 
          phi_stmt_341_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_341
          // start:  single source PHI statement phi_stmt_346
          // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_346_sample_start_] 
          $T[phi_stmt_346_sample_completed_] 
          $T[phi_stmt_346_update_start_] 
          $T[phi_stmt_346_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_346_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_346_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_346_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_4
          $T[RPIPE_in_data_4_348_sample_start_] 
          $T[RPIPE_in_data_4_348_sample_completed_] 
          $T[RPIPE_in_data_4_348_update_start_] 
          $T[RPIPE_in_data_4_348_update_completed_] 
          ;;[RPIPE_in_data_4_348_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_4_348_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_4_348_sample_start_ &-> (RPIPE_in_data_4_348_Sample)
          RPIPE_in_data_4_348_sample_completed_ <-& (RPIPE_in_data_4_348_Sample)
          RPIPE_in_data_4_348_update_start_ <-& (RPIPE_in_data_4_348_sample_completed_)
          RPIPE_in_data_4_348_update_start_ &-> (RPIPE_in_data_4_348_Update)
          RPIPE_in_data_4_348_update_completed_ <-& (RPIPE_in_data_4_348_Update)
          RPIPE_in_data_4_348_sample_start_ o<-& (RPIPE_in_data_4_348_update_completed_ 0)
          // RAW reenables for in_data_4
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_4_348_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_4_348_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_4_348_update_start_)
          phi_stmt_346_update_completed_ <-& (RPIPE_in_data_4_348_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_346_update_completed_)
          // done: PHI Statement phi_stmt_346
          // start:  PHI statement phi_stmt_349
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_349_sample_start_] 
          $T[phi_stmt_349_sample_completed_] 
          $T[phi_stmt_349_update_start_] 
          $T[phi_stmt_349_update_completed_] 
          $T[phi_stmt_349_sample_start__ps] 
          phi_stmt_349_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_349_sample_completed__ps] 
          phi_stmt_349_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_349_update_start__ps] 
          phi_stmt_349_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_349_update_completed__ps] 
          phi_stmt_349_update_completed_ <-& (phi_stmt_349_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_349_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_349_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_349_update_start_)
          $T[phi_stmt_349_loopback_trigger] 
          phi_stmt_349_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_349_loopback_sample_req] 
          $T[phi_stmt_349_loopback_sample_req_ps] 
          phi_stmt_349_loopback_sample_req <-& (phi_stmt_349_loopback_sample_req_ps)
          phi_stmt_349_loopback_sample_req &-> ($null)
          $T[phi_stmt_349_entry_trigger] 
          phi_stmt_349_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_349_entry_sample_req] 
          $T[phi_stmt_349_entry_sample_req_ps] 
          phi_stmt_349_entry_sample_req <-& (phi_stmt_349_entry_sample_req_ps)
          phi_stmt_349_entry_sample_req &-> ($null)
          phi_stmt_349_update_start_ o<-& (phi_stmt_349_update_completed_ 0)
          phi_stmt_349_sample_start_ o<-& (phi_stmt_349_sample_completed_ 1)
          $T[phi_stmt_349_merged_reqs] 
          $T[phi_stmt_349_phi_mux_ack] 
          $T[phi_stmt_349_phi_mux_ack_ps] 
          phi_stmt_349_phi_mux_ack_ps <-& (phi_stmt_349_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_349_update_completed_)
          $T[konst_351_sample_start__ps] 
          $T[konst_351_sample_completed__ps] 
          $T[konst_351_update_start__ps] 
          $T[konst_351_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_351_sample_start_] 
          $T[konst_351_sample_completed_] 
          konst_351_sample_completed_ <-& (konst_351_sample_start_)
          $T[konst_351_update_start_] 
          $T [konst_351_update_completed_] $delay 
          konst_351_update_completed_ <-& (konst_351_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_351_sample_start_ <-& (konst_351_sample_start__ps)
          konst_351_update_start_ <-& (konst_351_update_start__ps)
          // Phi complete dependency.
          konst_351_sample_completed__ps <-& (konst_351_sample_completed_)
          konst_351_update_completed__ps <-& (konst_351_update_completed_)
          $T[R_next_last_dest_id_352_sample_start__ps] 
          $T[R_next_last_dest_id_352_sample_completed__ps] 
          $T[R_next_last_dest_id_352_update_start__ps] 
          $T[R_next_last_dest_id_352_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_352_sample_start_] 
          $T[R_next_last_dest_id_352_sample_completed_] 
          $T[R_next_last_dest_id_352_update_start_] 
          $T[R_next_last_dest_id_352_update_completed_] 
          ;;[R_next_last_dest_id_352_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_352_sample_start_ &-> (R_next_last_dest_id_352_Sample)
          R_next_last_dest_id_352_sample_completed_ <-& (R_next_last_dest_id_352_Sample)
          ;;[R_next_last_dest_id_352_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_352_update_start_ &-> (R_next_last_dest_id_352_Update)
          R_next_last_dest_id_352_update_completed_ <-& (R_next_last_dest_id_352_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_352_sample_start_ <-& (R_next_last_dest_id_352_sample_start__ps)
          R_next_last_dest_id_352_update_start_ <-& (R_next_last_dest_id_352_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_352_sample_completed__ps <-& (R_next_last_dest_id_352_sample_completed_)
          R_next_last_dest_id_352_update_completed__ps <-& (R_next_last_dest_id_352_update_completed_)
          $phisequencer [ phi_stmt_349_phi_seq] : 
          phi_stmt_349_entry_trigger konst_351_sample_start__ps konst_351_sample_completed__ps konst_351_update_start__ps konst_351_update_completed__ps phi_stmt_349_loopback_trigger R_next_last_dest_id_352_sample_start__ps R_next_last_dest_id_352_sample_completed__ps R_next_last_dest_id_352_update_start__ps R_next_last_dest_id_352_update_completed__ps :
          phi_stmt_349_sample_start__ps phi_stmt_349_sample_completed__ps phi_stmt_349_update_start__ps phi_stmt_349_update_completed__ps :
          phi_stmt_349_entry_sample_req_ps phi_stmt_349_loopback_sample_req_ps : 
          phi_stmt_349_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_349
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 185
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 186
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 187
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 188
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 189
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 190
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 191
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 192
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_1
          $T[WPIPE_noblock_obuf_4_1_394_sample_start_] 
          $T[WPIPE_noblock_obuf_4_1_394_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_1_394_update_start_] 
          $T[WPIPE_noblock_obuf_4_1_394_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_1_394 with guard R_send_to_1_393
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_1_394_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_1_394_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_1_394_sample_start_ &-> (WPIPE_noblock_obuf_4_1_394_Sample)
          WPIPE_noblock_obuf_4_1_394_sample_completed_ <-& (WPIPE_noblock_obuf_4_1_394_Sample)
          WPIPE_noblock_obuf_4_1_394_update_start_ <-& (WPIPE_noblock_obuf_4_1_394_sample_completed_)
          WPIPE_noblock_obuf_4_1_394_update_start_ &-> (WPIPE_noblock_obuf_4_1_394_Update)
          WPIPE_noblock_obuf_4_1_394_update_completed_ <-& (WPIPE_noblock_obuf_4_1_394_Update)
          WPIPE_noblock_obuf_4_1_394_sample_start_ o<-& (WPIPE_noblock_obuf_4_1_394_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_1_394_sample_start_
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_1_394_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 193
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 194
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_2
          $T[WPIPE_noblock_obuf_4_2_403_sample_start_] 
          $T[WPIPE_noblock_obuf_4_2_403_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_2_403_update_start_] 
          $T[WPIPE_noblock_obuf_4_2_403_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_2_403 with guard R_send_to_2_402
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_2_403_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_2_403_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_2_403_sample_start_ &-> (WPIPE_noblock_obuf_4_2_403_Sample)
          WPIPE_noblock_obuf_4_2_403_sample_completed_ <-& (WPIPE_noblock_obuf_4_2_403_Sample)
          WPIPE_noblock_obuf_4_2_403_update_start_ <-& (WPIPE_noblock_obuf_4_2_403_sample_completed_)
          WPIPE_noblock_obuf_4_2_403_update_start_ &-> (WPIPE_noblock_obuf_4_2_403_Update)
          WPIPE_noblock_obuf_4_2_403_update_completed_ <-& (WPIPE_noblock_obuf_4_2_403_Update)
          WPIPE_noblock_obuf_4_2_403_sample_start_ o<-& (WPIPE_noblock_obuf_4_2_403_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_2_403_sample_start_
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_2_403_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 195
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 196
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_3
          $T[WPIPE_noblock_obuf_4_3_412_sample_start_] 
          $T[WPIPE_noblock_obuf_4_3_412_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_3_412_update_start_] 
          $T[WPIPE_noblock_obuf_4_3_412_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_3_412 with guard R_send_to_3_411
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_3_412_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_3_412_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_3_412_sample_start_ &-> (WPIPE_noblock_obuf_4_3_412_Sample)
          WPIPE_noblock_obuf_4_3_412_sample_completed_ <-& (WPIPE_noblock_obuf_4_3_412_Sample)
          WPIPE_noblock_obuf_4_3_412_update_start_ <-& (WPIPE_noblock_obuf_4_3_412_sample_completed_)
          WPIPE_noblock_obuf_4_3_412_update_start_ &-> (WPIPE_noblock_obuf_4_3_412_Update)
          WPIPE_noblock_obuf_4_3_412_update_completed_ <-& (WPIPE_noblock_obuf_4_3_412_Update)
          WPIPE_noblock_obuf_4_3_412_sample_start_ o<-& (WPIPE_noblock_obuf_4_3_412_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_3_412_sample_start_
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_3_412_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 197
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 198
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_4
          $T[WPIPE_noblock_obuf_4_4_421_sample_start_] 
          $T[WPIPE_noblock_obuf_4_4_421_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_4_421_update_start_] 
          $T[WPIPE_noblock_obuf_4_4_421_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_4_421 with guard R_send_to_4_420
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_4_421_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_4_421_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_4_421_sample_start_ &-> (WPIPE_noblock_obuf_4_4_421_Sample)
          WPIPE_noblock_obuf_4_4_421_sample_completed_ <-& (WPIPE_noblock_obuf_4_4_421_Sample)
          WPIPE_noblock_obuf_4_4_421_update_start_ <-& (WPIPE_noblock_obuf_4_4_421_sample_completed_)
          WPIPE_noblock_obuf_4_4_421_update_start_ &-> (WPIPE_noblock_obuf_4_4_421_Update)
          WPIPE_noblock_obuf_4_4_421_update_completed_ <-& (WPIPE_noblock_obuf_4_4_421_Update)
          WPIPE_noblock_obuf_4_4_421_sample_start_ o<-& (WPIPE_noblock_obuf_4_4_421_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_4_421_sample_start_
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_4_421_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_4
          // read-dependencies for pipe in_data_4
          // write-dependencies for pipe in_data_4
          // signal write dependencies for in_data_4
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_339__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_339_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_339__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_339_loop_body : condition_evaluated
        $bind do_while_stmt_339__entry__  => do_while_stmt_339_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_339_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_339__exit__)
      }
      do_while_stmt_339__entry__ |-> (do_while_stmt_339)
      do_while_stmt_339__exit__ <-| (do_while_stmt_339)
      do_while_stmt_339__entry__ <-| (branch_block_stmt_338__entry__)
      do_while_stmt_339__exit__ |-> (branch_block_stmt_338__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 177
    // constant-object-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // constant-object-declarations for block %inputPort_4_Daemon
    //  file .Aa/switch2x2.opt.aa, line 168
    // constant-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 175
    // 1 
    $constant $W[konst_425_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 177
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_344_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    // 0 
    $constant $W[konst_351_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_356_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_370_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_373_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_384_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_390_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_399_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_408_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_417_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 175
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 177
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    $W[next_count_down_376_345_buffered] : $int<16>
    // count_down
    $W[count_down_341] : $int<16>
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // in_data_4
    $W[RPIPE_in_data_4_348_wire] : $int<32>
    // input_word
    $W[input_word_346] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    $W[next_last_dest_id_382_352_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_349] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 185
    // new_packet
    $W[new_packet_358] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 186
    // dest_id
    $W[dest_id_362] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 187
    // pkt_length
    $W[pkt_length_366] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 188
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_371_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_374_wire] : $int<16>
    // next_count_down
    $W[next_count_down_376] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 189
    // next_last_dest_id
    $W[next_last_dest_id_382] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 190
    // data_to_outport
    $W[data_to_outport_387] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 191
    // send_to_1
    $W[send_to_1_392] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 192
    // noblock_obuf_4_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 193
    // send_to_2
    $W[send_to_2_401] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 194
    // noblock_obuf_4_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 195
    // send_to_3
    $W[send_to_3_410] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 196
    // noblock_obuf_4_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 197
    // send_to_4
    $W[send_to_4_419] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 198
    // noblock_obuf_4_4
    // datapath-instances for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 175
    ==0? [do_while_stmt_339_branch] (konst_425_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 177
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    # := [next_count_down_376_345_buf] (next_count_down_376) (next_count_down_376_345_buffered)     $fullrate
    $buffering $out next_count_down_376_345_buf next_count_down_376_345_buffered  1
    # $phi [phi_stmt_341] (type_cast_344_wire_constant next_count_down_376_345_buffered) ( count_down_341 ) $fullrate
    // $buffering  $out phi_stmt_341 count_down_341 2
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // in_data_4
    $ioport $in [RPIPE_in_data_4_348_inst] (in_data_4) (RPIPE_in_data_4_348_wire)  $fullrate 
    $buffering $out RPIPE_in_data_4_348_inst RPIPE_in_data_4_348_wire 1
    # := [ssrc_phi_stmt_346] (RPIPE_in_data_4_348_wire) (input_word_346)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    # := [next_last_dest_id_382_352_buf] (next_last_dest_id_382) (next_last_dest_id_382_352_buffered)     $fullrate
    $buffering $out next_last_dest_id_382_352_buf next_last_dest_id_382_352_buffered  1
    # $phi [phi_stmt_349] (konst_351_wire_constant next_last_dest_id_382_352_buffered) ( last_dest_id_349 ) $fullrate
    // $buffering  $out phi_stmt_349 last_dest_id_349 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 185
    // (count_down == 0 )
    ==[EQ_u16_u1_357_inst] (count_down_341 konst_356_wire_constant) (new_packet_358)   $flowthrough 
    $delay EQ_u16_u1_357_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 186
    // ( $slice input_word 31 24 ) 
    [:] [slice_361_inst] (input_word_346 31 24) (dest_id_362)  $flowthrough
    $delay slice_361_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 187
    // ( $slice input_word 23 8 ) 
    [:] [slice_365_inst] (input_word_346 23 8) (pkt_length_366)  $flowthrough
    $delay slice_365_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 188
    // (pkt_length - 1 )
    -[SUB_u16_u16_371_inst] (pkt_length_366 konst_370_wire_constant) (SUB_u16_u16_371_wire)   $flowthrough 
    $delay SUB_u16_u16_371_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_374_inst] (count_down_341 konst_373_wire_constant) (SUB_u16_u16_374_wire)   $flowthrough 
    $delay SUB_u16_u16_374_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_375_inst] (new_packet_358 SUB_u16_u16_371_wire SUB_u16_u16_374_wire) (next_count_down_376)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 189
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_381_inst] (new_packet_358 dest_id_362 last_dest_id_349) (next_last_dest_id_382)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 190
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_386_inst] (R_ONE_1_384_wire_constant input_word_346) (data_to_outport_387)   $flowthrough 
    $delay CONCAT_u1_u33_386_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 191
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_391_inst] (next_last_dest_id_382 konst_390_wire_constant) (send_to_1_392)   $flowthrough 
    $delay EQ_u8_u1_391_inst 0
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 192
    // noblock_obuf_4_1
    $ioport $out [WPIPE_noblock_obuf_4_1_394_inst]  (data_to_outport_387) (noblock_obuf_4_1) $guard ( send_to_1_392 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 193
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_400_inst] (next_last_dest_id_382 konst_399_wire_constant) (send_to_2_401)   $flowthrough 
    $delay EQ_u8_u1_400_inst 0
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 194
    // noblock_obuf_4_2
    $ioport $out [WPIPE_noblock_obuf_4_2_403_inst]  (data_to_outport_387) (noblock_obuf_4_2) $guard ( send_to_2_401 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 195
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_409_inst] (next_last_dest_id_382 konst_408_wire_constant) (send_to_3_410)   $flowthrough 
    $delay EQ_u8_u1_409_inst 0
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 196
    // noblock_obuf_4_3
    $ioport $out [WPIPE_noblock_obuf_4_3_412_inst]  (data_to_outport_387) (noblock_obuf_4_3) $guard ( send_to_3_410 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 197
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_418_inst] (next_last_dest_id_382 konst_417_wire_constant) (send_to_4_419)   $flowthrough 
    $delay EQ_u8_u1_418_inst 0
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 198
    // noblock_obuf_4_4
    $ioport $out [WPIPE_noblock_obuf_4_4_421_inst]  (data_to_outport_387) (noblock_obuf_4_4) $guard ( send_to_4_419 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_339
  //  file .Aa/switch2x2.opt.aa, line 175
  phi_stmt_341 <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_entry_sample_req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_loopback_sample_req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_phi_mux_ack)
  next_count_down_376_345_buf <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Update/ack)
  // in_data_4
  RPIPE_in_data_4_348_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Sample/rr branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Update/cr) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Sample/ra branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Update/ca)
  phi_stmt_349 <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_entry_sample_req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_loopback_sample_req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_phi_mux_ack)
  next_last_dest_id_382_352_buf <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 185
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 186
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 187
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 188
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 189
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 190
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 191
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 192
  // data_to_outport
  // noblock_obuf_4_1
  WPIPE_noblock_obuf_4_1_394_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 193
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 194
  // data_to_outport
  // noblock_obuf_4_2
  WPIPE_noblock_obuf_4_2_403_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 195
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 196
  // data_to_outport
  // noblock_obuf_4_3
  WPIPE_noblock_obuf_4_3_412_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 197
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 198
  // data_to_outport
  // noblock_obuf_4_4
  WPIPE_noblock_obuf_4_4_421_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Update/ack)
  do_while_stmt_339_branch <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/condition_evaluated) (branch_block_stmt_338/do_while_stmt_339/loop_exit/ack branch_block_stmt_338/do_while_stmt_339/loop_taken/ack)
}
$volatile $module [prioritySelect] 
{
  $in down_counter:$int<8>
  // can point into 
  active_packet:$int<3>
  // can point into 
  pkt_priority:$int<3>
  // can point into 
  p1_valid:$int<1>
  // can point into 
  p2_valid:$int<1>
  // can point into 
  p3_valid:$int<1>
  // can point into 
  p4_valid:$int<1>
  // can point into 
  $out next_active_packet:$int<3>
  // can point into 
  next_pkt_priority:$int<3>
  // can point into 
  // pipe-declarations for block %prioritySelect
  //  file .Aa/switch2x2.opt.aa, line 202
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %prioritySelect
    //  file .Aa/switch2x2.opt.aa, line 202
    // 0 
    $constant $W[konst_440_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_448_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_466_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_484_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_502_wire_constant] : $int<3> := _b100// 4
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    // _b0 
    $constant $W[konst_519_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_1 1   _b0  ) 
    // 1 
    $constant $W[konst_522_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_523_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_2 2   _b0  ) 
    // 2 
    $constant $W[konst_527_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_528_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_3 3   _b0  ) 
    // 3 
    $constant $W[konst_532_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_533_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_4 4   _b0  ) 
    // 4 
    $constant $W[konst_536_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_537_wire_constant] : $int<3> := _b000// 0
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    // _b0 
    $constant $W[konst_552_wire_constant] : $int<3> := _b000// 0
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    // _b0 
    $constant $W[konst_561_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_1 2   _b0  ) 
    // 2 
    $constant $W[konst_564_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_565_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_2 3   _b0  ) 
    // 3 
    $constant $W[konst_569_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_570_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_3 4   _b0  ) 
    // 4 
    $constant $W[konst_574_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_575_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_4 1   _b0  ) 
    // 1 
    $constant $W[konst_578_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_579_wire_constant] : $int<3> := _b000// 0
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 207
    // d0
    $W[d0_442] : $int<1>
    // 	select_1 := ((d0 & p1_valid) & ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 208
    // (d0 & p1_valid)
    $intermediate $W[AND_u1_u1_446_wire] : $int<1>
    // (pkt_priority == 1 )
    $intermediate $W[EQ_u3_u1_449_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_451_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_453_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_454_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_456_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_457_wire] : $int<1>
    // ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_458_wire] : $int<1>
    // select_1
    $W[select_1_460] : $int<1>
    // 	select_2 := ((d0 & p2_valid) & ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid )))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 209
    // (d0 & p2_valid)
    $intermediate $W[AND_u1_u1_464_wire] : $int<1>
    // (pkt_priority == 2 )
    $intermediate $W[EQ_u3_u1_467_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_469_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_471_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_472_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_474_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_475_wire] : $int<1>
    // ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_476_wire] : $int<1>
    // select_2
    $W[select_2_478] : $int<1>
    // 	select_3 := ((d0 & p3_valid) & ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid )))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 210
    // (d0 & p3_valid)
    $intermediate $W[AND_u1_u1_482_wire] : $int<1>
    // (pkt_priority == 3 )
    $intermediate $W[EQ_u3_u1_485_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_487_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_489_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_490_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_492_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_493_wire] : $int<1>
    // ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid )))
    $intermediate $W[OR_u1_u1_494_wire] : $int<1>
    // select_3
    $W[select_3_496] : $int<1>
    // 	select_4 := ((d0 & p4_valid) & ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 211
    // (d0 & p4_valid)
    $intermediate $W[AND_u1_u1_500_wire] : $int<1>
    // (pkt_priority == 4 )
    $intermediate $W[EQ_u3_u1_503_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_505_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_507_wire] : $int<1>
    // (( ~ p1_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_508_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_510_wire] : $int<1>
    // ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_511_wire] : $int<1>
    // ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_512_wire] : $int<1>
    // select_4
    $W[select_4_514] : $int<1>
    // 	next_active_packet := (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 212
    // ( ~ d0 )
    $intermediate $W[NOT_u1_u1_517_wire] : $int<1>
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    $intermediate $W[MUX_520_wire] : $int<3>
    // ( $mux select_1 1   _b0  ) 
    $intermediate $W[MUX_524_wire] : $int<3>
    // (( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) )
    $intermediate $W[OR_u3_u3_525_wire] : $int<3>
    // ( $mux select_2 2   _b0  ) 
    $intermediate $W[MUX_529_wire] : $int<3>
    // ((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) )
    $intermediate $W[OR_u3_u3_530_wire] : $int<3>
    // ( $mux select_3 3   _b0  ) 
    $intermediate $W[MUX_534_wire] : $int<3>
    // ( $mux select_4 4   _b0  ) 
    $intermediate $W[MUX_538_wire] : $int<3>
    // (( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) )
    $intermediate $W[OR_u3_u3_539_wire] : $int<3>
    // ( ~ select_1 )
    $intermediate $W[NOT_u1_u1_541_wire] : $int<1>
    // ( ~ select_2 )
    $intermediate $W[NOT_u1_u1_543_wire] : $int<1>
    // (( ~ select_1 ) & ( ~ select_2 ))
    $intermediate $W[AND_u1_u1_544_wire] : $int<1>
    // ( ~ select_3 )
    $intermediate $W[NOT_u1_u1_546_wire] : $int<1>
    // ( ~ select_4 )
    $intermediate $W[NOT_u1_u1_548_wire] : $int<1>
    // (( ~ select_3 ) & ( ~ select_4 ))
    $intermediate $W[AND_u1_u1_549_wire] : $int<1>
    // ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 )))
    $intermediate $W[AND_u1_u1_550_wire] : $int<1>
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    $intermediate $W[MUX_553_wire] : $int<3>
    // ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )
    $intermediate $W[OR_u3_u3_554_wire] : $int<3>
    // next_active_packet
    // 	next_pkt_priority := (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) ) | (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 213
    // ( ~ d0 )
    $intermediate $W[NOT_u1_u1_559_wire] : $int<1>
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    $intermediate $W[MUX_562_wire] : $int<3>
    // ( $mux select_1 2   _b0  ) 
    $intermediate $W[MUX_566_wire] : $int<3>
    // (( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 2   _b0  ) )
    $intermediate $W[OR_u3_u3_567_wire] : $int<3>
    // ( $mux select_2 3   _b0  ) 
    $intermediate $W[MUX_571_wire] : $int<3>
    // ((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) )
    $intermediate $W[OR_u3_u3_572_wire] : $int<3>
    // ( $mux select_3 4   _b0  ) 
    $intermediate $W[MUX_576_wire] : $int<3>
    // ( $mux select_4 1   _b0  ) 
    $intermediate $W[MUX_580_wire] : $int<3>
    // (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) )
    $intermediate $W[OR_u3_u3_581_wire] : $int<3>
    // next_pkt_priority
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 207
    // (down_counter == 0 )
    ==[EQ_u8_u1_441_inst] (down_counter konst_440_wire_constant) (d0_442)   
    $buffering  $out EQ_u8_u1_441_inst d0_442 1
    $delay EQ_u8_u1_441_inst 1
    // 	select_1 := ((d0 & p1_valid) & ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 208
    // (d0 & p1_valid)
    &[AND_u1_u1_446_inst] (d0_442 p1_valid) (AND_u1_u1_446_wire)   $flowthrough 
    $delay AND_u1_u1_446_inst 0
    // (pkt_priority == 1 )
    ==[EQ_u3_u1_449_inst] (pkt_priority konst_448_wire_constant) (EQ_u3_u1_449_wire)   $flowthrough 
    $delay EQ_u3_u1_449_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_451_inst] (p4_valid) (NOT_u1_u1_451_wire)   $flowthrough
    $delay NOT_u1_u1_451_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_453_inst] (p2_valid) (NOT_u1_u1_453_wire)   $flowthrough
    $delay NOT_u1_u1_453_inst 0
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_454_inst] (NOT_u1_u1_451_wire NOT_u1_u1_453_wire) (AND_u1_u1_454_wire)   $flowthrough 
    $delay AND_u1_u1_454_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_456_inst] (p3_valid) (NOT_u1_u1_456_wire)   $flowthrough
    $delay NOT_u1_u1_456_inst 0
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_457_inst] (AND_u1_u1_454_wire NOT_u1_u1_456_wire) (AND_u1_u1_457_wire)   $flowthrough 
    $delay AND_u1_u1_457_inst 0
    // ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_458_inst] (EQ_u3_u1_449_wire AND_u1_u1_457_wire) (OR_u1_u1_458_wire)   $flowthrough 
    $delay OR_u1_u1_458_inst 0
    // ((d0 & p1_valid) & ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))))
    &[AND_u1_u1_459_inst] (AND_u1_u1_446_wire OR_u1_u1_458_wire) (select_1_460)   
    $buffering  $out AND_u1_u1_459_inst select_1_460 1
    $delay AND_u1_u1_459_inst 1
    // 	select_2 := ((d0 & p2_valid) & ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid )))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 209
    // (d0 & p2_valid)
    &[AND_u1_u1_464_inst] (d0_442 p2_valid) (AND_u1_u1_464_wire)   $flowthrough 
    $delay AND_u1_u1_464_inst 0
    // (pkt_priority == 2 )
    ==[EQ_u3_u1_467_inst] (pkt_priority konst_466_wire_constant) (EQ_u3_u1_467_wire)   $flowthrough 
    $delay EQ_u3_u1_467_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_469_inst] (p4_valid) (NOT_u1_u1_469_wire)   $flowthrough
    $delay NOT_u1_u1_469_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_471_inst] (p1_valid) (NOT_u1_u1_471_wire)   $flowthrough
    $delay NOT_u1_u1_471_inst 0
    // (( ~ p4_valid ) & ( ~ p1_valid ))
    &[AND_u1_u1_472_inst] (NOT_u1_u1_469_wire NOT_u1_u1_471_wire) (AND_u1_u1_472_wire)   $flowthrough 
    $delay AND_u1_u1_472_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_474_inst] (p3_valid) (NOT_u1_u1_474_wire)   $flowthrough
    $delay NOT_u1_u1_474_inst 0
    // ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_475_inst] (AND_u1_u1_472_wire NOT_u1_u1_474_wire) (AND_u1_u1_475_wire)   $flowthrough 
    $delay AND_u1_u1_475_inst 0
    // ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_476_inst] (EQ_u3_u1_467_wire AND_u1_u1_475_wire) (OR_u1_u1_476_wire)   $flowthrough 
    $delay OR_u1_u1_476_inst 0
    // ((d0 & p2_valid) & ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))))
    &[AND_u1_u1_477_inst] (AND_u1_u1_464_wire OR_u1_u1_476_wire) (select_2_478)   
    $buffering  $out AND_u1_u1_477_inst select_2_478 1
    $delay AND_u1_u1_477_inst 1
    // 	select_3 := ((d0 & p3_valid) & ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid )))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 210
    // (d0 & p3_valid)
    &[AND_u1_u1_482_inst] (d0_442 p3_valid) (AND_u1_u1_482_wire)   $flowthrough 
    $delay AND_u1_u1_482_inst 0
    // (pkt_priority == 3 )
    ==[EQ_u3_u1_485_inst] (pkt_priority konst_484_wire_constant) (EQ_u3_u1_485_wire)   $flowthrough 
    $delay EQ_u3_u1_485_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_487_inst] (p4_valid) (NOT_u1_u1_487_wire)   $flowthrough
    $delay NOT_u1_u1_487_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_489_inst] (p2_valid) (NOT_u1_u1_489_wire)   $flowthrough
    $delay NOT_u1_u1_489_inst 0
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_490_inst] (NOT_u1_u1_487_wire NOT_u1_u1_489_wire) (AND_u1_u1_490_wire)   $flowthrough 
    $delay AND_u1_u1_490_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_492_inst] (p1_valid) (NOT_u1_u1_492_wire)   $flowthrough
    $delay NOT_u1_u1_492_inst 0
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))
    &[AND_u1_u1_493_inst] (AND_u1_u1_490_wire NOT_u1_u1_492_wire) (AND_u1_u1_493_wire)   $flowthrough 
    $delay AND_u1_u1_493_inst 0
    // ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid )))
    |[OR_u1_u1_494_inst] (EQ_u3_u1_485_wire AND_u1_u1_493_wire) (OR_u1_u1_494_wire)   $flowthrough 
    $delay OR_u1_u1_494_inst 0
    // ((d0 & p3_valid) & ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))))
    &[AND_u1_u1_495_inst] (AND_u1_u1_482_wire OR_u1_u1_494_wire) (select_3_496)   
    $buffering  $out AND_u1_u1_495_inst select_3_496 1
    $delay AND_u1_u1_495_inst 1
    // 	select_4 := ((d0 & p4_valid) & ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 211
    // (d0 & p4_valid)
    &[AND_u1_u1_500_inst] (d0_442 p4_valid) (AND_u1_u1_500_wire)   $flowthrough 
    $delay AND_u1_u1_500_inst 0
    // (pkt_priority == 4 )
    ==[EQ_u3_u1_503_inst] (pkt_priority konst_502_wire_constant) (EQ_u3_u1_503_wire)   $flowthrough 
    $delay EQ_u3_u1_503_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_505_inst] (p1_valid) (NOT_u1_u1_505_wire)   $flowthrough
    $delay NOT_u1_u1_505_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_507_inst] (p2_valid) (NOT_u1_u1_507_wire)   $flowthrough
    $delay NOT_u1_u1_507_inst 0
    // (( ~ p1_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_508_inst] (NOT_u1_u1_505_wire NOT_u1_u1_507_wire) (AND_u1_u1_508_wire)   $flowthrough 
    $delay AND_u1_u1_508_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_510_inst] (p3_valid) (NOT_u1_u1_510_wire)   $flowthrough
    $delay NOT_u1_u1_510_inst 0
    // ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_511_inst] (AND_u1_u1_508_wire NOT_u1_u1_510_wire) (AND_u1_u1_511_wire)   $flowthrough 
    $delay AND_u1_u1_511_inst 0
    // ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_512_inst] (EQ_u3_u1_503_wire AND_u1_u1_511_wire) (OR_u1_u1_512_wire)   $flowthrough 
    $delay OR_u1_u1_512_inst 0
    // ((d0 & p4_valid) & ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))))
    &[AND_u1_u1_513_inst] (AND_u1_u1_500_wire OR_u1_u1_512_wire) (select_4_514)   
    $buffering  $out AND_u1_u1_513_inst select_4_514 1
    $delay AND_u1_u1_513_inst 1
    // 	next_active_packet := (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 212
    // ( ~ d0 )
    ~ [NOT_u1_u1_517_inst] (d0_442) (NOT_u1_u1_517_wire)   $flowthrough
    $delay NOT_u1_u1_517_inst 0
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    ? [MUX_520_inst] (NOT_u1_u1_517_wire active_packet konst_519_wire_constant) (MUX_520_wire)  $flowthrough
    // ( $mux select_1 1   _b0  ) 
    ? [MUX_524_inst] (select_1_460 konst_522_wire_constant konst_523_wire_constant) (MUX_524_wire)  $flowthrough
    // (( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) )
    |[OR_u3_u3_525_inst] (MUX_520_wire MUX_524_wire) (OR_u3_u3_525_wire)   $flowthrough 
    $delay OR_u3_u3_525_inst 0
    // ( $mux select_2 2   _b0  ) 
    ? [MUX_529_inst] (select_2_478 konst_527_wire_constant konst_528_wire_constant) (MUX_529_wire)  $flowthrough
    // ((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) )
    |[OR_u3_u3_530_inst] (OR_u3_u3_525_wire MUX_529_wire) (OR_u3_u3_530_wire)   $flowthrough 
    $delay OR_u3_u3_530_inst 0
    // ( $mux select_3 3   _b0  ) 
    ? [MUX_534_inst] (select_3_496 konst_532_wire_constant konst_533_wire_constant) (MUX_534_wire)  $flowthrough
    // ( $mux select_4 4   _b0  ) 
    ? [MUX_538_inst] (select_4_514 konst_536_wire_constant konst_537_wire_constant) (MUX_538_wire)  $flowthrough
    // (( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) )
    |[OR_u3_u3_539_inst] (MUX_534_wire MUX_538_wire) (OR_u3_u3_539_wire)   $flowthrough 
    $delay OR_u3_u3_539_inst 0
    // ( ~ select_1 )
    ~ [NOT_u1_u1_541_inst] (select_1_460) (NOT_u1_u1_541_wire)   $flowthrough
    $delay NOT_u1_u1_541_inst 0
    // ( ~ select_2 )
    ~ [NOT_u1_u1_543_inst] (select_2_478) (NOT_u1_u1_543_wire)   $flowthrough
    $delay NOT_u1_u1_543_inst 0
    // (( ~ select_1 ) & ( ~ select_2 ))
    &[AND_u1_u1_544_inst] (NOT_u1_u1_541_wire NOT_u1_u1_543_wire) (AND_u1_u1_544_wire)   $flowthrough 
    $delay AND_u1_u1_544_inst 0
    // ( ~ select_3 )
    ~ [NOT_u1_u1_546_inst] (select_3_496) (NOT_u1_u1_546_wire)   $flowthrough
    $delay NOT_u1_u1_546_inst 0
    // ( ~ select_4 )
    ~ [NOT_u1_u1_548_inst] (select_4_514) (NOT_u1_u1_548_wire)   $flowthrough
    $delay NOT_u1_u1_548_inst 0
    // (( ~ select_3 ) & ( ~ select_4 ))
    &[AND_u1_u1_549_inst] (NOT_u1_u1_546_wire NOT_u1_u1_548_wire) (AND_u1_u1_549_wire)   $flowthrough 
    $delay AND_u1_u1_549_inst 0
    // ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 )))
    &[AND_u1_u1_550_inst] (AND_u1_u1_544_wire AND_u1_u1_549_wire) (AND_u1_u1_550_wire)   $flowthrough 
    $delay AND_u1_u1_550_inst 0
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    ? [MUX_553_inst] (AND_u1_u1_550_wire active_packet konst_552_wire_constant) (MUX_553_wire)  $flowthrough
    // ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )
    |[OR_u3_u3_554_inst] (OR_u3_u3_539_wire MUX_553_wire) (OR_u3_u3_554_wire)   $flowthrough 
    $delay OR_u3_u3_554_inst 0
    // (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) ))
    |[OR_u3_u3_555_inst] (OR_u3_u3_530_wire OR_u3_u3_554_wire) (next_active_packet)   
    $buffering  $out OR_u3_u3_555_inst next_active_packet 1
    $delay OR_u3_u3_555_inst 1
    // 	next_pkt_priority := (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) ) | (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 213
    // ( ~ d0 )
    ~ [NOT_u1_u1_559_inst] (d0_442) (NOT_u1_u1_559_wire)   $flowthrough
    $delay NOT_u1_u1_559_inst 0
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    ? [MUX_562_inst] (NOT_u1_u1_559_wire active_packet konst_561_wire_constant) (MUX_562_wire)  $flowthrough
    // ( $mux select_1 2   _b0  ) 
    ? [MUX_566_inst] (select_1_460 konst_564_wire_constant konst_565_wire_constant) (MUX_566_wire)  $flowthrough
    // (( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 2   _b0  ) )
    |[OR_u3_u3_567_inst] (MUX_562_wire MUX_566_wire) (OR_u3_u3_567_wire)   $flowthrough 
    $delay OR_u3_u3_567_inst 0
    // ( $mux select_2 3   _b0  ) 
    ? [MUX_571_inst] (select_2_478 konst_569_wire_constant konst_570_wire_constant) (MUX_571_wire)  $flowthrough
    // ((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) )
    |[OR_u3_u3_572_inst] (OR_u3_u3_567_wire MUX_571_wire) (OR_u3_u3_572_wire)   $flowthrough 
    $delay OR_u3_u3_572_inst 0
    // ( $mux select_3 4   _b0  ) 
    ? [MUX_576_inst] (select_3_496 konst_574_wire_constant konst_575_wire_constant) (MUX_576_wire)  $flowthrough
    // ( $mux select_4 1   _b0  ) 
    ? [MUX_580_inst] (select_4_514 konst_578_wire_constant konst_579_wire_constant) (MUX_580_wire)  $flowthrough
    // (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) )
    |[OR_u3_u3_581_inst] (MUX_576_wire MUX_580_wire) (OR_u3_u3_581_wire)   $flowthrough 
    $delay OR_u3_u3_581_inst 0
    // (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) ) | (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) ))
    |[OR_u3_u3_582_inst] (OR_u3_u3_572_wire OR_u3_u3_581_wire) (next_pkt_priority)   
    $buffering  $out OR_u3_u3_582_inst next_pkt_priority 1
    $delay OR_u3_u3_582_inst 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [outputPort_1_Daemon] 
{
  // pipe-declarations for block %outputPort_1_Daemon
  //  file .Aa/switch2x2.opt.aa, line 215
  // pipe-declarations for block %outputPort_1_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 220
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_586] // Branch Block  file .Aa/switch2x2.opt.aa, line 220
    {
      $P [branch_block_stmt_586__entry__]
      branch_block_stmt_586__entry__ <-| ($entry)
      $P [branch_block_stmt_586__exit__]
      branch_block_stmt_586__exit__ |-> ($exit)
      $P [do_while_stmt_587__entry__] 
      $P [do_while_stmt_587__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 222
      <o> [do_while_stmt_587]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_587__entry__] 
        $P[do_while_stmt_587__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_587_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_589
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_589_sample_start_] 
          $T[phi_stmt_589_sample_completed_] 
          $T[phi_stmt_589_update_start_] 
          $T[phi_stmt_589_update_completed_] 
          $T[phi_stmt_589_sample_start__ps] 
          phi_stmt_589_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_589_sample_completed__ps] 
          phi_stmt_589_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_589_update_start__ps] 
          phi_stmt_589_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_589_update_completed__ps] 
          phi_stmt_589_update_completed_ <-& (phi_stmt_589_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_589_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_589_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_589_update_start_)
          $T[phi_stmt_589_loopback_trigger] 
          phi_stmt_589_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_589_loopback_sample_req] 
          $T[phi_stmt_589_loopback_sample_req_ps] 
          phi_stmt_589_loopback_sample_req <-& (phi_stmt_589_loopback_sample_req_ps)
          phi_stmt_589_loopback_sample_req &-> ($null)
          $T[phi_stmt_589_entry_trigger] 
          phi_stmt_589_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_589_entry_sample_req] 
          $T[phi_stmt_589_entry_sample_req_ps] 
          phi_stmt_589_entry_sample_req <-& (phi_stmt_589_entry_sample_req_ps)
          phi_stmt_589_entry_sample_req &-> ($null)
          phi_stmt_589_update_start_ o<-& (phi_stmt_589_update_completed_ 0)
          phi_stmt_589_sample_start_ o<-& (phi_stmt_589_sample_completed_ 1)
          $T[phi_stmt_589_merged_reqs] 
          $T[phi_stmt_589_phi_mux_ack] 
          $T[phi_stmt_589_phi_mux_ack_ps] 
          phi_stmt_589_phi_mux_ack_ps <-& (phi_stmt_589_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_589_update_completed_)
          $T[R_ZERO_8_591_sample_start__ps] 
          $T[R_ZERO_8_591_sample_completed__ps] 
          $T[R_ZERO_8_591_update_start__ps] 
          $T[R_ZERO_8_591_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_591_sample_start_] 
          $T[R_ZERO_8_591_sample_completed_] 
          R_ZERO_8_591_sample_completed_ <-& (R_ZERO_8_591_sample_start_)
          $T[R_ZERO_8_591_update_start_] 
          $T [R_ZERO_8_591_update_completed_] $delay 
          R_ZERO_8_591_update_completed_ <-& (R_ZERO_8_591_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_591_sample_start_ <-& (R_ZERO_8_591_sample_start__ps)
          R_ZERO_8_591_update_start_ <-& (R_ZERO_8_591_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_591_sample_completed__ps <-& (R_ZERO_8_591_sample_completed_)
          R_ZERO_8_591_update_completed__ps <-& (R_ZERO_8_591_update_completed_)
          $T[R_next_down_counter_592_sample_start__ps] 
          $T[R_next_down_counter_592_sample_completed__ps] 
          $T[R_next_down_counter_592_update_start__ps] 
          $T[R_next_down_counter_592_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_592_sample_start_] 
          $T[R_next_down_counter_592_sample_completed_] 
          $T[R_next_down_counter_592_update_start_] 
          $T[R_next_down_counter_592_update_completed_] 
          ;;[R_next_down_counter_592_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_592_sample_start_ &-> (R_next_down_counter_592_Sample)
          R_next_down_counter_592_sample_completed_ <-& (R_next_down_counter_592_Sample)
          ;;[R_next_down_counter_592_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_592_update_start_ &-> (R_next_down_counter_592_Update)
          R_next_down_counter_592_update_completed_ <-& (R_next_down_counter_592_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_592_sample_start_ <-& (R_next_down_counter_592_sample_start__ps)
          R_next_down_counter_592_update_start_ <-& (R_next_down_counter_592_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_592_sample_completed__ps <-& (R_next_down_counter_592_sample_completed_)
          R_next_down_counter_592_update_completed__ps <-& (R_next_down_counter_592_update_completed_)
          $phisequencer [ phi_stmt_589_phi_seq] : 
          phi_stmt_589_entry_trigger R_ZERO_8_591_sample_start__ps R_ZERO_8_591_sample_completed__ps R_ZERO_8_591_update_start__ps R_ZERO_8_591_update_completed__ps phi_stmt_589_loopback_trigger R_next_down_counter_592_sample_start__ps R_next_down_counter_592_sample_completed__ps R_next_down_counter_592_update_start__ps R_next_down_counter_592_update_completed__ps :
          phi_stmt_589_sample_start__ps phi_stmt_589_sample_completed__ps phi_stmt_589_update_start__ps phi_stmt_589_update_completed__ps :
          phi_stmt_589_entry_sample_req_ps phi_stmt_589_loopback_sample_req_ps : 
          phi_stmt_589_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_589
          // start:  PHI statement phi_stmt_593
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_593_sample_start_] 
          $T[phi_stmt_593_sample_completed_] 
          $T[phi_stmt_593_update_start_] 
          $T[phi_stmt_593_update_completed_] 
          $T[phi_stmt_593_sample_start__ps] 
          phi_stmt_593_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_593_sample_completed__ps] 
          phi_stmt_593_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_593_update_start__ps] 
          phi_stmt_593_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_593_update_completed__ps] 
          phi_stmt_593_update_completed_ <-& (phi_stmt_593_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_593_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_593_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_593_update_start_)
          $T[phi_stmt_593_loopback_trigger] 
          phi_stmt_593_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_593_loopback_sample_req] 
          $T[phi_stmt_593_loopback_sample_req_ps] 
          phi_stmt_593_loopback_sample_req <-& (phi_stmt_593_loopback_sample_req_ps)
          phi_stmt_593_loopback_sample_req &-> ($null)
          $T[phi_stmt_593_entry_trigger] 
          phi_stmt_593_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_593_entry_sample_req] 
          $T[phi_stmt_593_entry_sample_req_ps] 
          phi_stmt_593_entry_sample_req <-& (phi_stmt_593_entry_sample_req_ps)
          phi_stmt_593_entry_sample_req &-> ($null)
          phi_stmt_593_update_start_ o<-& (phi_stmt_593_update_completed_ 0)
          phi_stmt_593_sample_start_ o<-& (phi_stmt_593_sample_completed_ 1)
          $T[phi_stmt_593_merged_reqs] 
          $T[phi_stmt_593_phi_mux_ack] 
          $T[phi_stmt_593_phi_mux_ack_ps] 
          phi_stmt_593_phi_mux_ack_ps <-& (phi_stmt_593_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_593_update_completed_)
          $T[R_ZERO_33_595_sample_start__ps] 
          $T[R_ZERO_33_595_sample_completed__ps] 
          $T[R_ZERO_33_595_update_start__ps] 
          $T[R_ZERO_33_595_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_595_sample_start_] 
          $T[R_ZERO_33_595_sample_completed_] 
          R_ZERO_33_595_sample_completed_ <-& (R_ZERO_33_595_sample_start_)
          $T[R_ZERO_33_595_update_start_] 
          $T [R_ZERO_33_595_update_completed_] $delay 
          R_ZERO_33_595_update_completed_ <-& (R_ZERO_33_595_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_595_sample_start_ <-& (R_ZERO_33_595_sample_start__ps)
          R_ZERO_33_595_update_start_ <-& (R_ZERO_33_595_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_595_sample_completed__ps <-& (R_ZERO_33_595_sample_completed_)
          R_ZERO_33_595_update_completed__ps <-& (R_ZERO_33_595_update_completed_)
          $T[RPIPE_noblock_obuf_1_1_597_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_597_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_1_597_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_597_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_1
          $T[RPIPE_noblock_obuf_1_1_597_sample_start_] 
          $T[RPIPE_noblock_obuf_1_1_597_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_1_597_update_start_] 
          $T[RPIPE_noblock_obuf_1_1_597_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_1_597 with guard R_read_from_1_596
          // root phi_stmt_593 not in visited_elements
          // root phi_stmt_598 not in visited_elements
          // root phi_stmt_603 not in visited_elements
          // root phi_stmt_608 not in visited_elements
          // root phi_stmt_613 not in visited_elements
          // root phi_stmt_617 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_1_597_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_1_597_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_1_597_sample_start_ &-> (RPIPE_noblock_obuf_1_1_597_Sample)
          RPIPE_noblock_obuf_1_1_597_sample_completed_ <-& (RPIPE_noblock_obuf_1_1_597_Sample)
          RPIPE_noblock_obuf_1_1_597_update_start_ <-& (RPIPE_noblock_obuf_1_1_597_sample_completed_)
          RPIPE_noblock_obuf_1_1_597_update_start_ &-> (RPIPE_noblock_obuf_1_1_597_Update)
          RPIPE_noblock_obuf_1_1_597_update_completed_ <-& (RPIPE_noblock_obuf_1_1_597_Update)
          RPIPE_noblock_obuf_1_1_597_sample_start_ o<-& (RPIPE_noblock_obuf_1_1_597_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_1_597_sample_start_ <-& (RPIPE_noblock_obuf_1_1_597_sample_start__ps)
          RPIPE_noblock_obuf_1_1_597_update_start_ <-& (RPIPE_noblock_obuf_1_1_597_update_start__ps)
          // RAW reenables for noblock_obuf_1_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_1_597_sample_completed__ps <-& (RPIPE_noblock_obuf_1_1_597_sample_completed_)
          RPIPE_noblock_obuf_1_1_597_update_completed__ps <-& (RPIPE_noblock_obuf_1_1_597_update_completed_)
          $phisequencer [ phi_stmt_593_phi_seq] : 
          phi_stmt_593_entry_trigger R_ZERO_33_595_sample_start__ps R_ZERO_33_595_sample_completed__ps R_ZERO_33_595_update_start__ps R_ZERO_33_595_update_completed__ps phi_stmt_593_loopback_trigger RPIPE_noblock_obuf_1_1_597_sample_start__ps RPIPE_noblock_obuf_1_1_597_sample_completed__ps RPIPE_noblock_obuf_1_1_597_update_start__ps RPIPE_noblock_obuf_1_1_597_update_completed__ps :
          phi_stmt_593_sample_start__ps phi_stmt_593_sample_completed__ps phi_stmt_593_update_start__ps phi_stmt_593_update_completed__ps :
          phi_stmt_593_entry_sample_req_ps phi_stmt_593_loopback_sample_req_ps : 
          phi_stmt_593_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_593
          // start:  PHI statement phi_stmt_598
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_598_sample_start_] 
          $T[phi_stmt_598_sample_completed_] 
          $T[phi_stmt_598_update_start_] 
          $T[phi_stmt_598_update_completed_] 
          $T[phi_stmt_598_sample_start__ps] 
          phi_stmt_598_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_598_sample_completed__ps] 
          phi_stmt_598_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_598_update_start__ps] 
          phi_stmt_598_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_598_update_completed__ps] 
          phi_stmt_598_update_completed_ <-& (phi_stmt_598_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_598_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_598_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_598_update_start_)
          $T[phi_stmt_598_loopback_trigger] 
          phi_stmt_598_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_598_loopback_sample_req] 
          $T[phi_stmt_598_loopback_sample_req_ps] 
          phi_stmt_598_loopback_sample_req <-& (phi_stmt_598_loopback_sample_req_ps)
          phi_stmt_598_loopback_sample_req &-> ($null)
          $T[phi_stmt_598_entry_trigger] 
          phi_stmt_598_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_598_entry_sample_req] 
          $T[phi_stmt_598_entry_sample_req_ps] 
          phi_stmt_598_entry_sample_req <-& (phi_stmt_598_entry_sample_req_ps)
          phi_stmt_598_entry_sample_req &-> ($null)
          phi_stmt_598_update_start_ o<-& (phi_stmt_598_update_completed_ 0)
          phi_stmt_598_sample_start_ o<-& (phi_stmt_598_sample_completed_ 1)
          $T[phi_stmt_598_merged_reqs] 
          $T[phi_stmt_598_phi_mux_ack] 
          $T[phi_stmt_598_phi_mux_ack_ps] 
          phi_stmt_598_phi_mux_ack_ps <-& (phi_stmt_598_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_598_update_completed_)
          $T[R_ZERO_33_600_sample_start__ps] 
          $T[R_ZERO_33_600_sample_completed__ps] 
          $T[R_ZERO_33_600_update_start__ps] 
          $T[R_ZERO_33_600_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_600_sample_start_] 
          $T[R_ZERO_33_600_sample_completed_] 
          R_ZERO_33_600_sample_completed_ <-& (R_ZERO_33_600_sample_start_)
          $T[R_ZERO_33_600_update_start_] 
          $T [R_ZERO_33_600_update_completed_] $delay 
          R_ZERO_33_600_update_completed_ <-& (R_ZERO_33_600_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_600_sample_start_ <-& (R_ZERO_33_600_sample_start__ps)
          R_ZERO_33_600_update_start_ <-& (R_ZERO_33_600_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_600_sample_completed__ps <-& (R_ZERO_33_600_sample_completed_)
          R_ZERO_33_600_update_completed__ps <-& (R_ZERO_33_600_update_completed_)
          $T[RPIPE_noblock_obuf_2_1_602_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_602_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_1_602_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_602_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_1
          $T[RPIPE_noblock_obuf_2_1_602_sample_start_] 
          $T[RPIPE_noblock_obuf_2_1_602_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_1_602_update_start_] 
          $T[RPIPE_noblock_obuf_2_1_602_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_1_602 with guard R_read_from_2_601
          // root phi_stmt_598 not in visited_elements
          // root phi_stmt_603 not in visited_elements
          // root phi_stmt_608 not in visited_elements
          // root phi_stmt_613 not in visited_elements
          // root phi_stmt_617 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_1_602_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_1_602_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_1_602_sample_start_ &-> (RPIPE_noblock_obuf_2_1_602_Sample)
          RPIPE_noblock_obuf_2_1_602_sample_completed_ <-& (RPIPE_noblock_obuf_2_1_602_Sample)
          RPIPE_noblock_obuf_2_1_602_update_start_ <-& (RPIPE_noblock_obuf_2_1_602_sample_completed_)
          RPIPE_noblock_obuf_2_1_602_update_start_ &-> (RPIPE_noblock_obuf_2_1_602_Update)
          RPIPE_noblock_obuf_2_1_602_update_completed_ <-& (RPIPE_noblock_obuf_2_1_602_Update)
          RPIPE_noblock_obuf_2_1_602_sample_start_ o<-& (RPIPE_noblock_obuf_2_1_602_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_1_602_sample_start_ <-& (RPIPE_noblock_obuf_2_1_602_sample_start__ps)
          RPIPE_noblock_obuf_2_1_602_update_start_ <-& (RPIPE_noblock_obuf_2_1_602_update_start__ps)
          // RAW reenables for noblock_obuf_2_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_1_602_sample_completed__ps <-& (RPIPE_noblock_obuf_2_1_602_sample_completed_)
          RPIPE_noblock_obuf_2_1_602_update_completed__ps <-& (RPIPE_noblock_obuf_2_1_602_update_completed_)
          $phisequencer [ phi_stmt_598_phi_seq] : 
          phi_stmt_598_entry_trigger R_ZERO_33_600_sample_start__ps R_ZERO_33_600_sample_completed__ps R_ZERO_33_600_update_start__ps R_ZERO_33_600_update_completed__ps phi_stmt_598_loopback_trigger RPIPE_noblock_obuf_2_1_602_sample_start__ps RPIPE_noblock_obuf_2_1_602_sample_completed__ps RPIPE_noblock_obuf_2_1_602_update_start__ps RPIPE_noblock_obuf_2_1_602_update_completed__ps :
          phi_stmt_598_sample_start__ps phi_stmt_598_sample_completed__ps phi_stmt_598_update_start__ps phi_stmt_598_update_completed__ps :
          phi_stmt_598_entry_sample_req_ps phi_stmt_598_loopback_sample_req_ps : 
          phi_stmt_598_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_598
          // start:  PHI statement phi_stmt_603
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_603_sample_start_] 
          $T[phi_stmt_603_sample_completed_] 
          $T[phi_stmt_603_update_start_] 
          $T[phi_stmt_603_update_completed_] 
          $T[phi_stmt_603_sample_start__ps] 
          phi_stmt_603_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_603_sample_completed__ps] 
          phi_stmt_603_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_603_update_start__ps] 
          phi_stmt_603_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_603_update_completed__ps] 
          phi_stmt_603_update_completed_ <-& (phi_stmt_603_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_603_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_603_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_603_update_start_)
          $T[phi_stmt_603_loopback_trigger] 
          phi_stmt_603_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_603_loopback_sample_req] 
          $T[phi_stmt_603_loopback_sample_req_ps] 
          phi_stmt_603_loopback_sample_req <-& (phi_stmt_603_loopback_sample_req_ps)
          phi_stmt_603_loopback_sample_req &-> ($null)
          $T[phi_stmt_603_entry_trigger] 
          phi_stmt_603_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_603_entry_sample_req] 
          $T[phi_stmt_603_entry_sample_req_ps] 
          phi_stmt_603_entry_sample_req <-& (phi_stmt_603_entry_sample_req_ps)
          phi_stmt_603_entry_sample_req &-> ($null)
          phi_stmt_603_update_start_ o<-& (phi_stmt_603_update_completed_ 0)
          phi_stmt_603_sample_start_ o<-& (phi_stmt_603_sample_completed_ 1)
          $T[phi_stmt_603_merged_reqs] 
          $T[phi_stmt_603_phi_mux_ack] 
          $T[phi_stmt_603_phi_mux_ack_ps] 
          phi_stmt_603_phi_mux_ack_ps <-& (phi_stmt_603_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_603_update_completed_)
          $T[R_ZERO_33_605_sample_start__ps] 
          $T[R_ZERO_33_605_sample_completed__ps] 
          $T[R_ZERO_33_605_update_start__ps] 
          $T[R_ZERO_33_605_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_605_sample_start_] 
          $T[R_ZERO_33_605_sample_completed_] 
          R_ZERO_33_605_sample_completed_ <-& (R_ZERO_33_605_sample_start_)
          $T[R_ZERO_33_605_update_start_] 
          $T [R_ZERO_33_605_update_completed_] $delay 
          R_ZERO_33_605_update_completed_ <-& (R_ZERO_33_605_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_605_sample_start_ <-& (R_ZERO_33_605_sample_start__ps)
          R_ZERO_33_605_update_start_ <-& (R_ZERO_33_605_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_605_sample_completed__ps <-& (R_ZERO_33_605_sample_completed_)
          R_ZERO_33_605_update_completed__ps <-& (R_ZERO_33_605_update_completed_)
          $T[RPIPE_noblock_obuf_3_1_607_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_607_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_1_607_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_607_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_1
          $T[RPIPE_noblock_obuf_3_1_607_sample_start_] 
          $T[RPIPE_noblock_obuf_3_1_607_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_1_607_update_start_] 
          $T[RPIPE_noblock_obuf_3_1_607_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_1_607 with guard R_read_from_3_606
          // root phi_stmt_603 not in visited_elements
          // root phi_stmt_608 not in visited_elements
          // root phi_stmt_613 not in visited_elements
          // root phi_stmt_617 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_1_607_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_1_607_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_1_607_sample_start_ &-> (RPIPE_noblock_obuf_3_1_607_Sample)
          RPIPE_noblock_obuf_3_1_607_sample_completed_ <-& (RPIPE_noblock_obuf_3_1_607_Sample)
          RPIPE_noblock_obuf_3_1_607_update_start_ <-& (RPIPE_noblock_obuf_3_1_607_sample_completed_)
          RPIPE_noblock_obuf_3_1_607_update_start_ &-> (RPIPE_noblock_obuf_3_1_607_Update)
          RPIPE_noblock_obuf_3_1_607_update_completed_ <-& (RPIPE_noblock_obuf_3_1_607_Update)
          RPIPE_noblock_obuf_3_1_607_sample_start_ o<-& (RPIPE_noblock_obuf_3_1_607_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_1_607_sample_start_ <-& (RPIPE_noblock_obuf_3_1_607_sample_start__ps)
          RPIPE_noblock_obuf_3_1_607_update_start_ <-& (RPIPE_noblock_obuf_3_1_607_update_start__ps)
          // RAW reenables for noblock_obuf_3_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_1_607_sample_completed__ps <-& (RPIPE_noblock_obuf_3_1_607_sample_completed_)
          RPIPE_noblock_obuf_3_1_607_update_completed__ps <-& (RPIPE_noblock_obuf_3_1_607_update_completed_)
          $phisequencer [ phi_stmt_603_phi_seq] : 
          phi_stmt_603_entry_trigger R_ZERO_33_605_sample_start__ps R_ZERO_33_605_sample_completed__ps R_ZERO_33_605_update_start__ps R_ZERO_33_605_update_completed__ps phi_stmt_603_loopback_trigger RPIPE_noblock_obuf_3_1_607_sample_start__ps RPIPE_noblock_obuf_3_1_607_sample_completed__ps RPIPE_noblock_obuf_3_1_607_update_start__ps RPIPE_noblock_obuf_3_1_607_update_completed__ps :
          phi_stmt_603_sample_start__ps phi_stmt_603_sample_completed__ps phi_stmt_603_update_start__ps phi_stmt_603_update_completed__ps :
          phi_stmt_603_entry_sample_req_ps phi_stmt_603_loopback_sample_req_ps : 
          phi_stmt_603_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_603
          // start:  PHI statement phi_stmt_608
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_608_sample_start_] 
          $T[phi_stmt_608_sample_completed_] 
          $T[phi_stmt_608_update_start_] 
          $T[phi_stmt_608_update_completed_] 
          $T[phi_stmt_608_sample_start__ps] 
          phi_stmt_608_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_608_sample_completed__ps] 
          phi_stmt_608_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_608_update_start__ps] 
          phi_stmt_608_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_608_update_completed__ps] 
          phi_stmt_608_update_completed_ <-& (phi_stmt_608_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_608_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_608_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_608_update_start_)
          $T[phi_stmt_608_loopback_trigger] 
          phi_stmt_608_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_608_loopback_sample_req] 
          $T[phi_stmt_608_loopback_sample_req_ps] 
          phi_stmt_608_loopback_sample_req <-& (phi_stmt_608_loopback_sample_req_ps)
          phi_stmt_608_loopback_sample_req &-> ($null)
          $T[phi_stmt_608_entry_trigger] 
          phi_stmt_608_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_608_entry_sample_req] 
          $T[phi_stmt_608_entry_sample_req_ps] 
          phi_stmt_608_entry_sample_req <-& (phi_stmt_608_entry_sample_req_ps)
          phi_stmt_608_entry_sample_req &-> ($null)
          phi_stmt_608_update_start_ o<-& (phi_stmt_608_update_completed_ 0)
          phi_stmt_608_sample_start_ o<-& (phi_stmt_608_sample_completed_ 1)
          $T[phi_stmt_608_merged_reqs] 
          $T[phi_stmt_608_phi_mux_ack] 
          $T[phi_stmt_608_phi_mux_ack_ps] 
          phi_stmt_608_phi_mux_ack_ps <-& (phi_stmt_608_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_608_update_completed_)
          $T[R_ZERO_33_610_sample_start__ps] 
          $T[R_ZERO_33_610_sample_completed__ps] 
          $T[R_ZERO_33_610_update_start__ps] 
          $T[R_ZERO_33_610_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_610_sample_start_] 
          $T[R_ZERO_33_610_sample_completed_] 
          R_ZERO_33_610_sample_completed_ <-& (R_ZERO_33_610_sample_start_)
          $T[R_ZERO_33_610_update_start_] 
          $T [R_ZERO_33_610_update_completed_] $delay 
          R_ZERO_33_610_update_completed_ <-& (R_ZERO_33_610_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_610_sample_start_ <-& (R_ZERO_33_610_sample_start__ps)
          R_ZERO_33_610_update_start_ <-& (R_ZERO_33_610_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_610_sample_completed__ps <-& (R_ZERO_33_610_sample_completed_)
          R_ZERO_33_610_update_completed__ps <-& (R_ZERO_33_610_update_completed_)
          $T[RPIPE_noblock_obuf_4_1_612_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_612_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_1_612_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_612_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_1
          $T[RPIPE_noblock_obuf_4_1_612_sample_start_] 
          $T[RPIPE_noblock_obuf_4_1_612_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_1_612_update_start_] 
          $T[RPIPE_noblock_obuf_4_1_612_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_1_612 with guard R_read_from_4_611
          // root phi_stmt_608 not in visited_elements
          // root phi_stmt_613 not in visited_elements
          // root phi_stmt_617 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_1_612_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_1_612_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_1_612_sample_start_ &-> (RPIPE_noblock_obuf_4_1_612_Sample)
          RPIPE_noblock_obuf_4_1_612_sample_completed_ <-& (RPIPE_noblock_obuf_4_1_612_Sample)
          RPIPE_noblock_obuf_4_1_612_update_start_ <-& (RPIPE_noblock_obuf_4_1_612_sample_completed_)
          RPIPE_noblock_obuf_4_1_612_update_start_ &-> (RPIPE_noblock_obuf_4_1_612_Update)
          RPIPE_noblock_obuf_4_1_612_update_completed_ <-& (RPIPE_noblock_obuf_4_1_612_Update)
          RPIPE_noblock_obuf_4_1_612_sample_start_ o<-& (RPIPE_noblock_obuf_4_1_612_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_1_612_sample_start_ <-& (RPIPE_noblock_obuf_4_1_612_sample_start__ps)
          RPIPE_noblock_obuf_4_1_612_update_start_ <-& (RPIPE_noblock_obuf_4_1_612_update_start__ps)
          // RAW reenables for noblock_obuf_4_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_1_612_sample_completed__ps <-& (RPIPE_noblock_obuf_4_1_612_sample_completed_)
          RPIPE_noblock_obuf_4_1_612_update_completed__ps <-& (RPIPE_noblock_obuf_4_1_612_update_completed_)
          $phisequencer [ phi_stmt_608_phi_seq] : 
          phi_stmt_608_entry_trigger R_ZERO_33_610_sample_start__ps R_ZERO_33_610_sample_completed__ps R_ZERO_33_610_update_start__ps R_ZERO_33_610_update_completed__ps phi_stmt_608_loopback_trigger RPIPE_noblock_obuf_4_1_612_sample_start__ps RPIPE_noblock_obuf_4_1_612_sample_completed__ps RPIPE_noblock_obuf_4_1_612_update_start__ps RPIPE_noblock_obuf_4_1_612_update_completed__ps :
          phi_stmt_608_sample_start__ps phi_stmt_608_sample_completed__ps phi_stmt_608_update_start__ps phi_stmt_608_update_completed__ps :
          phi_stmt_608_entry_sample_req_ps phi_stmt_608_loopback_sample_req_ps : 
          phi_stmt_608_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_608
          // start:  PHI statement phi_stmt_613
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_613_sample_start_] 
          $T[phi_stmt_613_sample_completed_] 
          $T[phi_stmt_613_update_start_] 
          $T[phi_stmt_613_update_completed_] 
          $T[phi_stmt_613_sample_start__ps] 
          phi_stmt_613_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_613_sample_completed__ps] 
          phi_stmt_613_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_613_update_start__ps] 
          phi_stmt_613_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_613_update_completed__ps] 
          phi_stmt_613_update_completed_ <-& (phi_stmt_613_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_613_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_613_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_613_update_start_)
          $T[phi_stmt_613_loopback_trigger] 
          phi_stmt_613_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_613_loopback_sample_req] 
          $T[phi_stmt_613_loopback_sample_req_ps] 
          phi_stmt_613_loopback_sample_req <-& (phi_stmt_613_loopback_sample_req_ps)
          phi_stmt_613_loopback_sample_req &-> ($null)
          $T[phi_stmt_613_entry_trigger] 
          phi_stmt_613_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_613_entry_sample_req] 
          $T[phi_stmt_613_entry_sample_req_ps] 
          phi_stmt_613_entry_sample_req <-& (phi_stmt_613_entry_sample_req_ps)
          phi_stmt_613_entry_sample_req &-> ($null)
          phi_stmt_613_update_start_ o<-& (phi_stmt_613_update_completed_ 0)
          phi_stmt_613_sample_start_ o<-& (phi_stmt_613_sample_completed_ 1)
          $T[phi_stmt_613_merged_reqs] 
          $T[phi_stmt_613_phi_mux_ack] 
          $T[phi_stmt_613_phi_mux_ack_ps] 
          phi_stmt_613_phi_mux_ack_ps <-& (phi_stmt_613_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_613_update_completed_)
          $T[R_ZERO_3_615_sample_start__ps] 
          $T[R_ZERO_3_615_sample_completed__ps] 
          $T[R_ZERO_3_615_update_start__ps] 
          $T[R_ZERO_3_615_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_615_sample_start_] 
          $T[R_ZERO_3_615_sample_completed_] 
          R_ZERO_3_615_sample_completed_ <-& (R_ZERO_3_615_sample_start_)
          $T[R_ZERO_3_615_update_start_] 
          $T [R_ZERO_3_615_update_completed_] $delay 
          R_ZERO_3_615_update_completed_ <-& (R_ZERO_3_615_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_615_sample_start_ <-& (R_ZERO_3_615_sample_start__ps)
          R_ZERO_3_615_update_start_ <-& (R_ZERO_3_615_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_615_sample_completed__ps <-& (R_ZERO_3_615_sample_completed_)
          R_ZERO_3_615_update_completed__ps <-& (R_ZERO_3_615_update_completed_)
          $T[R_next_active_packet_616_sample_start__ps] 
          $T[R_next_active_packet_616_sample_completed__ps] 
          $T[R_next_active_packet_616_update_start__ps] 
          $T[R_next_active_packet_616_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_616_sample_start_] 
          $T[R_next_active_packet_616_sample_completed_] 
          $T[R_next_active_packet_616_update_start_] 
          $T[R_next_active_packet_616_update_completed_] 
          ;;[R_next_active_packet_616_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_616_sample_start_ &-> (R_next_active_packet_616_Sample)
          R_next_active_packet_616_sample_completed_ <-& (R_next_active_packet_616_Sample)
          ;;[R_next_active_packet_616_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_616_update_start_ &-> (R_next_active_packet_616_Update)
          R_next_active_packet_616_update_completed_ <-& (R_next_active_packet_616_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_616_sample_start_ <-& (R_next_active_packet_616_sample_start__ps)
          R_next_active_packet_616_update_start_ <-& (R_next_active_packet_616_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_616_sample_completed__ps <-& (R_next_active_packet_616_sample_completed_)
          R_next_active_packet_616_update_completed__ps <-& (R_next_active_packet_616_update_completed_)
          $phisequencer [ phi_stmt_613_phi_seq] : 
          phi_stmt_613_entry_trigger R_ZERO_3_615_sample_start__ps R_ZERO_3_615_sample_completed__ps R_ZERO_3_615_update_start__ps R_ZERO_3_615_update_completed__ps phi_stmt_613_loopback_trigger R_next_active_packet_616_sample_start__ps R_next_active_packet_616_sample_completed__ps R_next_active_packet_616_update_start__ps R_next_active_packet_616_update_completed__ps :
          phi_stmt_613_sample_start__ps phi_stmt_613_sample_completed__ps phi_stmt_613_update_start__ps phi_stmt_613_update_completed__ps :
          phi_stmt_613_entry_sample_req_ps phi_stmt_613_loopback_sample_req_ps : 
          phi_stmt_613_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_613
          // start:  PHI statement phi_stmt_617
          // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_617_sample_start_] 
          $T[phi_stmt_617_sample_completed_] 
          $T[phi_stmt_617_update_start_] 
          $T[phi_stmt_617_update_completed_] 
          $T[phi_stmt_617_sample_start__ps] 
          phi_stmt_617_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_617_sample_completed__ps] 
          phi_stmt_617_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_617_update_start__ps] 
          phi_stmt_617_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_617_update_completed__ps] 
          phi_stmt_617_update_completed_ <-& (phi_stmt_617_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_617_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_617_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_617_update_start_)
          $T[phi_stmt_617_loopback_trigger] 
          phi_stmt_617_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_617_loopback_sample_req] 
          $T[phi_stmt_617_loopback_sample_req_ps] 
          phi_stmt_617_loopback_sample_req <-& (phi_stmt_617_loopback_sample_req_ps)
          phi_stmt_617_loopback_sample_req &-> ($null)
          $T[phi_stmt_617_entry_trigger] 
          phi_stmt_617_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_617_entry_sample_req] 
          $T[phi_stmt_617_entry_sample_req_ps] 
          phi_stmt_617_entry_sample_req <-& (phi_stmt_617_entry_sample_req_ps)
          phi_stmt_617_entry_sample_req &-> ($null)
          phi_stmt_617_update_start_ o<-& (phi_stmt_617_update_completed_ 0)
          phi_stmt_617_sample_start_ o<-& (phi_stmt_617_sample_completed_ 1)
          $T[phi_stmt_617_merged_reqs] 
          $T[phi_stmt_617_phi_mux_ack] 
          $T[phi_stmt_617_phi_mux_ack_ps] 
          phi_stmt_617_phi_mux_ack_ps <-& (phi_stmt_617_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_617_update_completed_)
          $T[R_ONE_3_619_sample_start__ps] 
          $T[R_ONE_3_619_sample_completed__ps] 
          $T[R_ONE_3_619_update_start__ps] 
          $T[R_ONE_3_619_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ONE_3_619_sample_start_] 
          $T[R_ONE_3_619_sample_completed_] 
          R_ONE_3_619_sample_completed_ <-& (R_ONE_3_619_sample_start_)
          $T[R_ONE_3_619_update_start_] 
          $T [R_ONE_3_619_update_completed_] $delay 
          R_ONE_3_619_update_completed_ <-& (R_ONE_3_619_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ONE_3_619_sample_start_ <-& (R_ONE_3_619_sample_start__ps)
          R_ONE_3_619_update_start_ <-& (R_ONE_3_619_update_start__ps)
          // Phi complete dependency.
          R_ONE_3_619_sample_completed__ps <-& (R_ONE_3_619_sample_completed_)
          R_ONE_3_619_update_completed__ps <-& (R_ONE_3_619_update_completed_)
          $T[R_next_pkt_priority_620_sample_start__ps] 
          $T[R_next_pkt_priority_620_sample_completed__ps] 
          $T[R_next_pkt_priority_620_update_start__ps] 
          $T[R_next_pkt_priority_620_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_620_sample_start_] 
          $T[R_next_pkt_priority_620_sample_completed_] 
          $T[R_next_pkt_priority_620_update_start_] 
          $T[R_next_pkt_priority_620_update_completed_] 
          ;;[R_next_pkt_priority_620_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_620_sample_start_ &-> (R_next_pkt_priority_620_Sample)
          R_next_pkt_priority_620_sample_completed_ <-& (R_next_pkt_priority_620_Sample)
          ;;[R_next_pkt_priority_620_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_620_update_start_ &-> (R_next_pkt_priority_620_Update)
          R_next_pkt_priority_620_update_completed_ <-& (R_next_pkt_priority_620_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_620_sample_start_ <-& (R_next_pkt_priority_620_sample_start__ps)
          R_next_pkt_priority_620_update_start_ <-& (R_next_pkt_priority_620_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_620_sample_completed__ps <-& (R_next_pkt_priority_620_sample_completed_)
          R_next_pkt_priority_620_update_completed__ps <-& (R_next_pkt_priority_620_update_completed_)
          $phisequencer [ phi_stmt_617_phi_seq] : 
          phi_stmt_617_entry_trigger R_ONE_3_619_sample_start__ps R_ONE_3_619_sample_completed__ps R_ONE_3_619_update_start__ps R_ONE_3_619_update_completed__ps phi_stmt_617_loopback_trigger R_next_pkt_priority_620_sample_start__ps R_next_pkt_priority_620_sample_completed__ps R_next_pkt_priority_620_update_start__ps R_next_pkt_priority_620_update_completed__ps :
          phi_stmt_617_sample_start__ps phi_stmt_617_sample_completed__ps phi_stmt_617_update_start__ps phi_stmt_617_update_completed__ps :
          phi_stmt_617_entry_sample_req_ps phi_stmt_617_loopback_sample_req_ps : 
          phi_stmt_617_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_617
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 240
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 241
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 242
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 243
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 244
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 245
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 246
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 247
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 248
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 249
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 250
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 251
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 253
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 254
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 255
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_1
          $T[WPIPE_out_data_1_807_sample_start_] 
          $T[WPIPE_out_data_1_807_sample_completed_] 
          $T[WPIPE_out_data_1_807_update_start_] 
          $T[WPIPE_out_data_1_807_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_1_807 with guard R_send_flag_806
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_589_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_593_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_598_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_603_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_608_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_613_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_617_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_589_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_593_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_598_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_603_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_608_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_613_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_617_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          ;;[WPIPE_out_data_1_807_Sample] 
          {
            // pipe write sample-start out_data_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_1_807_Update] 
          {
            // pipe write update (complete) out_data_1
            $T [req] $T [ack] 
          }
          WPIPE_out_data_1_807_sample_start_ &-> (WPIPE_out_data_1_807_Sample)
          WPIPE_out_data_1_807_sample_completed_ <-& (WPIPE_out_data_1_807_Sample)
          WPIPE_out_data_1_807_update_start_ <-& (WPIPE_out_data_1_807_sample_completed_)
          WPIPE_out_data_1_807_update_start_ &-> (WPIPE_out_data_1_807_Update)
          WPIPE_out_data_1_807_update_completed_ <-& (WPIPE_out_data_1_807_Update)
          WPIPE_out_data_1_807_sample_start_ o<-& (WPIPE_out_data_1_807_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_1_807_sample_start_
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_589_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_593_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_598_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_603_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_608_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_613_update_completed_)
          WPIPE_out_data_1_807_sample_start_ <-& (phi_stmt_617_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_1_807_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_589_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_593_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_598_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_603_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_608_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_613_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          phi_stmt_617_update_start_ o<-& (WPIPE_out_data_1_807_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe out_data_1
          // read-dependencies for pipe out_data_1
          // write-dependencies for pipe out_data_1
          // signal write dependencies for out_data_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_587__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_587_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_587__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_587_loop_body : condition_evaluated
        $bind do_while_stmt_587__entry__  => do_while_stmt_587_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_587_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_587__exit__)
      }
      do_while_stmt_587__entry__ |-> (do_while_stmt_587)
      do_while_stmt_587__exit__ <-| (do_while_stmt_587)
      do_while_stmt_587__entry__ <-| (branch_block_stmt_586__entry__)
      do_while_stmt_587__exit__ |-> (branch_block_stmt_586__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 224
    // constant-object-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // constant-object-declarations for block %outputPort_1_Daemon
    //  file .Aa/switch2x2.opt.aa, line 215
    // constant-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 222
    // 1 
    $constant $W[konst_811_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 224
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    // ZERO_8
    $constant $W[R_ZERO_8_591_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // ZERO_33
    $constant $W[R_ZERO_33_595_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // ZERO_33
    $constant $W[R_ZERO_33_600_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // ZERO_33
    $constant $W[R_ZERO_33_605_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // ZERO_33
    $constant $W[R_ZERO_33_610_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    // ZERO_3
    $constant $W[R_ZERO_3_615_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    // ONE_3
    $constant $W[R_ONE_3_619_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_624_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_629_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_634_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_639_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_644_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_647_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_650_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_653_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_657_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_660_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_663_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_666_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    // 0 
    $constant $W[konst_683_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_686_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_692_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_695_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_705_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_713_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_721_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_729_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_746_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_750_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_753_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_757_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_761_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_765_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_768_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_772_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_779_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_782_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_785_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_788_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_792_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_795_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_798_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_801_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 222
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 224
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    $W[next_down_counter_700_592_buffered] : $int<8>
    // down_counter
    $W[down_counter_589] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // noblock_obuf_1_1
    $W[RPIPE_noblock_obuf_1_1_597_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_593] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // noblock_obuf_2_1
    $W[RPIPE_noblock_obuf_2_1_602_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_598] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // noblock_obuf_3_1
    $W[RPIPE_noblock_obuf_3_1_607_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_603] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // noblock_obuf_4_1
    $W[RPIPE_noblock_obuf_4_1_612_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_608] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    $W[next_active_packet_680_616_buffered] : $int<3>
    // active_packet
    $W[active_packet_613] : $int<3>
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    $W[next_pkt_priority_680_620_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_617] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 240
    // p1_valid
    $W[p1_valid_626] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 241
    // p2_valid
    $W[p2_valid_631] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 242
    // p3_valid
    $W[p3_valid_636] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 243
    // p4_valid
    $W[p4_valid_641] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 244
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_645_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_648_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_651_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_654_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_655_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_658_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_661_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_664_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_667_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_668_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_670] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    // next_active_packet
    $W[next_active_packet_680] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_680] : $int<3>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 246
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_684_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_687_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_689] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 247
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_696_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_698_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_700] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 248
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_703_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_706_wire] : $int<1>
    // read_from_1
    $W[read_from_1_708] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 249
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_711_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_714_wire] : $int<1>
    // read_from_2
    $W[read_from_2_716] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 250
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_719_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_722_wire] : $int<1>
    // read_from_3
    $W[read_from_3_724] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 251
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_727_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_730_wire] : $int<1>
    // read_from_4
    $W[read_from_4_732] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 253
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_747_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_749_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_751_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_754_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_756_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_758_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_759_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_762_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_764_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_766_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_769_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_771_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_773_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_774_wire] : $int<32>
    // data_to_out
    $W[data_to_out_776] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 254
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_780_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_783_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_786_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_789_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_790_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_793_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_796_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_799_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_802_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_803_wire] : $int<1>
    // send_flag
    $W[send_flag_805] : $int<1>
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 255
    // out_data_1
    // datapath-instances for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 222
    ==0? [do_while_stmt_587_branch] (konst_811_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 224
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    # := [next_down_counter_700_592_buf] (next_down_counter_700) (next_down_counter_700_592_buffered)     $fullrate
    $buffering $out next_down_counter_700_592_buf next_down_counter_700_592_buffered  1
    # $phi [phi_stmt_589] (R_ZERO_8_591_wire_constant next_down_counter_700_592_buffered) ( down_counter_589 ) $fullrate
    // $buffering  $out phi_stmt_589 down_counter_589 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // noblock_obuf_1_1
    $ioport $in [RPIPE_noblock_obuf_1_1_597_inst] (noblock_obuf_1_1) (RPIPE_noblock_obuf_1_1_597_wire) $guard ( read_from_1_708 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_1_597_inst RPIPE_noblock_obuf_1_1_597_wire 1
    # $phi [phi_stmt_593] (R_ZERO_33_595_wire_constant RPIPE_noblock_obuf_1_1_597_wire) ( pkt_1_e_word_593 ) $fullrate
    // $buffering  $out phi_stmt_593 pkt_1_e_word_593 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // noblock_obuf_2_1
    $ioport $in [RPIPE_noblock_obuf_2_1_602_inst] (noblock_obuf_2_1) (RPIPE_noblock_obuf_2_1_602_wire) $guard ( read_from_2_716 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_1_602_inst RPIPE_noblock_obuf_2_1_602_wire 1
    # $phi [phi_stmt_598] (R_ZERO_33_600_wire_constant RPIPE_noblock_obuf_2_1_602_wire) ( pkt_2_e_word_598 ) $fullrate
    // $buffering  $out phi_stmt_598 pkt_2_e_word_598 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // noblock_obuf_3_1
    $ioport $in [RPIPE_noblock_obuf_3_1_607_inst] (noblock_obuf_3_1) (RPIPE_noblock_obuf_3_1_607_wire) $guard ( read_from_3_724 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_1_607_inst RPIPE_noblock_obuf_3_1_607_wire 1
    # $phi [phi_stmt_603] (R_ZERO_33_605_wire_constant RPIPE_noblock_obuf_3_1_607_wire) ( pkt_3_e_word_603 ) $fullrate
    // $buffering  $out phi_stmt_603 pkt_3_e_word_603 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // noblock_obuf_4_1
    $ioport $in [RPIPE_noblock_obuf_4_1_612_inst] (noblock_obuf_4_1) (RPIPE_noblock_obuf_4_1_612_wire) $guard ( read_from_4_732 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_1_612_inst RPIPE_noblock_obuf_4_1_612_wire 1
    # $phi [phi_stmt_608] (R_ZERO_33_610_wire_constant RPIPE_noblock_obuf_4_1_612_wire) ( pkt_4_e_word_608 ) $fullrate
    // $buffering  $out phi_stmt_608 pkt_4_e_word_608 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    # := [next_active_packet_680_616_buf] (next_active_packet_680) (next_active_packet_680_616_buffered)     $fullrate
    $buffering $out next_active_packet_680_616_buf next_active_packet_680_616_buffered  1
    # $phi [phi_stmt_613] (R_ZERO_3_615_wire_constant next_active_packet_680_616_buffered) ( active_packet_613 ) $fullrate
    // $buffering  $out phi_stmt_613 active_packet_613 2
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    # := [next_pkt_priority_680_620_buf] (next_pkt_priority_680) (next_pkt_priority_680_620_buffered)     $fullrate
    $buffering $out next_pkt_priority_680_620_buf next_pkt_priority_680_620_buffered  1
    # $phi [phi_stmt_617] (R_ONE_3_619_wire_constant next_pkt_priority_680_620_buffered) ( pkt_priority_617 ) $fullrate
    // $buffering  $out phi_stmt_617 pkt_priority_617 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 240
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_625_inst] (pkt_1_e_word_593 konst_624_wire_constant) (p1_valid_626)   $flowthrough 
    $delay BITSEL_u33_u1_625_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 241
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_630_inst] (pkt_2_e_word_598 konst_629_wire_constant) (p2_valid_631)   $flowthrough 
    $delay BITSEL_u33_u1_630_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 242
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_635_inst] (pkt_3_e_word_603 konst_634_wire_constant) (p3_valid_636)   $flowthrough 
    $delay BITSEL_u33_u1_635_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 243
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_640_inst] (pkt_4_e_word_608 konst_639_wire_constant) (p4_valid_641)   $flowthrough 
    $delay BITSEL_u33_u1_640_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 244
    // (active_packet == 1 )
    ==[EQ_u3_u1_645_inst] (active_packet_613 konst_644_wire_constant) (EQ_u3_u1_645_wire)   $flowthrough 
    $delay EQ_u3_u1_645_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_648_inst] (EQ_u3_u1_645_wire p1_valid_626 konst_647_wire_constant) (MUX_648_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_651_inst] (active_packet_613 konst_650_wire_constant) (EQ_u3_u1_651_wire)   $flowthrough 
    $delay EQ_u3_u1_651_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_654_inst] (EQ_u3_u1_651_wire p2_valid_631 konst_653_wire_constant) (MUX_654_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_655_inst] (MUX_648_wire MUX_654_wire) (OR_u1_u1_655_wire)   $flowthrough 
    $delay OR_u1_u1_655_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_658_inst] (active_packet_613 konst_657_wire_constant) (EQ_u3_u1_658_wire)   $flowthrough 
    $delay EQ_u3_u1_658_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_661_inst] (EQ_u3_u1_658_wire p3_valid_636 konst_660_wire_constant) (MUX_661_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_664_inst] (active_packet_613 konst_663_wire_constant) (EQ_u3_u1_664_wire)   $flowthrough 
    $delay EQ_u3_u1_664_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_667_inst] (EQ_u3_u1_664_wire p4_valid_641 konst_666_wire_constant) (MUX_667_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_668_inst] (MUX_661_wire MUX_667_wire) (OR_u1_u1_668_wire)   $flowthrough 
    $delay OR_u1_u1_668_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_669_inst] (OR_u1_u1_655_wire OR_u1_u1_668_wire) (valid_active_pkt_word_read_670)   $flowthrough 
    $delay OR_u1_u1_669_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    $call [call_stmt_680_call] $module prioritySelect(down_counter_589 active_packet_613 pkt_priority_617 p1_valid_626 p2_valid_631 p3_valid_636 p4_valid_641) (next_active_packet_680 next_pkt_priority_680)   $flowthrough $fullrate
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 246
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_684_inst] (next_active_packet_680 konst_683_wire_constant) (NEQ_u3_u1_684_wire)   $flowthrough 
    $delay NEQ_u3_u1_684_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_687_inst] (down_counter_589 konst_686_wire_constant) (EQ_u8_u1_687_wire)   $flowthrough 
    $delay EQ_u8_u1_687_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_688_inst] (NEQ_u3_u1_684_wire EQ_u8_u1_687_wire) (started_new_packet_689)   $flowthrough 
    $delay AND_u1_u1_688_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 247
    // (down_counter - 1 )
    -[SUB_u8_u8_696_inst] (down_counter_589 konst_695_wire_constant) (SUB_u8_u8_696_wire)   $flowthrough 
    $delay SUB_u8_u8_696_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_698_inst] (valid_active_pkt_word_read_670 SUB_u8_u8_696_wire down_counter_589) (MUX_698_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_699_inst] (started_new_packet_689 konst_692_wire_constant MUX_698_wire) (next_down_counter_700)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 248
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_703_inst] (p1_valid_626) (NOT_u1_u1_703_wire)   $flowthrough
    $delay NOT_u1_u1_703_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_706_inst] (next_active_packet_680 konst_705_wire_constant) (EQ_u3_u1_706_wire)   $flowthrough 
    $delay EQ_u3_u1_706_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_707_inst] (NOT_u1_u1_703_wire EQ_u3_u1_706_wire) (read_from_1_708)   $flowthrough 
    $delay OR_u1_u1_707_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 249
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_711_inst] (p2_valid_631) (NOT_u1_u1_711_wire)   $flowthrough
    $delay NOT_u1_u1_711_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_714_inst] (next_active_packet_680 konst_713_wire_constant) (EQ_u3_u1_714_wire)   $flowthrough 
    $delay EQ_u3_u1_714_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_715_inst] (NOT_u1_u1_711_wire EQ_u3_u1_714_wire) (read_from_2_716)   $flowthrough 
    $delay OR_u1_u1_715_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 250
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_719_inst] (p3_valid_636) (NOT_u1_u1_719_wire)   $flowthrough
    $delay NOT_u1_u1_719_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_722_inst] (next_active_packet_680 konst_721_wire_constant) (EQ_u3_u1_722_wire)   $flowthrough 
    $delay EQ_u3_u1_722_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_723_inst] (NOT_u1_u1_719_wire EQ_u3_u1_722_wire) (read_from_3_724)   $flowthrough 
    $delay OR_u1_u1_723_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 251
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_727_inst] (p4_valid_641) (NOT_u1_u1_727_wire)   $flowthrough
    $delay NOT_u1_u1_727_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_730_inst] (next_active_packet_680 konst_729_wire_constant) (EQ_u3_u1_730_wire)   $flowthrough 
    $delay EQ_u3_u1_730_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_731_inst] (NOT_u1_u1_727_wire EQ_u3_u1_730_wire) (read_from_4_732)   $flowthrough 
    $delay OR_u1_u1_731_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 253
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_747_inst] (next_active_packet_680 konst_746_wire_constant) (EQ_u3_u1_747_wire)   $flowthrough 
    $delay EQ_u3_u1_747_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_749_inst] (pkt_1_e_word_593 31 0) (slice_749_wire)  $flowthrough
    $delay slice_749_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_751_inst] (EQ_u3_u1_747_wire slice_749_wire konst_750_wire_constant) (MUX_751_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_754_inst] (next_active_packet_680 konst_753_wire_constant) (EQ_u3_u1_754_wire)   $flowthrough 
    $delay EQ_u3_u1_754_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_756_inst] (pkt_2_e_word_598 31 0) (slice_756_wire)  $flowthrough
    $delay slice_756_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_758_inst] (EQ_u3_u1_754_wire slice_756_wire konst_757_wire_constant) (MUX_758_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_759_inst] (MUX_751_wire MUX_758_wire) (OR_u32_u32_759_wire)   $flowthrough 
    $delay OR_u32_u32_759_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_762_inst] (next_active_packet_680 konst_761_wire_constant) (EQ_u3_u1_762_wire)   $flowthrough 
    $delay EQ_u3_u1_762_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_764_inst] (pkt_3_e_word_603 31 0) (slice_764_wire)  $flowthrough
    $delay slice_764_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_766_inst] (EQ_u3_u1_762_wire slice_764_wire konst_765_wire_constant) (MUX_766_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_769_inst] (next_active_packet_680 konst_768_wire_constant) (EQ_u3_u1_769_wire)   $flowthrough 
    $delay EQ_u3_u1_769_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_771_inst] (pkt_4_e_word_608 31 0) (slice_771_wire)  $flowthrough
    $delay slice_771_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_773_inst] (EQ_u3_u1_769_wire slice_771_wire konst_772_wire_constant) (MUX_773_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_774_inst] (MUX_766_wire MUX_773_wire) (OR_u32_u32_774_wire)   $flowthrough 
    $delay OR_u32_u32_774_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_775_inst] (OR_u32_u32_759_wire OR_u32_u32_774_wire) (data_to_out_776)   $flowthrough 
    $delay OR_u32_u32_775_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 254
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_780_inst] (next_active_packet_680 konst_779_wire_constant) (EQ_u3_u1_780_wire)   $flowthrough 
    $delay EQ_u3_u1_780_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_783_inst] (EQ_u3_u1_780_wire p1_valid_626 konst_782_wire_constant) (MUX_783_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_786_inst] (next_active_packet_680 konst_785_wire_constant) (EQ_u3_u1_786_wire)   $flowthrough 
    $delay EQ_u3_u1_786_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_789_inst] (EQ_u3_u1_786_wire p2_valid_631 konst_788_wire_constant) (MUX_789_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_790_inst] (MUX_783_wire MUX_789_wire) (OR_u1_u1_790_wire)   $flowthrough 
    $delay OR_u1_u1_790_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_793_inst] (next_active_packet_680 konst_792_wire_constant) (EQ_u3_u1_793_wire)   $flowthrough 
    $delay EQ_u3_u1_793_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_796_inst] (EQ_u3_u1_793_wire p3_valid_636 konst_795_wire_constant) (MUX_796_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_799_inst] (next_active_packet_680 konst_798_wire_constant) (EQ_u3_u1_799_wire)   $flowthrough 
    $delay EQ_u3_u1_799_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_802_inst] (EQ_u3_u1_799_wire p4_valid_641 konst_801_wire_constant) (MUX_802_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_803_inst] (MUX_796_wire MUX_802_wire) (OR_u1_u1_803_wire)   $flowthrough 
    $delay OR_u1_u1_803_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_804_inst] (OR_u1_u1_790_wire OR_u1_u1_803_wire) (send_flag_805)   $flowthrough 
    $delay OR_u1_u1_804_inst 0
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 255
    // out_data_1
    $ioport $out [WPIPE_out_data_1_807_inst]  (data_to_out_776) (out_data_1) $guard ( send_flag_805 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_587
  //  file .Aa/switch2x2.opt.aa, line 222
  phi_stmt_589 <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_589_entry_sample_req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_589_loopback_sample_req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_589_phi_mux_ack)
  next_down_counter_700_592_buf <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_down_counter_592_Sample/req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_down_counter_592_Update/req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_down_counter_592_Sample/ack branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_down_counter_592_Update/ack)
  phi_stmt_593 <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_593_entry_sample_req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_593_loopback_sample_req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_593_phi_mux_ack)
  // noblock_obuf_1_1
  RPIPE_noblock_obuf_1_1_597_inst <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_1_1_597_Sample/rr branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_1_1_597_Update/cr) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_1_1_597_Sample/ra branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_1_1_597_Update/ca)
  phi_stmt_598 <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_598_entry_sample_req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_598_loopback_sample_req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_598_phi_mux_ack)
  // noblock_obuf_2_1
  RPIPE_noblock_obuf_2_1_602_inst <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_2_1_602_Sample/rr branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_2_1_602_Update/cr) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_2_1_602_Sample/ra branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_2_1_602_Update/ca)
  phi_stmt_603 <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_603_entry_sample_req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_603_loopback_sample_req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_603_phi_mux_ack)
  // noblock_obuf_3_1
  RPIPE_noblock_obuf_3_1_607_inst <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_3_1_607_Sample/rr branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_3_1_607_Update/cr) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_3_1_607_Sample/ra branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_3_1_607_Update/ca)
  phi_stmt_608 <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_608_entry_sample_req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_608_loopback_sample_req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_608_phi_mux_ack)
  // noblock_obuf_4_1
  RPIPE_noblock_obuf_4_1_612_inst <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_4_1_612_Sample/rr branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_4_1_612_Update/cr) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_4_1_612_Sample/ra branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/RPIPE_noblock_obuf_4_1_612_Update/ca)
  phi_stmt_613 <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_613_entry_sample_req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_613_loopback_sample_req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_613_phi_mux_ack)
  next_active_packet_680_616_buf <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_active_packet_616_Sample/req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_active_packet_616_Update/req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_active_packet_616_Sample/ack branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_active_packet_616_Update/ack)
  phi_stmt_617 <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_617_entry_sample_req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_617_loopback_sample_req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/phi_stmt_617_phi_mux_ack)
  next_pkt_priority_680_620_buf <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_pkt_priority_620_Sample/req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_pkt_priority_620_Update/req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_pkt_priority_620_Sample/ack branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/R_next_pkt_priority_620_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 240
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 241
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 242
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 243
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 244
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 245
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 246
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 247
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 248
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 249
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 250
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 251
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 253
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 254
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 255
  // data_to_out
  // out_data_1
  WPIPE_out_data_1_807_inst <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/WPIPE_out_data_1_807_Sample/req branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/WPIPE_out_data_1_807_Update/req) (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/WPIPE_out_data_1_807_Sample/ack branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/WPIPE_out_data_1_807_Update/ack)
  do_while_stmt_587_branch <=> (branch_block_stmt_586/do_while_stmt_587/do_while_stmt_587_loop_body/condition_evaluated) (branch_block_stmt_586/do_while_stmt_587/loop_exit/ack branch_block_stmt_586/do_while_stmt_587/loop_taken/ack)
}
$module [outputPort_2_Daemon] 
{
  // pipe-declarations for block %outputPort_2_Daemon
  //  file .Aa/switch2x2.opt.aa, line 259
  // pipe-declarations for block %outputPort_2_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 264
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_815] // Branch Block  file .Aa/switch2x2.opt.aa, line 264
    {
      $P [branch_block_stmt_815__entry__]
      branch_block_stmt_815__entry__ <-| ($entry)
      $P [branch_block_stmt_815__exit__]
      branch_block_stmt_815__exit__ |-> ($exit)
      $P [do_while_stmt_816__entry__] 
      $P [do_while_stmt_816__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 266
      <o> [do_while_stmt_816]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_816__entry__] 
        $P[do_while_stmt_816__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_816_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_818
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_818_sample_start_] 
          $T[phi_stmt_818_sample_completed_] 
          $T[phi_stmt_818_update_start_] 
          $T[phi_stmt_818_update_completed_] 
          $T[phi_stmt_818_sample_start__ps] 
          phi_stmt_818_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_818_sample_completed__ps] 
          phi_stmt_818_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_818_update_start__ps] 
          phi_stmt_818_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_818_update_completed__ps] 
          phi_stmt_818_update_completed_ <-& (phi_stmt_818_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_818_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_818_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_818_update_start_)
          $T[phi_stmt_818_loopback_trigger] 
          phi_stmt_818_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_818_loopback_sample_req] 
          $T[phi_stmt_818_loopback_sample_req_ps] 
          phi_stmt_818_loopback_sample_req <-& (phi_stmt_818_loopback_sample_req_ps)
          phi_stmt_818_loopback_sample_req &-> ($null)
          $T[phi_stmt_818_entry_trigger] 
          phi_stmt_818_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_818_entry_sample_req] 
          $T[phi_stmt_818_entry_sample_req_ps] 
          phi_stmt_818_entry_sample_req <-& (phi_stmt_818_entry_sample_req_ps)
          phi_stmt_818_entry_sample_req &-> ($null)
          phi_stmt_818_update_start_ o<-& (phi_stmt_818_update_completed_ 0)
          phi_stmt_818_sample_start_ o<-& (phi_stmt_818_sample_completed_ 1)
          $T[phi_stmt_818_merged_reqs] 
          $T[phi_stmt_818_phi_mux_ack] 
          $T[phi_stmt_818_phi_mux_ack_ps] 
          phi_stmt_818_phi_mux_ack_ps <-& (phi_stmt_818_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_818_update_completed_)
          $T[R_ZERO_8_820_sample_start__ps] 
          $T[R_ZERO_8_820_sample_completed__ps] 
          $T[R_ZERO_8_820_update_start__ps] 
          $T[R_ZERO_8_820_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_820_sample_start_] 
          $T[R_ZERO_8_820_sample_completed_] 
          R_ZERO_8_820_sample_completed_ <-& (R_ZERO_8_820_sample_start_)
          $T[R_ZERO_8_820_update_start_] 
          $T [R_ZERO_8_820_update_completed_] $delay 
          R_ZERO_8_820_update_completed_ <-& (R_ZERO_8_820_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_820_sample_start_ <-& (R_ZERO_8_820_sample_start__ps)
          R_ZERO_8_820_update_start_ <-& (R_ZERO_8_820_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_820_sample_completed__ps <-& (R_ZERO_8_820_sample_completed_)
          R_ZERO_8_820_update_completed__ps <-& (R_ZERO_8_820_update_completed_)
          $T[R_next_down_counter_821_sample_start__ps] 
          $T[R_next_down_counter_821_sample_completed__ps] 
          $T[R_next_down_counter_821_update_start__ps] 
          $T[R_next_down_counter_821_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_821_sample_start_] 
          $T[R_next_down_counter_821_sample_completed_] 
          $T[R_next_down_counter_821_update_start_] 
          $T[R_next_down_counter_821_update_completed_] 
          ;;[R_next_down_counter_821_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_821_sample_start_ &-> (R_next_down_counter_821_Sample)
          R_next_down_counter_821_sample_completed_ <-& (R_next_down_counter_821_Sample)
          ;;[R_next_down_counter_821_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_821_update_start_ &-> (R_next_down_counter_821_Update)
          R_next_down_counter_821_update_completed_ <-& (R_next_down_counter_821_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_821_sample_start_ <-& (R_next_down_counter_821_sample_start__ps)
          R_next_down_counter_821_update_start_ <-& (R_next_down_counter_821_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_821_sample_completed__ps <-& (R_next_down_counter_821_sample_completed_)
          R_next_down_counter_821_update_completed__ps <-& (R_next_down_counter_821_update_completed_)
          $phisequencer [ phi_stmt_818_phi_seq] : 
          phi_stmt_818_entry_trigger R_ZERO_8_820_sample_start__ps R_ZERO_8_820_sample_completed__ps R_ZERO_8_820_update_start__ps R_ZERO_8_820_update_completed__ps phi_stmt_818_loopback_trigger R_next_down_counter_821_sample_start__ps R_next_down_counter_821_sample_completed__ps R_next_down_counter_821_update_start__ps R_next_down_counter_821_update_completed__ps :
          phi_stmt_818_sample_start__ps phi_stmt_818_sample_completed__ps phi_stmt_818_update_start__ps phi_stmt_818_update_completed__ps :
          phi_stmt_818_entry_sample_req_ps phi_stmt_818_loopback_sample_req_ps : 
          phi_stmt_818_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_818
          // start:  PHI statement phi_stmt_822
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_822_sample_start_] 
          $T[phi_stmt_822_sample_completed_] 
          $T[phi_stmt_822_update_start_] 
          $T[phi_stmt_822_update_completed_] 
          $T[phi_stmt_822_sample_start__ps] 
          phi_stmt_822_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_822_sample_completed__ps] 
          phi_stmt_822_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_822_update_start__ps] 
          phi_stmt_822_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_822_update_completed__ps] 
          phi_stmt_822_update_completed_ <-& (phi_stmt_822_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_822_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_822_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_822_update_start_)
          $T[phi_stmt_822_loopback_trigger] 
          phi_stmt_822_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_822_loopback_sample_req] 
          $T[phi_stmt_822_loopback_sample_req_ps] 
          phi_stmt_822_loopback_sample_req <-& (phi_stmt_822_loopback_sample_req_ps)
          phi_stmt_822_loopback_sample_req &-> ($null)
          $T[phi_stmt_822_entry_trigger] 
          phi_stmt_822_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_822_entry_sample_req] 
          $T[phi_stmt_822_entry_sample_req_ps] 
          phi_stmt_822_entry_sample_req <-& (phi_stmt_822_entry_sample_req_ps)
          phi_stmt_822_entry_sample_req &-> ($null)
          phi_stmt_822_update_start_ o<-& (phi_stmt_822_update_completed_ 0)
          phi_stmt_822_sample_start_ o<-& (phi_stmt_822_sample_completed_ 1)
          $T[phi_stmt_822_merged_reqs] 
          $T[phi_stmt_822_phi_mux_ack] 
          $T[phi_stmt_822_phi_mux_ack_ps] 
          phi_stmt_822_phi_mux_ack_ps <-& (phi_stmt_822_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_822_update_completed_)
          $T[R_ZERO_33_824_sample_start__ps] 
          $T[R_ZERO_33_824_sample_completed__ps] 
          $T[R_ZERO_33_824_update_start__ps] 
          $T[R_ZERO_33_824_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_824_sample_start_] 
          $T[R_ZERO_33_824_sample_completed_] 
          R_ZERO_33_824_sample_completed_ <-& (R_ZERO_33_824_sample_start_)
          $T[R_ZERO_33_824_update_start_] 
          $T [R_ZERO_33_824_update_completed_] $delay 
          R_ZERO_33_824_update_completed_ <-& (R_ZERO_33_824_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_824_sample_start_ <-& (R_ZERO_33_824_sample_start__ps)
          R_ZERO_33_824_update_start_ <-& (R_ZERO_33_824_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_824_sample_completed__ps <-& (R_ZERO_33_824_sample_completed_)
          R_ZERO_33_824_update_completed__ps <-& (R_ZERO_33_824_update_completed_)
          $T[RPIPE_noblock_obuf_1_2_826_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_826_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_2_826_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_826_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_2
          $T[RPIPE_noblock_obuf_1_2_826_sample_start_] 
          $T[RPIPE_noblock_obuf_1_2_826_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_2_826_update_start_] 
          $T[RPIPE_noblock_obuf_1_2_826_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_2_826 with guard R_read_from_1_825
          // root phi_stmt_822 not in visited_elements
          // root phi_stmt_827 not in visited_elements
          // root phi_stmt_832 not in visited_elements
          // root phi_stmt_837 not in visited_elements
          // root phi_stmt_842 not in visited_elements
          // root phi_stmt_846 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_2_826_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_2_826_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_2_826_sample_start_ &-> (RPIPE_noblock_obuf_1_2_826_Sample)
          RPIPE_noblock_obuf_1_2_826_sample_completed_ <-& (RPIPE_noblock_obuf_1_2_826_Sample)
          RPIPE_noblock_obuf_1_2_826_update_start_ <-& (RPIPE_noblock_obuf_1_2_826_sample_completed_)
          RPIPE_noblock_obuf_1_2_826_update_start_ &-> (RPIPE_noblock_obuf_1_2_826_Update)
          RPIPE_noblock_obuf_1_2_826_update_completed_ <-& (RPIPE_noblock_obuf_1_2_826_Update)
          RPIPE_noblock_obuf_1_2_826_sample_start_ o<-& (RPIPE_noblock_obuf_1_2_826_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_2_826_sample_start_ <-& (RPIPE_noblock_obuf_1_2_826_sample_start__ps)
          RPIPE_noblock_obuf_1_2_826_update_start_ <-& (RPIPE_noblock_obuf_1_2_826_update_start__ps)
          // RAW reenables for noblock_obuf_1_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_2_826_sample_completed__ps <-& (RPIPE_noblock_obuf_1_2_826_sample_completed_)
          RPIPE_noblock_obuf_1_2_826_update_completed__ps <-& (RPIPE_noblock_obuf_1_2_826_update_completed_)
          $phisequencer [ phi_stmt_822_phi_seq] : 
          phi_stmt_822_entry_trigger R_ZERO_33_824_sample_start__ps R_ZERO_33_824_sample_completed__ps R_ZERO_33_824_update_start__ps R_ZERO_33_824_update_completed__ps phi_stmt_822_loopback_trigger RPIPE_noblock_obuf_1_2_826_sample_start__ps RPIPE_noblock_obuf_1_2_826_sample_completed__ps RPIPE_noblock_obuf_1_2_826_update_start__ps RPIPE_noblock_obuf_1_2_826_update_completed__ps :
          phi_stmt_822_sample_start__ps phi_stmt_822_sample_completed__ps phi_stmt_822_update_start__ps phi_stmt_822_update_completed__ps :
          phi_stmt_822_entry_sample_req_ps phi_stmt_822_loopback_sample_req_ps : 
          phi_stmt_822_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_822
          // start:  PHI statement phi_stmt_827
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_827_sample_start_] 
          $T[phi_stmt_827_sample_completed_] 
          $T[phi_stmt_827_update_start_] 
          $T[phi_stmt_827_update_completed_] 
          $T[phi_stmt_827_sample_start__ps] 
          phi_stmt_827_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_827_sample_completed__ps] 
          phi_stmt_827_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_827_update_start__ps] 
          phi_stmt_827_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_827_update_completed__ps] 
          phi_stmt_827_update_completed_ <-& (phi_stmt_827_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_827_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_827_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_827_update_start_)
          $T[phi_stmt_827_loopback_trigger] 
          phi_stmt_827_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_827_loopback_sample_req] 
          $T[phi_stmt_827_loopback_sample_req_ps] 
          phi_stmt_827_loopback_sample_req <-& (phi_stmt_827_loopback_sample_req_ps)
          phi_stmt_827_loopback_sample_req &-> ($null)
          $T[phi_stmt_827_entry_trigger] 
          phi_stmt_827_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_827_entry_sample_req] 
          $T[phi_stmt_827_entry_sample_req_ps] 
          phi_stmt_827_entry_sample_req <-& (phi_stmt_827_entry_sample_req_ps)
          phi_stmt_827_entry_sample_req &-> ($null)
          phi_stmt_827_update_start_ o<-& (phi_stmt_827_update_completed_ 0)
          phi_stmt_827_sample_start_ o<-& (phi_stmt_827_sample_completed_ 1)
          $T[phi_stmt_827_merged_reqs] 
          $T[phi_stmt_827_phi_mux_ack] 
          $T[phi_stmt_827_phi_mux_ack_ps] 
          phi_stmt_827_phi_mux_ack_ps <-& (phi_stmt_827_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_827_update_completed_)
          $T[R_ZERO_33_829_sample_start__ps] 
          $T[R_ZERO_33_829_sample_completed__ps] 
          $T[R_ZERO_33_829_update_start__ps] 
          $T[R_ZERO_33_829_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_829_sample_start_] 
          $T[R_ZERO_33_829_sample_completed_] 
          R_ZERO_33_829_sample_completed_ <-& (R_ZERO_33_829_sample_start_)
          $T[R_ZERO_33_829_update_start_] 
          $T [R_ZERO_33_829_update_completed_] $delay 
          R_ZERO_33_829_update_completed_ <-& (R_ZERO_33_829_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_829_sample_start_ <-& (R_ZERO_33_829_sample_start__ps)
          R_ZERO_33_829_update_start_ <-& (R_ZERO_33_829_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_829_sample_completed__ps <-& (R_ZERO_33_829_sample_completed_)
          R_ZERO_33_829_update_completed__ps <-& (R_ZERO_33_829_update_completed_)
          $T[RPIPE_noblock_obuf_2_2_831_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_831_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_2_831_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_831_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_2
          $T[RPIPE_noblock_obuf_2_2_831_sample_start_] 
          $T[RPIPE_noblock_obuf_2_2_831_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_2_831_update_start_] 
          $T[RPIPE_noblock_obuf_2_2_831_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_2_831 with guard R_read_from_2_830
          // root phi_stmt_827 not in visited_elements
          // root phi_stmt_832 not in visited_elements
          // root phi_stmt_837 not in visited_elements
          // root phi_stmt_842 not in visited_elements
          // root phi_stmt_846 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_2_831_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_2_831_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_2_831_sample_start_ &-> (RPIPE_noblock_obuf_2_2_831_Sample)
          RPIPE_noblock_obuf_2_2_831_sample_completed_ <-& (RPIPE_noblock_obuf_2_2_831_Sample)
          RPIPE_noblock_obuf_2_2_831_update_start_ <-& (RPIPE_noblock_obuf_2_2_831_sample_completed_)
          RPIPE_noblock_obuf_2_2_831_update_start_ &-> (RPIPE_noblock_obuf_2_2_831_Update)
          RPIPE_noblock_obuf_2_2_831_update_completed_ <-& (RPIPE_noblock_obuf_2_2_831_Update)
          RPIPE_noblock_obuf_2_2_831_sample_start_ o<-& (RPIPE_noblock_obuf_2_2_831_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_2_831_sample_start_ <-& (RPIPE_noblock_obuf_2_2_831_sample_start__ps)
          RPIPE_noblock_obuf_2_2_831_update_start_ <-& (RPIPE_noblock_obuf_2_2_831_update_start__ps)
          // RAW reenables for noblock_obuf_2_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_2_831_sample_completed__ps <-& (RPIPE_noblock_obuf_2_2_831_sample_completed_)
          RPIPE_noblock_obuf_2_2_831_update_completed__ps <-& (RPIPE_noblock_obuf_2_2_831_update_completed_)
          $phisequencer [ phi_stmt_827_phi_seq] : 
          phi_stmt_827_entry_trigger R_ZERO_33_829_sample_start__ps R_ZERO_33_829_sample_completed__ps R_ZERO_33_829_update_start__ps R_ZERO_33_829_update_completed__ps phi_stmt_827_loopback_trigger RPIPE_noblock_obuf_2_2_831_sample_start__ps RPIPE_noblock_obuf_2_2_831_sample_completed__ps RPIPE_noblock_obuf_2_2_831_update_start__ps RPIPE_noblock_obuf_2_2_831_update_completed__ps :
          phi_stmt_827_sample_start__ps phi_stmt_827_sample_completed__ps phi_stmt_827_update_start__ps phi_stmt_827_update_completed__ps :
          phi_stmt_827_entry_sample_req_ps phi_stmt_827_loopback_sample_req_ps : 
          phi_stmt_827_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_827
          // start:  PHI statement phi_stmt_832
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_832_sample_start_] 
          $T[phi_stmt_832_sample_completed_] 
          $T[phi_stmt_832_update_start_] 
          $T[phi_stmt_832_update_completed_] 
          $T[phi_stmt_832_sample_start__ps] 
          phi_stmt_832_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_832_sample_completed__ps] 
          phi_stmt_832_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_832_update_start__ps] 
          phi_stmt_832_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_832_update_completed__ps] 
          phi_stmt_832_update_completed_ <-& (phi_stmt_832_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_832_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_832_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_832_update_start_)
          $T[phi_stmt_832_loopback_trigger] 
          phi_stmt_832_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_832_loopback_sample_req] 
          $T[phi_stmt_832_loopback_sample_req_ps] 
          phi_stmt_832_loopback_sample_req <-& (phi_stmt_832_loopback_sample_req_ps)
          phi_stmt_832_loopback_sample_req &-> ($null)
          $T[phi_stmt_832_entry_trigger] 
          phi_stmt_832_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_832_entry_sample_req] 
          $T[phi_stmt_832_entry_sample_req_ps] 
          phi_stmt_832_entry_sample_req <-& (phi_stmt_832_entry_sample_req_ps)
          phi_stmt_832_entry_sample_req &-> ($null)
          phi_stmt_832_update_start_ o<-& (phi_stmt_832_update_completed_ 0)
          phi_stmt_832_sample_start_ o<-& (phi_stmt_832_sample_completed_ 1)
          $T[phi_stmt_832_merged_reqs] 
          $T[phi_stmt_832_phi_mux_ack] 
          $T[phi_stmt_832_phi_mux_ack_ps] 
          phi_stmt_832_phi_mux_ack_ps <-& (phi_stmt_832_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_832_update_completed_)
          $T[R_ZERO_33_834_sample_start__ps] 
          $T[R_ZERO_33_834_sample_completed__ps] 
          $T[R_ZERO_33_834_update_start__ps] 
          $T[R_ZERO_33_834_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_834_sample_start_] 
          $T[R_ZERO_33_834_sample_completed_] 
          R_ZERO_33_834_sample_completed_ <-& (R_ZERO_33_834_sample_start_)
          $T[R_ZERO_33_834_update_start_] 
          $T [R_ZERO_33_834_update_completed_] $delay 
          R_ZERO_33_834_update_completed_ <-& (R_ZERO_33_834_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_834_sample_start_ <-& (R_ZERO_33_834_sample_start__ps)
          R_ZERO_33_834_update_start_ <-& (R_ZERO_33_834_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_834_sample_completed__ps <-& (R_ZERO_33_834_sample_completed_)
          R_ZERO_33_834_update_completed__ps <-& (R_ZERO_33_834_update_completed_)
          $T[RPIPE_noblock_obuf_3_2_836_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_836_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_2_836_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_836_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_2
          $T[RPIPE_noblock_obuf_3_2_836_sample_start_] 
          $T[RPIPE_noblock_obuf_3_2_836_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_2_836_update_start_] 
          $T[RPIPE_noblock_obuf_3_2_836_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_2_836 with guard R_read_from_3_835
          // root phi_stmt_832 not in visited_elements
          // root phi_stmt_837 not in visited_elements
          // root phi_stmt_842 not in visited_elements
          // root phi_stmt_846 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_2_836_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_2_836_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_2_836_sample_start_ &-> (RPIPE_noblock_obuf_3_2_836_Sample)
          RPIPE_noblock_obuf_3_2_836_sample_completed_ <-& (RPIPE_noblock_obuf_3_2_836_Sample)
          RPIPE_noblock_obuf_3_2_836_update_start_ <-& (RPIPE_noblock_obuf_3_2_836_sample_completed_)
          RPIPE_noblock_obuf_3_2_836_update_start_ &-> (RPIPE_noblock_obuf_3_2_836_Update)
          RPIPE_noblock_obuf_3_2_836_update_completed_ <-& (RPIPE_noblock_obuf_3_2_836_Update)
          RPIPE_noblock_obuf_3_2_836_sample_start_ o<-& (RPIPE_noblock_obuf_3_2_836_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_2_836_sample_start_ <-& (RPIPE_noblock_obuf_3_2_836_sample_start__ps)
          RPIPE_noblock_obuf_3_2_836_update_start_ <-& (RPIPE_noblock_obuf_3_2_836_update_start__ps)
          // RAW reenables for noblock_obuf_3_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_2_836_sample_completed__ps <-& (RPIPE_noblock_obuf_3_2_836_sample_completed_)
          RPIPE_noblock_obuf_3_2_836_update_completed__ps <-& (RPIPE_noblock_obuf_3_2_836_update_completed_)
          $phisequencer [ phi_stmt_832_phi_seq] : 
          phi_stmt_832_entry_trigger R_ZERO_33_834_sample_start__ps R_ZERO_33_834_sample_completed__ps R_ZERO_33_834_update_start__ps R_ZERO_33_834_update_completed__ps phi_stmt_832_loopback_trigger RPIPE_noblock_obuf_3_2_836_sample_start__ps RPIPE_noblock_obuf_3_2_836_sample_completed__ps RPIPE_noblock_obuf_3_2_836_update_start__ps RPIPE_noblock_obuf_3_2_836_update_completed__ps :
          phi_stmt_832_sample_start__ps phi_stmt_832_sample_completed__ps phi_stmt_832_update_start__ps phi_stmt_832_update_completed__ps :
          phi_stmt_832_entry_sample_req_ps phi_stmt_832_loopback_sample_req_ps : 
          phi_stmt_832_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_832
          // start:  PHI statement phi_stmt_837
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_837_sample_start_] 
          $T[phi_stmt_837_sample_completed_] 
          $T[phi_stmt_837_update_start_] 
          $T[phi_stmt_837_update_completed_] 
          $T[phi_stmt_837_sample_start__ps] 
          phi_stmt_837_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_837_sample_completed__ps] 
          phi_stmt_837_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_837_update_start__ps] 
          phi_stmt_837_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_837_update_completed__ps] 
          phi_stmt_837_update_completed_ <-& (phi_stmt_837_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_837_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_837_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_837_update_start_)
          $T[phi_stmt_837_loopback_trigger] 
          phi_stmt_837_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_837_loopback_sample_req] 
          $T[phi_stmt_837_loopback_sample_req_ps] 
          phi_stmt_837_loopback_sample_req <-& (phi_stmt_837_loopback_sample_req_ps)
          phi_stmt_837_loopback_sample_req &-> ($null)
          $T[phi_stmt_837_entry_trigger] 
          phi_stmt_837_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_837_entry_sample_req] 
          $T[phi_stmt_837_entry_sample_req_ps] 
          phi_stmt_837_entry_sample_req <-& (phi_stmt_837_entry_sample_req_ps)
          phi_stmt_837_entry_sample_req &-> ($null)
          phi_stmt_837_update_start_ o<-& (phi_stmt_837_update_completed_ 0)
          phi_stmt_837_sample_start_ o<-& (phi_stmt_837_sample_completed_ 1)
          $T[phi_stmt_837_merged_reqs] 
          $T[phi_stmt_837_phi_mux_ack] 
          $T[phi_stmt_837_phi_mux_ack_ps] 
          phi_stmt_837_phi_mux_ack_ps <-& (phi_stmt_837_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_837_update_completed_)
          $T[R_ZERO_33_839_sample_start__ps] 
          $T[R_ZERO_33_839_sample_completed__ps] 
          $T[R_ZERO_33_839_update_start__ps] 
          $T[R_ZERO_33_839_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_839_sample_start_] 
          $T[R_ZERO_33_839_sample_completed_] 
          R_ZERO_33_839_sample_completed_ <-& (R_ZERO_33_839_sample_start_)
          $T[R_ZERO_33_839_update_start_] 
          $T [R_ZERO_33_839_update_completed_] $delay 
          R_ZERO_33_839_update_completed_ <-& (R_ZERO_33_839_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_839_sample_start_ <-& (R_ZERO_33_839_sample_start__ps)
          R_ZERO_33_839_update_start_ <-& (R_ZERO_33_839_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_839_sample_completed__ps <-& (R_ZERO_33_839_sample_completed_)
          R_ZERO_33_839_update_completed__ps <-& (R_ZERO_33_839_update_completed_)
          $T[RPIPE_noblock_obuf_4_2_841_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_841_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_2_841_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_841_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_2
          $T[RPIPE_noblock_obuf_4_2_841_sample_start_] 
          $T[RPIPE_noblock_obuf_4_2_841_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_2_841_update_start_] 
          $T[RPIPE_noblock_obuf_4_2_841_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_2_841 with guard R_read_from_4_840
          // root phi_stmt_837 not in visited_elements
          // root phi_stmt_842 not in visited_elements
          // root phi_stmt_846 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_2_841_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_2_841_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_2_841_sample_start_ &-> (RPIPE_noblock_obuf_4_2_841_Sample)
          RPIPE_noblock_obuf_4_2_841_sample_completed_ <-& (RPIPE_noblock_obuf_4_2_841_Sample)
          RPIPE_noblock_obuf_4_2_841_update_start_ <-& (RPIPE_noblock_obuf_4_2_841_sample_completed_)
          RPIPE_noblock_obuf_4_2_841_update_start_ &-> (RPIPE_noblock_obuf_4_2_841_Update)
          RPIPE_noblock_obuf_4_2_841_update_completed_ <-& (RPIPE_noblock_obuf_4_2_841_Update)
          RPIPE_noblock_obuf_4_2_841_sample_start_ o<-& (RPIPE_noblock_obuf_4_2_841_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_2_841_sample_start_ <-& (RPIPE_noblock_obuf_4_2_841_sample_start__ps)
          RPIPE_noblock_obuf_4_2_841_update_start_ <-& (RPIPE_noblock_obuf_4_2_841_update_start__ps)
          // RAW reenables for noblock_obuf_4_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_2_841_sample_completed__ps <-& (RPIPE_noblock_obuf_4_2_841_sample_completed_)
          RPIPE_noblock_obuf_4_2_841_update_completed__ps <-& (RPIPE_noblock_obuf_4_2_841_update_completed_)
          $phisequencer [ phi_stmt_837_phi_seq] : 
          phi_stmt_837_entry_trigger R_ZERO_33_839_sample_start__ps R_ZERO_33_839_sample_completed__ps R_ZERO_33_839_update_start__ps R_ZERO_33_839_update_completed__ps phi_stmt_837_loopback_trigger RPIPE_noblock_obuf_4_2_841_sample_start__ps RPIPE_noblock_obuf_4_2_841_sample_completed__ps RPIPE_noblock_obuf_4_2_841_update_start__ps RPIPE_noblock_obuf_4_2_841_update_completed__ps :
          phi_stmt_837_sample_start__ps phi_stmt_837_sample_completed__ps phi_stmt_837_update_start__ps phi_stmt_837_update_completed__ps :
          phi_stmt_837_entry_sample_req_ps phi_stmt_837_loopback_sample_req_ps : 
          phi_stmt_837_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_837
          // start:  PHI statement phi_stmt_842
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_842_sample_start_] 
          $T[phi_stmt_842_sample_completed_] 
          $T[phi_stmt_842_update_start_] 
          $T[phi_stmt_842_update_completed_] 
          $T[phi_stmt_842_sample_start__ps] 
          phi_stmt_842_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_842_sample_completed__ps] 
          phi_stmt_842_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_842_update_start__ps] 
          phi_stmt_842_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_842_update_completed__ps] 
          phi_stmt_842_update_completed_ <-& (phi_stmt_842_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_842_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_842_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_842_update_start_)
          $T[phi_stmt_842_loopback_trigger] 
          phi_stmt_842_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_842_loopback_sample_req] 
          $T[phi_stmt_842_loopback_sample_req_ps] 
          phi_stmt_842_loopback_sample_req <-& (phi_stmt_842_loopback_sample_req_ps)
          phi_stmt_842_loopback_sample_req &-> ($null)
          $T[phi_stmt_842_entry_trigger] 
          phi_stmt_842_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_842_entry_sample_req] 
          $T[phi_stmt_842_entry_sample_req_ps] 
          phi_stmt_842_entry_sample_req <-& (phi_stmt_842_entry_sample_req_ps)
          phi_stmt_842_entry_sample_req &-> ($null)
          phi_stmt_842_update_start_ o<-& (phi_stmt_842_update_completed_ 0)
          phi_stmt_842_sample_start_ o<-& (phi_stmt_842_sample_completed_ 1)
          $T[phi_stmt_842_merged_reqs] 
          $T[phi_stmt_842_phi_mux_ack] 
          $T[phi_stmt_842_phi_mux_ack_ps] 
          phi_stmt_842_phi_mux_ack_ps <-& (phi_stmt_842_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_842_update_completed_)
          $T[R_ZERO_3_844_sample_start__ps] 
          $T[R_ZERO_3_844_sample_completed__ps] 
          $T[R_ZERO_3_844_update_start__ps] 
          $T[R_ZERO_3_844_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_844_sample_start_] 
          $T[R_ZERO_3_844_sample_completed_] 
          R_ZERO_3_844_sample_completed_ <-& (R_ZERO_3_844_sample_start_)
          $T[R_ZERO_3_844_update_start_] 
          $T [R_ZERO_3_844_update_completed_] $delay 
          R_ZERO_3_844_update_completed_ <-& (R_ZERO_3_844_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_844_sample_start_ <-& (R_ZERO_3_844_sample_start__ps)
          R_ZERO_3_844_update_start_ <-& (R_ZERO_3_844_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_844_sample_completed__ps <-& (R_ZERO_3_844_sample_completed_)
          R_ZERO_3_844_update_completed__ps <-& (R_ZERO_3_844_update_completed_)
          $T[R_next_active_packet_845_sample_start__ps] 
          $T[R_next_active_packet_845_sample_completed__ps] 
          $T[R_next_active_packet_845_update_start__ps] 
          $T[R_next_active_packet_845_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_845_sample_start_] 
          $T[R_next_active_packet_845_sample_completed_] 
          $T[R_next_active_packet_845_update_start_] 
          $T[R_next_active_packet_845_update_completed_] 
          ;;[R_next_active_packet_845_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_845_sample_start_ &-> (R_next_active_packet_845_Sample)
          R_next_active_packet_845_sample_completed_ <-& (R_next_active_packet_845_Sample)
          ;;[R_next_active_packet_845_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_845_update_start_ &-> (R_next_active_packet_845_Update)
          R_next_active_packet_845_update_completed_ <-& (R_next_active_packet_845_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_845_sample_start_ <-& (R_next_active_packet_845_sample_start__ps)
          R_next_active_packet_845_update_start_ <-& (R_next_active_packet_845_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_845_sample_completed__ps <-& (R_next_active_packet_845_sample_completed_)
          R_next_active_packet_845_update_completed__ps <-& (R_next_active_packet_845_update_completed_)
          $phisequencer [ phi_stmt_842_phi_seq] : 
          phi_stmt_842_entry_trigger R_ZERO_3_844_sample_start__ps R_ZERO_3_844_sample_completed__ps R_ZERO_3_844_update_start__ps R_ZERO_3_844_update_completed__ps phi_stmt_842_loopback_trigger R_next_active_packet_845_sample_start__ps R_next_active_packet_845_sample_completed__ps R_next_active_packet_845_update_start__ps R_next_active_packet_845_update_completed__ps :
          phi_stmt_842_sample_start__ps phi_stmt_842_sample_completed__ps phi_stmt_842_update_start__ps phi_stmt_842_update_completed__ps :
          phi_stmt_842_entry_sample_req_ps phi_stmt_842_loopback_sample_req_ps : 
          phi_stmt_842_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_842
          // start:  PHI statement phi_stmt_846
          // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_846_sample_start_] 
          $T[phi_stmt_846_sample_completed_] 
          $T[phi_stmt_846_update_start_] 
          $T[phi_stmt_846_update_completed_] 
          $T[phi_stmt_846_sample_start__ps] 
          phi_stmt_846_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_846_sample_completed__ps] 
          phi_stmt_846_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_846_update_start__ps] 
          phi_stmt_846_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_846_update_completed__ps] 
          phi_stmt_846_update_completed_ <-& (phi_stmt_846_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_846_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_846_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_846_update_start_)
          $T[phi_stmt_846_loopback_trigger] 
          phi_stmt_846_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_846_loopback_sample_req] 
          $T[phi_stmt_846_loopback_sample_req_ps] 
          phi_stmt_846_loopback_sample_req <-& (phi_stmt_846_loopback_sample_req_ps)
          phi_stmt_846_loopback_sample_req &-> ($null)
          $T[phi_stmt_846_entry_trigger] 
          phi_stmt_846_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_846_entry_sample_req] 
          $T[phi_stmt_846_entry_sample_req_ps] 
          phi_stmt_846_entry_sample_req <-& (phi_stmt_846_entry_sample_req_ps)
          phi_stmt_846_entry_sample_req &-> ($null)
          phi_stmt_846_update_start_ o<-& (phi_stmt_846_update_completed_ 0)
          phi_stmt_846_sample_start_ o<-& (phi_stmt_846_sample_completed_ 1)
          $T[phi_stmt_846_merged_reqs] 
          $T[phi_stmt_846_phi_mux_ack] 
          $T[phi_stmt_846_phi_mux_ack_ps] 
          phi_stmt_846_phi_mux_ack_ps <-& (phi_stmt_846_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_846_update_completed_)
          $T[R_ONE_3_848_sample_start__ps] 
          $T[R_ONE_3_848_sample_completed__ps] 
          $T[R_ONE_3_848_update_start__ps] 
          $T[R_ONE_3_848_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ONE_3_848_sample_start_] 
          $T[R_ONE_3_848_sample_completed_] 
          R_ONE_3_848_sample_completed_ <-& (R_ONE_3_848_sample_start_)
          $T[R_ONE_3_848_update_start_] 
          $T [R_ONE_3_848_update_completed_] $delay 
          R_ONE_3_848_update_completed_ <-& (R_ONE_3_848_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ONE_3_848_sample_start_ <-& (R_ONE_3_848_sample_start__ps)
          R_ONE_3_848_update_start_ <-& (R_ONE_3_848_update_start__ps)
          // Phi complete dependency.
          R_ONE_3_848_sample_completed__ps <-& (R_ONE_3_848_sample_completed_)
          R_ONE_3_848_update_completed__ps <-& (R_ONE_3_848_update_completed_)
          $T[R_next_pkt_priority_849_sample_start__ps] 
          $T[R_next_pkt_priority_849_sample_completed__ps] 
          $T[R_next_pkt_priority_849_update_start__ps] 
          $T[R_next_pkt_priority_849_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_849_sample_start_] 
          $T[R_next_pkt_priority_849_sample_completed_] 
          $T[R_next_pkt_priority_849_update_start_] 
          $T[R_next_pkt_priority_849_update_completed_] 
          ;;[R_next_pkt_priority_849_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_849_sample_start_ &-> (R_next_pkt_priority_849_Sample)
          R_next_pkt_priority_849_sample_completed_ <-& (R_next_pkt_priority_849_Sample)
          ;;[R_next_pkt_priority_849_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_849_update_start_ &-> (R_next_pkt_priority_849_Update)
          R_next_pkt_priority_849_update_completed_ <-& (R_next_pkt_priority_849_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_849_sample_start_ <-& (R_next_pkt_priority_849_sample_start__ps)
          R_next_pkt_priority_849_update_start_ <-& (R_next_pkt_priority_849_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_849_sample_completed__ps <-& (R_next_pkt_priority_849_sample_completed_)
          R_next_pkt_priority_849_update_completed__ps <-& (R_next_pkt_priority_849_update_completed_)
          $phisequencer [ phi_stmt_846_phi_seq] : 
          phi_stmt_846_entry_trigger R_ONE_3_848_sample_start__ps R_ONE_3_848_sample_completed__ps R_ONE_3_848_update_start__ps R_ONE_3_848_update_completed__ps phi_stmt_846_loopback_trigger R_next_pkt_priority_849_sample_start__ps R_next_pkt_priority_849_sample_completed__ps R_next_pkt_priority_849_update_start__ps R_next_pkt_priority_849_update_completed__ps :
          phi_stmt_846_sample_start__ps phi_stmt_846_sample_completed__ps phi_stmt_846_update_start__ps phi_stmt_846_update_completed__ps :
          phi_stmt_846_entry_sample_req_ps phi_stmt_846_loopback_sample_req_ps : 
          phi_stmt_846_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_846
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 284
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 285
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 286
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 287
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 288
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 289
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 290
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 291
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 292
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 293
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 294
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 295
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 297
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 298
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 299
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_2
          $T[WPIPE_out_data_2_1036_sample_start_] 
          $T[WPIPE_out_data_2_1036_sample_completed_] 
          $T[WPIPE_out_data_2_1036_update_start_] 
          $T[WPIPE_out_data_2_1036_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_2_1036 with guard R_send_flag_1035
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_818_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_822_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_827_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_832_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_837_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_842_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_846_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_818_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_822_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_827_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_832_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_837_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_842_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_846_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          ;;[WPIPE_out_data_2_1036_Sample] 
          {
            // pipe write sample-start out_data_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_2_1036_Update] 
          {
            // pipe write update (complete) out_data_2
            $T [req] $T [ack] 
          }
          WPIPE_out_data_2_1036_sample_start_ &-> (WPIPE_out_data_2_1036_Sample)
          WPIPE_out_data_2_1036_sample_completed_ <-& (WPIPE_out_data_2_1036_Sample)
          WPIPE_out_data_2_1036_update_start_ <-& (WPIPE_out_data_2_1036_sample_completed_)
          WPIPE_out_data_2_1036_update_start_ &-> (WPIPE_out_data_2_1036_Update)
          WPIPE_out_data_2_1036_update_completed_ <-& (WPIPE_out_data_2_1036_Update)
          WPIPE_out_data_2_1036_sample_start_ o<-& (WPIPE_out_data_2_1036_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1036_sample_start_
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_818_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_822_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_827_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_832_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_837_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_842_update_completed_)
          WPIPE_out_data_2_1036_sample_start_ <-& (phi_stmt_846_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1036_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_818_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_822_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_827_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_832_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_837_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_842_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          phi_stmt_846_update_start_ o<-& (WPIPE_out_data_2_1036_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe out_data_2
          // read-dependencies for pipe out_data_2
          // write-dependencies for pipe out_data_2
          // signal write dependencies for out_data_2
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_816__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_816_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_816__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_816_loop_body : condition_evaluated
        $bind do_while_stmt_816__entry__  => do_while_stmt_816_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_816_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_816__exit__)
      }
      do_while_stmt_816__entry__ |-> (do_while_stmt_816)
      do_while_stmt_816__exit__ <-| (do_while_stmt_816)
      do_while_stmt_816__entry__ <-| (branch_block_stmt_815__entry__)
      do_while_stmt_816__exit__ |-> (branch_block_stmt_815__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 268
    // constant-object-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 264
    // constant-object-declarations for block %outputPort_2_Daemon
    //  file .Aa/switch2x2.opt.aa, line 259
    // constant-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 264
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 266
    // 1 
    $constant $W[konst_1040_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 268
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 269
    // ZERO_8
    $constant $W[R_ZERO_8_820_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 271
    // ZERO_33
    $constant $W[R_ZERO_33_824_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 273
    // ZERO_33
    $constant $W[R_ZERO_33_829_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 275
    // ZERO_33
    $constant $W[R_ZERO_33_834_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 277
    // ZERO_33
    $constant $W[R_ZERO_33_839_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 279
    // ZERO_3
    $constant $W[R_ZERO_3_844_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 281
    // ONE_3
    $constant $W[R_ONE_3_848_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_853_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_858_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_863_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_868_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_873_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_876_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_879_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_882_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_886_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_889_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_892_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_895_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 289
    // 0 
    $constant $W[konst_912_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_915_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_921_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_924_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_934_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_942_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_950_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_958_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_975_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_979_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_982_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_986_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_990_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_994_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_997_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1001_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1008_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1011_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1014_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1017_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1021_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1024_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1027_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1030_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 264
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 266
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 268
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 269
    $W[next_down_counter_929_821_buffered] : $int<8>
    // down_counter
    $W[down_counter_818] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 271
    // noblock_obuf_1_2
    $W[RPIPE_noblock_obuf_1_2_826_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_822] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 273
    // noblock_obuf_2_2
    $W[RPIPE_noblock_obuf_2_2_831_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_827] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 275
    // noblock_obuf_3_2
    $W[RPIPE_noblock_obuf_3_2_836_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_832] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 277
    // noblock_obuf_4_2
    $W[RPIPE_noblock_obuf_4_2_841_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_837] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 279
    $W[next_active_packet_909_845_buffered] : $int<3>
    // active_packet
    $W[active_packet_842] : $int<3>
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 281
    $W[next_pkt_priority_909_849_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_846] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 284
    // p1_valid
    $W[p1_valid_855] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 285
    // p2_valid
    $W[p2_valid_860] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 286
    // p3_valid
    $W[p3_valid_865] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 287
    // p4_valid
    $W[p4_valid_870] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 288
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_874_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_877_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_880_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_883_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_884_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_887_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_890_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_893_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_896_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_897_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_899] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 289
    // next_active_packet
    $W[next_active_packet_909] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_909] : $int<3>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 290
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_913_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_916_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_918] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 291
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_925_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_927_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_929] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 292
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_932_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_935_wire] : $int<1>
    // read_from_1
    $W[read_from_1_937] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 293
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_940_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_943_wire] : $int<1>
    // read_from_2
    $W[read_from_2_945] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 294
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_948_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_951_wire] : $int<1>
    // read_from_3
    $W[read_from_3_953] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 295
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_956_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_959_wire] : $int<1>
    // read_from_4
    $W[read_from_4_961] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 297
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_976_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_978_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_980_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_983_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_985_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_987_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_988_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_991_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_993_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_995_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_998_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1000_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1002_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1003_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1005] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 298
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1009_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1012_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1015_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1018_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1019_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1022_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1025_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1028_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1031_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1032_wire] : $int<1>
    // send_flag
    $W[send_flag_1034] : $int<1>
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 299
    // out_data_2
    // datapath-instances for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 264
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 266
    ==0? [do_while_stmt_816_branch] (konst_1040_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 268
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 269
    # := [next_down_counter_929_821_buf] (next_down_counter_929) (next_down_counter_929_821_buffered)     $fullrate
    $buffering $out next_down_counter_929_821_buf next_down_counter_929_821_buffered  1
    # $phi [phi_stmt_818] (R_ZERO_8_820_wire_constant next_down_counter_929_821_buffered) ( down_counter_818 ) $fullrate
    // $buffering  $out phi_stmt_818 down_counter_818 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 271
    // noblock_obuf_1_2
    $ioport $in [RPIPE_noblock_obuf_1_2_826_inst] (noblock_obuf_1_2) (RPIPE_noblock_obuf_1_2_826_wire) $guard ( read_from_1_937 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_2_826_inst RPIPE_noblock_obuf_1_2_826_wire 1
    # $phi [phi_stmt_822] (R_ZERO_33_824_wire_constant RPIPE_noblock_obuf_1_2_826_wire) ( pkt_1_e_word_822 ) $fullrate
    // $buffering  $out phi_stmt_822 pkt_1_e_word_822 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 273
    // noblock_obuf_2_2
    $ioport $in [RPIPE_noblock_obuf_2_2_831_inst] (noblock_obuf_2_2) (RPIPE_noblock_obuf_2_2_831_wire) $guard ( read_from_2_945 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_2_831_inst RPIPE_noblock_obuf_2_2_831_wire 1
    # $phi [phi_stmt_827] (R_ZERO_33_829_wire_constant RPIPE_noblock_obuf_2_2_831_wire) ( pkt_2_e_word_827 ) $fullrate
    // $buffering  $out phi_stmt_827 pkt_2_e_word_827 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 275
    // noblock_obuf_3_2
    $ioport $in [RPIPE_noblock_obuf_3_2_836_inst] (noblock_obuf_3_2) (RPIPE_noblock_obuf_3_2_836_wire) $guard ( read_from_3_953 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_2_836_inst RPIPE_noblock_obuf_3_2_836_wire 1
    # $phi [phi_stmt_832] (R_ZERO_33_834_wire_constant RPIPE_noblock_obuf_3_2_836_wire) ( pkt_3_e_word_832 ) $fullrate
    // $buffering  $out phi_stmt_832 pkt_3_e_word_832 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 277
    // noblock_obuf_4_2
    $ioport $in [RPIPE_noblock_obuf_4_2_841_inst] (noblock_obuf_4_2) (RPIPE_noblock_obuf_4_2_841_wire) $guard ( read_from_4_961 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_2_841_inst RPIPE_noblock_obuf_4_2_841_wire 1
    # $phi [phi_stmt_837] (R_ZERO_33_839_wire_constant RPIPE_noblock_obuf_4_2_841_wire) ( pkt_4_e_word_837 ) $fullrate
    // $buffering  $out phi_stmt_837 pkt_4_e_word_837 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 279
    # := [next_active_packet_909_845_buf] (next_active_packet_909) (next_active_packet_909_845_buffered)     $fullrate
    $buffering $out next_active_packet_909_845_buf next_active_packet_909_845_buffered  1
    # $phi [phi_stmt_842] (R_ZERO_3_844_wire_constant next_active_packet_909_845_buffered) ( active_packet_842 ) $fullrate
    // $buffering  $out phi_stmt_842 active_packet_842 2
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 281
    # := [next_pkt_priority_909_849_buf] (next_pkt_priority_909) (next_pkt_priority_909_849_buffered)     $fullrate
    $buffering $out next_pkt_priority_909_849_buf next_pkt_priority_909_849_buffered  1
    # $phi [phi_stmt_846] (R_ONE_3_848_wire_constant next_pkt_priority_909_849_buffered) ( pkt_priority_846 ) $fullrate
    // $buffering  $out phi_stmt_846 pkt_priority_846 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 284
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_854_inst] (pkt_1_e_word_822 konst_853_wire_constant) (p1_valid_855)   $flowthrough 
    $delay BITSEL_u33_u1_854_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 285
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_859_inst] (pkt_2_e_word_827 konst_858_wire_constant) (p2_valid_860)   $flowthrough 
    $delay BITSEL_u33_u1_859_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 286
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_864_inst] (pkt_3_e_word_832 konst_863_wire_constant) (p3_valid_865)   $flowthrough 
    $delay BITSEL_u33_u1_864_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 287
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_869_inst] (pkt_4_e_word_837 konst_868_wire_constant) (p4_valid_870)   $flowthrough 
    $delay BITSEL_u33_u1_869_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 288
    // (active_packet == 1 )
    ==[EQ_u3_u1_874_inst] (active_packet_842 konst_873_wire_constant) (EQ_u3_u1_874_wire)   $flowthrough 
    $delay EQ_u3_u1_874_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_877_inst] (EQ_u3_u1_874_wire p1_valid_855 konst_876_wire_constant) (MUX_877_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_880_inst] (active_packet_842 konst_879_wire_constant) (EQ_u3_u1_880_wire)   $flowthrough 
    $delay EQ_u3_u1_880_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_883_inst] (EQ_u3_u1_880_wire p2_valid_860 konst_882_wire_constant) (MUX_883_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_884_inst] (MUX_877_wire MUX_883_wire) (OR_u1_u1_884_wire)   $flowthrough 
    $delay OR_u1_u1_884_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_887_inst] (active_packet_842 konst_886_wire_constant) (EQ_u3_u1_887_wire)   $flowthrough 
    $delay EQ_u3_u1_887_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_890_inst] (EQ_u3_u1_887_wire p3_valid_865 konst_889_wire_constant) (MUX_890_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_893_inst] (active_packet_842 konst_892_wire_constant) (EQ_u3_u1_893_wire)   $flowthrough 
    $delay EQ_u3_u1_893_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_896_inst] (EQ_u3_u1_893_wire p4_valid_870 konst_895_wire_constant) (MUX_896_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_897_inst] (MUX_890_wire MUX_896_wire) (OR_u1_u1_897_wire)   $flowthrough 
    $delay OR_u1_u1_897_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_898_inst] (OR_u1_u1_884_wire OR_u1_u1_897_wire) (valid_active_pkt_word_read_899)   $flowthrough 
    $delay OR_u1_u1_898_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 289
    $call [call_stmt_909_call] $module prioritySelect(down_counter_818 active_packet_842 pkt_priority_846 p1_valid_855 p2_valid_860 p3_valid_865 p4_valid_870) (next_active_packet_909 next_pkt_priority_909)   $flowthrough $fullrate
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 290
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_913_inst] (next_active_packet_909 konst_912_wire_constant) (NEQ_u3_u1_913_wire)   $flowthrough 
    $delay NEQ_u3_u1_913_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_916_inst] (down_counter_818 konst_915_wire_constant) (EQ_u8_u1_916_wire)   $flowthrough 
    $delay EQ_u8_u1_916_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_917_inst] (NEQ_u3_u1_913_wire EQ_u8_u1_916_wire) (started_new_packet_918)   $flowthrough 
    $delay AND_u1_u1_917_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 291
    // (down_counter - 1 )
    -[SUB_u8_u8_925_inst] (down_counter_818 konst_924_wire_constant) (SUB_u8_u8_925_wire)   $flowthrough 
    $delay SUB_u8_u8_925_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_927_inst] (valid_active_pkt_word_read_899 SUB_u8_u8_925_wire down_counter_818) (MUX_927_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_928_inst] (started_new_packet_918 konst_921_wire_constant MUX_927_wire) (next_down_counter_929)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 292
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_932_inst] (p1_valid_855) (NOT_u1_u1_932_wire)   $flowthrough
    $delay NOT_u1_u1_932_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_935_inst] (next_active_packet_909 konst_934_wire_constant) (EQ_u3_u1_935_wire)   $flowthrough 
    $delay EQ_u3_u1_935_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_936_inst] (NOT_u1_u1_932_wire EQ_u3_u1_935_wire) (read_from_1_937)   $flowthrough 
    $delay OR_u1_u1_936_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 293
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_940_inst] (p2_valid_860) (NOT_u1_u1_940_wire)   $flowthrough
    $delay NOT_u1_u1_940_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_943_inst] (next_active_packet_909 konst_942_wire_constant) (EQ_u3_u1_943_wire)   $flowthrough 
    $delay EQ_u3_u1_943_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_944_inst] (NOT_u1_u1_940_wire EQ_u3_u1_943_wire) (read_from_2_945)   $flowthrough 
    $delay OR_u1_u1_944_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 294
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_948_inst] (p3_valid_865) (NOT_u1_u1_948_wire)   $flowthrough
    $delay NOT_u1_u1_948_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_951_inst] (next_active_packet_909 konst_950_wire_constant) (EQ_u3_u1_951_wire)   $flowthrough 
    $delay EQ_u3_u1_951_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_952_inst] (NOT_u1_u1_948_wire EQ_u3_u1_951_wire) (read_from_3_953)   $flowthrough 
    $delay OR_u1_u1_952_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 295
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_956_inst] (p4_valid_870) (NOT_u1_u1_956_wire)   $flowthrough
    $delay NOT_u1_u1_956_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_959_inst] (next_active_packet_909 konst_958_wire_constant) (EQ_u3_u1_959_wire)   $flowthrough 
    $delay EQ_u3_u1_959_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_960_inst] (NOT_u1_u1_956_wire EQ_u3_u1_959_wire) (read_from_4_961)   $flowthrough 
    $delay OR_u1_u1_960_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 297
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_976_inst] (next_active_packet_909 konst_975_wire_constant) (EQ_u3_u1_976_wire)   $flowthrough 
    $delay EQ_u3_u1_976_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_978_inst] (pkt_1_e_word_822 31 0) (slice_978_wire)  $flowthrough
    $delay slice_978_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_980_inst] (EQ_u3_u1_976_wire slice_978_wire konst_979_wire_constant) (MUX_980_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_983_inst] (next_active_packet_909 konst_982_wire_constant) (EQ_u3_u1_983_wire)   $flowthrough 
    $delay EQ_u3_u1_983_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_985_inst] (pkt_2_e_word_827 31 0) (slice_985_wire)  $flowthrough
    $delay slice_985_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_987_inst] (EQ_u3_u1_983_wire slice_985_wire konst_986_wire_constant) (MUX_987_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_988_inst] (MUX_980_wire MUX_987_wire) (OR_u32_u32_988_wire)   $flowthrough 
    $delay OR_u32_u32_988_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_991_inst] (next_active_packet_909 konst_990_wire_constant) (EQ_u3_u1_991_wire)   $flowthrough 
    $delay EQ_u3_u1_991_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_993_inst] (pkt_3_e_word_832 31 0) (slice_993_wire)  $flowthrough
    $delay slice_993_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_995_inst] (EQ_u3_u1_991_wire slice_993_wire konst_994_wire_constant) (MUX_995_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_998_inst] (next_active_packet_909 konst_997_wire_constant) (EQ_u3_u1_998_wire)   $flowthrough 
    $delay EQ_u3_u1_998_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1000_inst] (pkt_4_e_word_837 31 0) (slice_1000_wire)  $flowthrough
    $delay slice_1000_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1002_inst] (EQ_u3_u1_998_wire slice_1000_wire konst_1001_wire_constant) (MUX_1002_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1003_inst] (MUX_995_wire MUX_1002_wire) (OR_u32_u32_1003_wire)   $flowthrough 
    $delay OR_u32_u32_1003_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1004_inst] (OR_u32_u32_988_wire OR_u32_u32_1003_wire) (data_to_out_1005)   $flowthrough 
    $delay OR_u32_u32_1004_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 298
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1009_inst] (next_active_packet_909 konst_1008_wire_constant) (EQ_u3_u1_1009_wire)   $flowthrough 
    $delay EQ_u3_u1_1009_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1012_inst] (EQ_u3_u1_1009_wire p1_valid_855 konst_1011_wire_constant) (MUX_1012_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1015_inst] (next_active_packet_909 konst_1014_wire_constant) (EQ_u3_u1_1015_wire)   $flowthrough 
    $delay EQ_u3_u1_1015_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1018_inst] (EQ_u3_u1_1015_wire p2_valid_860 konst_1017_wire_constant) (MUX_1018_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1019_inst] (MUX_1012_wire MUX_1018_wire) (OR_u1_u1_1019_wire)   $flowthrough 
    $delay OR_u1_u1_1019_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1022_inst] (next_active_packet_909 konst_1021_wire_constant) (EQ_u3_u1_1022_wire)   $flowthrough 
    $delay EQ_u3_u1_1022_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1025_inst] (EQ_u3_u1_1022_wire p3_valid_865 konst_1024_wire_constant) (MUX_1025_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1028_inst] (next_active_packet_909 konst_1027_wire_constant) (EQ_u3_u1_1028_wire)   $flowthrough 
    $delay EQ_u3_u1_1028_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1031_inst] (EQ_u3_u1_1028_wire p4_valid_870 konst_1030_wire_constant) (MUX_1031_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1032_inst] (MUX_1025_wire MUX_1031_wire) (OR_u1_u1_1032_wire)   $flowthrough 
    $delay OR_u1_u1_1032_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1033_inst] (OR_u1_u1_1019_wire OR_u1_u1_1032_wire) (send_flag_1034)   $flowthrough 
    $delay OR_u1_u1_1033_inst 0
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 299
    // out_data_2
    $ioport $out [WPIPE_out_data_2_1036_inst]  (data_to_out_1005) (out_data_2) $guard ( send_flag_1034 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_816
  //  file .Aa/switch2x2.opt.aa, line 266
  phi_stmt_818 <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_818_entry_sample_req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_818_loopback_sample_req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_818_phi_mux_ack)
  next_down_counter_929_821_buf <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_down_counter_821_Sample/req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_down_counter_821_Update/req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_down_counter_821_Sample/ack branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_down_counter_821_Update/ack)
  phi_stmt_822 <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_822_entry_sample_req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_822_loopback_sample_req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_822_phi_mux_ack)
  // noblock_obuf_1_2
  RPIPE_noblock_obuf_1_2_826_inst <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_1_2_826_Sample/rr branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_1_2_826_Update/cr) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_1_2_826_Sample/ra branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_1_2_826_Update/ca)
  phi_stmt_827 <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_827_entry_sample_req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_827_loopback_sample_req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_827_phi_mux_ack)
  // noblock_obuf_2_2
  RPIPE_noblock_obuf_2_2_831_inst <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_2_2_831_Sample/rr branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_2_2_831_Update/cr) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_2_2_831_Sample/ra branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_2_2_831_Update/ca)
  phi_stmt_832 <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_832_entry_sample_req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_832_loopback_sample_req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_832_phi_mux_ack)
  // noblock_obuf_3_2
  RPIPE_noblock_obuf_3_2_836_inst <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_3_2_836_Sample/rr branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_3_2_836_Update/cr) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_3_2_836_Sample/ra branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_3_2_836_Update/ca)
  phi_stmt_837 <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_837_entry_sample_req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_837_loopback_sample_req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_837_phi_mux_ack)
  // noblock_obuf_4_2
  RPIPE_noblock_obuf_4_2_841_inst <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_4_2_841_Sample/rr branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_4_2_841_Update/cr) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_4_2_841_Sample/ra branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/RPIPE_noblock_obuf_4_2_841_Update/ca)
  phi_stmt_842 <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_842_entry_sample_req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_842_loopback_sample_req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_842_phi_mux_ack)
  next_active_packet_909_845_buf <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_active_packet_845_Sample/req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_active_packet_845_Update/req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_active_packet_845_Sample/ack branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_active_packet_845_Update/ack)
  phi_stmt_846 <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_846_entry_sample_req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_846_loopback_sample_req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/phi_stmt_846_phi_mux_ack)
  next_pkt_priority_909_849_buf <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_pkt_priority_849_Sample/req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_pkt_priority_849_Update/req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_pkt_priority_849_Sample/ack branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/R_next_pkt_priority_849_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 284
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 285
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 286
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 287
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 288
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 289
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 290
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 291
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 292
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 293
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 294
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 295
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 297
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 298
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 299
  // data_to_out
  // out_data_2
  WPIPE_out_data_2_1036_inst <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/WPIPE_out_data_2_1036_Sample/req branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/WPIPE_out_data_2_1036_Update/req) (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/WPIPE_out_data_2_1036_Sample/ack branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/WPIPE_out_data_2_1036_Update/ack)
  do_while_stmt_816_branch <=> (branch_block_stmt_815/do_while_stmt_816/do_while_stmt_816_loop_body/condition_evaluated) (branch_block_stmt_815/do_while_stmt_816/loop_exit/ack branch_block_stmt_815/do_while_stmt_816/loop_taken/ack)
}
$module [outputPort_3_Daemon] 
{
  // pipe-declarations for block %outputPort_3_Daemon
  //  file .Aa/switch2x2.opt.aa, line 303
  // pipe-declarations for block %outputPort_3_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 308
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1044] // Branch Block  file .Aa/switch2x2.opt.aa, line 308
    {
      $P [branch_block_stmt_1044__entry__]
      branch_block_stmt_1044__entry__ <-| ($entry)
      $P [branch_block_stmt_1044__exit__]
      branch_block_stmt_1044__exit__ |-> ($exit)
      $P [do_while_stmt_1045__entry__] 
      $P [do_while_stmt_1045__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 310
      <o> [do_while_stmt_1045]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1045__entry__] 
        $P[do_while_stmt_1045__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1045_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1047
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1047_sample_start_] 
          $T[phi_stmt_1047_sample_completed_] 
          $T[phi_stmt_1047_update_start_] 
          $T[phi_stmt_1047_update_completed_] 
          $T[phi_stmt_1047_sample_start__ps] 
          phi_stmt_1047_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1047_sample_completed__ps] 
          phi_stmt_1047_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1047_update_start__ps] 
          phi_stmt_1047_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1047_update_completed__ps] 
          phi_stmt_1047_update_completed_ <-& (phi_stmt_1047_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1047_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1047_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1047_update_start_)
          $T[phi_stmt_1047_loopback_trigger] 
          phi_stmt_1047_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1047_loopback_sample_req] 
          $T[phi_stmt_1047_loopback_sample_req_ps] 
          phi_stmt_1047_loopback_sample_req <-& (phi_stmt_1047_loopback_sample_req_ps)
          phi_stmt_1047_loopback_sample_req &-> ($null)
          $T[phi_stmt_1047_entry_trigger] 
          phi_stmt_1047_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1047_entry_sample_req] 
          $T[phi_stmt_1047_entry_sample_req_ps] 
          phi_stmt_1047_entry_sample_req <-& (phi_stmt_1047_entry_sample_req_ps)
          phi_stmt_1047_entry_sample_req &-> ($null)
          phi_stmt_1047_update_start_ o<-& (phi_stmt_1047_update_completed_ 0)
          phi_stmt_1047_sample_start_ o<-& (phi_stmt_1047_sample_completed_ 1)
          $T[phi_stmt_1047_merged_reqs] 
          $T[phi_stmt_1047_phi_mux_ack] 
          $T[phi_stmt_1047_phi_mux_ack_ps] 
          phi_stmt_1047_phi_mux_ack_ps <-& (phi_stmt_1047_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1047_update_completed_)
          $T[R_ZERO_8_1049_sample_start__ps] 
          $T[R_ZERO_8_1049_sample_completed__ps] 
          $T[R_ZERO_8_1049_update_start__ps] 
          $T[R_ZERO_8_1049_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1049_sample_start_] 
          $T[R_ZERO_8_1049_sample_completed_] 
          R_ZERO_8_1049_sample_completed_ <-& (R_ZERO_8_1049_sample_start_)
          $T[R_ZERO_8_1049_update_start_] 
          $T [R_ZERO_8_1049_update_completed_] $delay 
          R_ZERO_8_1049_update_completed_ <-& (R_ZERO_8_1049_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1049_sample_start_ <-& (R_ZERO_8_1049_sample_start__ps)
          R_ZERO_8_1049_update_start_ <-& (R_ZERO_8_1049_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1049_sample_completed__ps <-& (R_ZERO_8_1049_sample_completed_)
          R_ZERO_8_1049_update_completed__ps <-& (R_ZERO_8_1049_update_completed_)
          $T[R_next_down_counter_1050_sample_start__ps] 
          $T[R_next_down_counter_1050_sample_completed__ps] 
          $T[R_next_down_counter_1050_update_start__ps] 
          $T[R_next_down_counter_1050_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1050_sample_start_] 
          $T[R_next_down_counter_1050_sample_completed_] 
          $T[R_next_down_counter_1050_update_start_] 
          $T[R_next_down_counter_1050_update_completed_] 
          ;;[R_next_down_counter_1050_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1050_sample_start_ &-> (R_next_down_counter_1050_Sample)
          R_next_down_counter_1050_sample_completed_ <-& (R_next_down_counter_1050_Sample)
          ;;[R_next_down_counter_1050_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1050_update_start_ &-> (R_next_down_counter_1050_Update)
          R_next_down_counter_1050_update_completed_ <-& (R_next_down_counter_1050_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1050_sample_start_ <-& (R_next_down_counter_1050_sample_start__ps)
          R_next_down_counter_1050_update_start_ <-& (R_next_down_counter_1050_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1050_sample_completed__ps <-& (R_next_down_counter_1050_sample_completed_)
          R_next_down_counter_1050_update_completed__ps <-& (R_next_down_counter_1050_update_completed_)
          $phisequencer [ phi_stmt_1047_phi_seq] : 
          phi_stmt_1047_entry_trigger R_ZERO_8_1049_sample_start__ps R_ZERO_8_1049_sample_completed__ps R_ZERO_8_1049_update_start__ps R_ZERO_8_1049_update_completed__ps phi_stmt_1047_loopback_trigger R_next_down_counter_1050_sample_start__ps R_next_down_counter_1050_sample_completed__ps R_next_down_counter_1050_update_start__ps R_next_down_counter_1050_update_completed__ps :
          phi_stmt_1047_sample_start__ps phi_stmt_1047_sample_completed__ps phi_stmt_1047_update_start__ps phi_stmt_1047_update_completed__ps :
          phi_stmt_1047_entry_sample_req_ps phi_stmt_1047_loopback_sample_req_ps : 
          phi_stmt_1047_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1047
          // start:  PHI statement phi_stmt_1051
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1051_sample_start_] 
          $T[phi_stmt_1051_sample_completed_] 
          $T[phi_stmt_1051_update_start_] 
          $T[phi_stmt_1051_update_completed_] 
          $T[phi_stmt_1051_sample_start__ps] 
          phi_stmt_1051_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1051_sample_completed__ps] 
          phi_stmt_1051_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1051_update_start__ps] 
          phi_stmt_1051_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1051_update_completed__ps] 
          phi_stmt_1051_update_completed_ <-& (phi_stmt_1051_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1051_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1051_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1051_update_start_)
          $T[phi_stmt_1051_loopback_trigger] 
          phi_stmt_1051_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1051_loopback_sample_req] 
          $T[phi_stmt_1051_loopback_sample_req_ps] 
          phi_stmt_1051_loopback_sample_req <-& (phi_stmt_1051_loopback_sample_req_ps)
          phi_stmt_1051_loopback_sample_req &-> ($null)
          $T[phi_stmt_1051_entry_trigger] 
          phi_stmt_1051_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1051_entry_sample_req] 
          $T[phi_stmt_1051_entry_sample_req_ps] 
          phi_stmt_1051_entry_sample_req <-& (phi_stmt_1051_entry_sample_req_ps)
          phi_stmt_1051_entry_sample_req &-> ($null)
          phi_stmt_1051_update_start_ o<-& (phi_stmt_1051_update_completed_ 0)
          phi_stmt_1051_sample_start_ o<-& (phi_stmt_1051_sample_completed_ 1)
          $T[phi_stmt_1051_merged_reqs] 
          $T[phi_stmt_1051_phi_mux_ack] 
          $T[phi_stmt_1051_phi_mux_ack_ps] 
          phi_stmt_1051_phi_mux_ack_ps <-& (phi_stmt_1051_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1051_update_completed_)
          $T[R_ZERO_33_1053_sample_start__ps] 
          $T[R_ZERO_33_1053_sample_completed__ps] 
          $T[R_ZERO_33_1053_update_start__ps] 
          $T[R_ZERO_33_1053_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1053_sample_start_] 
          $T[R_ZERO_33_1053_sample_completed_] 
          R_ZERO_33_1053_sample_completed_ <-& (R_ZERO_33_1053_sample_start_)
          $T[R_ZERO_33_1053_update_start_] 
          $T [R_ZERO_33_1053_update_completed_] $delay 
          R_ZERO_33_1053_update_completed_ <-& (R_ZERO_33_1053_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1053_sample_start_ <-& (R_ZERO_33_1053_sample_start__ps)
          R_ZERO_33_1053_update_start_ <-& (R_ZERO_33_1053_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1053_sample_completed__ps <-& (R_ZERO_33_1053_sample_completed_)
          R_ZERO_33_1053_update_completed__ps <-& (R_ZERO_33_1053_update_completed_)
          $T[RPIPE_noblock_obuf_1_3_1055_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1055_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_3_1055_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1055_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_3
          $T[RPIPE_noblock_obuf_1_3_1055_sample_start_] 
          $T[RPIPE_noblock_obuf_1_3_1055_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_3_1055_update_start_] 
          $T[RPIPE_noblock_obuf_1_3_1055_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_3_1055 with guard R_read_from_1_1054
          // root phi_stmt_1051 not in visited_elements
          // root phi_stmt_1056 not in visited_elements
          // root phi_stmt_1061 not in visited_elements
          // root phi_stmt_1066 not in visited_elements
          // root phi_stmt_1071 not in visited_elements
          // root phi_stmt_1075 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_3_1055_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_3_1055_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_3_1055_sample_start_ &-> (RPIPE_noblock_obuf_1_3_1055_Sample)
          RPIPE_noblock_obuf_1_3_1055_sample_completed_ <-& (RPIPE_noblock_obuf_1_3_1055_Sample)
          RPIPE_noblock_obuf_1_3_1055_update_start_ <-& (RPIPE_noblock_obuf_1_3_1055_sample_completed_)
          RPIPE_noblock_obuf_1_3_1055_update_start_ &-> (RPIPE_noblock_obuf_1_3_1055_Update)
          RPIPE_noblock_obuf_1_3_1055_update_completed_ <-& (RPIPE_noblock_obuf_1_3_1055_Update)
          RPIPE_noblock_obuf_1_3_1055_sample_start_ o<-& (RPIPE_noblock_obuf_1_3_1055_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_3_1055_sample_start_ <-& (RPIPE_noblock_obuf_1_3_1055_sample_start__ps)
          RPIPE_noblock_obuf_1_3_1055_update_start_ <-& (RPIPE_noblock_obuf_1_3_1055_update_start__ps)
          // RAW reenables for noblock_obuf_1_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_3_1055_sample_completed__ps <-& (RPIPE_noblock_obuf_1_3_1055_sample_completed_)
          RPIPE_noblock_obuf_1_3_1055_update_completed__ps <-& (RPIPE_noblock_obuf_1_3_1055_update_completed_)
          $phisequencer [ phi_stmt_1051_phi_seq] : 
          phi_stmt_1051_entry_trigger R_ZERO_33_1053_sample_start__ps R_ZERO_33_1053_sample_completed__ps R_ZERO_33_1053_update_start__ps R_ZERO_33_1053_update_completed__ps phi_stmt_1051_loopback_trigger RPIPE_noblock_obuf_1_3_1055_sample_start__ps RPIPE_noblock_obuf_1_3_1055_sample_completed__ps RPIPE_noblock_obuf_1_3_1055_update_start__ps RPIPE_noblock_obuf_1_3_1055_update_completed__ps :
          phi_stmt_1051_sample_start__ps phi_stmt_1051_sample_completed__ps phi_stmt_1051_update_start__ps phi_stmt_1051_update_completed__ps :
          phi_stmt_1051_entry_sample_req_ps phi_stmt_1051_loopback_sample_req_ps : 
          phi_stmt_1051_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1051
          // start:  PHI statement phi_stmt_1056
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1056_sample_start_] 
          $T[phi_stmt_1056_sample_completed_] 
          $T[phi_stmt_1056_update_start_] 
          $T[phi_stmt_1056_update_completed_] 
          $T[phi_stmt_1056_sample_start__ps] 
          phi_stmt_1056_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1056_sample_completed__ps] 
          phi_stmt_1056_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1056_update_start__ps] 
          phi_stmt_1056_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1056_update_completed__ps] 
          phi_stmt_1056_update_completed_ <-& (phi_stmt_1056_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1056_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1056_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1056_update_start_)
          $T[phi_stmt_1056_loopback_trigger] 
          phi_stmt_1056_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1056_loopback_sample_req] 
          $T[phi_stmt_1056_loopback_sample_req_ps] 
          phi_stmt_1056_loopback_sample_req <-& (phi_stmt_1056_loopback_sample_req_ps)
          phi_stmt_1056_loopback_sample_req &-> ($null)
          $T[phi_stmt_1056_entry_trigger] 
          phi_stmt_1056_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1056_entry_sample_req] 
          $T[phi_stmt_1056_entry_sample_req_ps] 
          phi_stmt_1056_entry_sample_req <-& (phi_stmt_1056_entry_sample_req_ps)
          phi_stmt_1056_entry_sample_req &-> ($null)
          phi_stmt_1056_update_start_ o<-& (phi_stmt_1056_update_completed_ 0)
          phi_stmt_1056_sample_start_ o<-& (phi_stmt_1056_sample_completed_ 1)
          $T[phi_stmt_1056_merged_reqs] 
          $T[phi_stmt_1056_phi_mux_ack] 
          $T[phi_stmt_1056_phi_mux_ack_ps] 
          phi_stmt_1056_phi_mux_ack_ps <-& (phi_stmt_1056_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1056_update_completed_)
          $T[R_ZERO_33_1058_sample_start__ps] 
          $T[R_ZERO_33_1058_sample_completed__ps] 
          $T[R_ZERO_33_1058_update_start__ps] 
          $T[R_ZERO_33_1058_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1058_sample_start_] 
          $T[R_ZERO_33_1058_sample_completed_] 
          R_ZERO_33_1058_sample_completed_ <-& (R_ZERO_33_1058_sample_start_)
          $T[R_ZERO_33_1058_update_start_] 
          $T [R_ZERO_33_1058_update_completed_] $delay 
          R_ZERO_33_1058_update_completed_ <-& (R_ZERO_33_1058_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1058_sample_start_ <-& (R_ZERO_33_1058_sample_start__ps)
          R_ZERO_33_1058_update_start_ <-& (R_ZERO_33_1058_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1058_sample_completed__ps <-& (R_ZERO_33_1058_sample_completed_)
          R_ZERO_33_1058_update_completed__ps <-& (R_ZERO_33_1058_update_completed_)
          $T[RPIPE_noblock_obuf_2_3_1060_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1060_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_3_1060_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1060_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_3
          $T[RPIPE_noblock_obuf_2_3_1060_sample_start_] 
          $T[RPIPE_noblock_obuf_2_3_1060_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_3_1060_update_start_] 
          $T[RPIPE_noblock_obuf_2_3_1060_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_3_1060 with guard R_read_from_2_1059
          // root phi_stmt_1056 not in visited_elements
          // root phi_stmt_1061 not in visited_elements
          // root phi_stmt_1066 not in visited_elements
          // root phi_stmt_1071 not in visited_elements
          // root phi_stmt_1075 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_3_1060_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_3_1060_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_3_1060_sample_start_ &-> (RPIPE_noblock_obuf_2_3_1060_Sample)
          RPIPE_noblock_obuf_2_3_1060_sample_completed_ <-& (RPIPE_noblock_obuf_2_3_1060_Sample)
          RPIPE_noblock_obuf_2_3_1060_update_start_ <-& (RPIPE_noblock_obuf_2_3_1060_sample_completed_)
          RPIPE_noblock_obuf_2_3_1060_update_start_ &-> (RPIPE_noblock_obuf_2_3_1060_Update)
          RPIPE_noblock_obuf_2_3_1060_update_completed_ <-& (RPIPE_noblock_obuf_2_3_1060_Update)
          RPIPE_noblock_obuf_2_3_1060_sample_start_ o<-& (RPIPE_noblock_obuf_2_3_1060_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_3_1060_sample_start_ <-& (RPIPE_noblock_obuf_2_3_1060_sample_start__ps)
          RPIPE_noblock_obuf_2_3_1060_update_start_ <-& (RPIPE_noblock_obuf_2_3_1060_update_start__ps)
          // RAW reenables for noblock_obuf_2_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_3_1060_sample_completed__ps <-& (RPIPE_noblock_obuf_2_3_1060_sample_completed_)
          RPIPE_noblock_obuf_2_3_1060_update_completed__ps <-& (RPIPE_noblock_obuf_2_3_1060_update_completed_)
          $phisequencer [ phi_stmt_1056_phi_seq] : 
          phi_stmt_1056_entry_trigger R_ZERO_33_1058_sample_start__ps R_ZERO_33_1058_sample_completed__ps R_ZERO_33_1058_update_start__ps R_ZERO_33_1058_update_completed__ps phi_stmt_1056_loopback_trigger RPIPE_noblock_obuf_2_3_1060_sample_start__ps RPIPE_noblock_obuf_2_3_1060_sample_completed__ps RPIPE_noblock_obuf_2_3_1060_update_start__ps RPIPE_noblock_obuf_2_3_1060_update_completed__ps :
          phi_stmt_1056_sample_start__ps phi_stmt_1056_sample_completed__ps phi_stmt_1056_update_start__ps phi_stmt_1056_update_completed__ps :
          phi_stmt_1056_entry_sample_req_ps phi_stmt_1056_loopback_sample_req_ps : 
          phi_stmt_1056_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1056
          // start:  PHI statement phi_stmt_1061
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1061_sample_start_] 
          $T[phi_stmt_1061_sample_completed_] 
          $T[phi_stmt_1061_update_start_] 
          $T[phi_stmt_1061_update_completed_] 
          $T[phi_stmt_1061_sample_start__ps] 
          phi_stmt_1061_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1061_sample_completed__ps] 
          phi_stmt_1061_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1061_update_start__ps] 
          phi_stmt_1061_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1061_update_completed__ps] 
          phi_stmt_1061_update_completed_ <-& (phi_stmt_1061_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1061_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1061_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1061_update_start_)
          $T[phi_stmt_1061_loopback_trigger] 
          phi_stmt_1061_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1061_loopback_sample_req] 
          $T[phi_stmt_1061_loopback_sample_req_ps] 
          phi_stmt_1061_loopback_sample_req <-& (phi_stmt_1061_loopback_sample_req_ps)
          phi_stmt_1061_loopback_sample_req &-> ($null)
          $T[phi_stmt_1061_entry_trigger] 
          phi_stmt_1061_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1061_entry_sample_req] 
          $T[phi_stmt_1061_entry_sample_req_ps] 
          phi_stmt_1061_entry_sample_req <-& (phi_stmt_1061_entry_sample_req_ps)
          phi_stmt_1061_entry_sample_req &-> ($null)
          phi_stmt_1061_update_start_ o<-& (phi_stmt_1061_update_completed_ 0)
          phi_stmt_1061_sample_start_ o<-& (phi_stmt_1061_sample_completed_ 1)
          $T[phi_stmt_1061_merged_reqs] 
          $T[phi_stmt_1061_phi_mux_ack] 
          $T[phi_stmt_1061_phi_mux_ack_ps] 
          phi_stmt_1061_phi_mux_ack_ps <-& (phi_stmt_1061_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1061_update_completed_)
          $T[R_ZERO_33_1063_sample_start__ps] 
          $T[R_ZERO_33_1063_sample_completed__ps] 
          $T[R_ZERO_33_1063_update_start__ps] 
          $T[R_ZERO_33_1063_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1063_sample_start_] 
          $T[R_ZERO_33_1063_sample_completed_] 
          R_ZERO_33_1063_sample_completed_ <-& (R_ZERO_33_1063_sample_start_)
          $T[R_ZERO_33_1063_update_start_] 
          $T [R_ZERO_33_1063_update_completed_] $delay 
          R_ZERO_33_1063_update_completed_ <-& (R_ZERO_33_1063_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1063_sample_start_ <-& (R_ZERO_33_1063_sample_start__ps)
          R_ZERO_33_1063_update_start_ <-& (R_ZERO_33_1063_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1063_sample_completed__ps <-& (R_ZERO_33_1063_sample_completed_)
          R_ZERO_33_1063_update_completed__ps <-& (R_ZERO_33_1063_update_completed_)
          $T[RPIPE_noblock_obuf_3_3_1065_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1065_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_3_1065_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1065_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_3
          $T[RPIPE_noblock_obuf_3_3_1065_sample_start_] 
          $T[RPIPE_noblock_obuf_3_3_1065_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_3_1065_update_start_] 
          $T[RPIPE_noblock_obuf_3_3_1065_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_3_1065 with guard R_read_from_3_1064
          // root phi_stmt_1061 not in visited_elements
          // root phi_stmt_1066 not in visited_elements
          // root phi_stmt_1071 not in visited_elements
          // root phi_stmt_1075 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_3_1065_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_3_1065_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_3_1065_sample_start_ &-> (RPIPE_noblock_obuf_3_3_1065_Sample)
          RPIPE_noblock_obuf_3_3_1065_sample_completed_ <-& (RPIPE_noblock_obuf_3_3_1065_Sample)
          RPIPE_noblock_obuf_3_3_1065_update_start_ <-& (RPIPE_noblock_obuf_3_3_1065_sample_completed_)
          RPIPE_noblock_obuf_3_3_1065_update_start_ &-> (RPIPE_noblock_obuf_3_3_1065_Update)
          RPIPE_noblock_obuf_3_3_1065_update_completed_ <-& (RPIPE_noblock_obuf_3_3_1065_Update)
          RPIPE_noblock_obuf_3_3_1065_sample_start_ o<-& (RPIPE_noblock_obuf_3_3_1065_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_3_1065_sample_start_ <-& (RPIPE_noblock_obuf_3_3_1065_sample_start__ps)
          RPIPE_noblock_obuf_3_3_1065_update_start_ <-& (RPIPE_noblock_obuf_3_3_1065_update_start__ps)
          // RAW reenables for noblock_obuf_3_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_3_1065_sample_completed__ps <-& (RPIPE_noblock_obuf_3_3_1065_sample_completed_)
          RPIPE_noblock_obuf_3_3_1065_update_completed__ps <-& (RPIPE_noblock_obuf_3_3_1065_update_completed_)
          $phisequencer [ phi_stmt_1061_phi_seq] : 
          phi_stmt_1061_entry_trigger R_ZERO_33_1063_sample_start__ps R_ZERO_33_1063_sample_completed__ps R_ZERO_33_1063_update_start__ps R_ZERO_33_1063_update_completed__ps phi_stmt_1061_loopback_trigger RPIPE_noblock_obuf_3_3_1065_sample_start__ps RPIPE_noblock_obuf_3_3_1065_sample_completed__ps RPIPE_noblock_obuf_3_3_1065_update_start__ps RPIPE_noblock_obuf_3_3_1065_update_completed__ps :
          phi_stmt_1061_sample_start__ps phi_stmt_1061_sample_completed__ps phi_stmt_1061_update_start__ps phi_stmt_1061_update_completed__ps :
          phi_stmt_1061_entry_sample_req_ps phi_stmt_1061_loopback_sample_req_ps : 
          phi_stmt_1061_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1061
          // start:  PHI statement phi_stmt_1066
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1066_sample_start_] 
          $T[phi_stmt_1066_sample_completed_] 
          $T[phi_stmt_1066_update_start_] 
          $T[phi_stmt_1066_update_completed_] 
          $T[phi_stmt_1066_sample_start__ps] 
          phi_stmt_1066_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1066_sample_completed__ps] 
          phi_stmt_1066_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1066_update_start__ps] 
          phi_stmt_1066_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1066_update_completed__ps] 
          phi_stmt_1066_update_completed_ <-& (phi_stmt_1066_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1066_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1066_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1066_update_start_)
          $T[phi_stmt_1066_loopback_trigger] 
          phi_stmt_1066_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1066_loopback_sample_req] 
          $T[phi_stmt_1066_loopback_sample_req_ps] 
          phi_stmt_1066_loopback_sample_req <-& (phi_stmt_1066_loopback_sample_req_ps)
          phi_stmt_1066_loopback_sample_req &-> ($null)
          $T[phi_stmt_1066_entry_trigger] 
          phi_stmt_1066_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1066_entry_sample_req] 
          $T[phi_stmt_1066_entry_sample_req_ps] 
          phi_stmt_1066_entry_sample_req <-& (phi_stmt_1066_entry_sample_req_ps)
          phi_stmt_1066_entry_sample_req &-> ($null)
          phi_stmt_1066_update_start_ o<-& (phi_stmt_1066_update_completed_ 0)
          phi_stmt_1066_sample_start_ o<-& (phi_stmt_1066_sample_completed_ 1)
          $T[phi_stmt_1066_merged_reqs] 
          $T[phi_stmt_1066_phi_mux_ack] 
          $T[phi_stmt_1066_phi_mux_ack_ps] 
          phi_stmt_1066_phi_mux_ack_ps <-& (phi_stmt_1066_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1066_update_completed_)
          $T[R_ZERO_33_1068_sample_start__ps] 
          $T[R_ZERO_33_1068_sample_completed__ps] 
          $T[R_ZERO_33_1068_update_start__ps] 
          $T[R_ZERO_33_1068_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1068_sample_start_] 
          $T[R_ZERO_33_1068_sample_completed_] 
          R_ZERO_33_1068_sample_completed_ <-& (R_ZERO_33_1068_sample_start_)
          $T[R_ZERO_33_1068_update_start_] 
          $T [R_ZERO_33_1068_update_completed_] $delay 
          R_ZERO_33_1068_update_completed_ <-& (R_ZERO_33_1068_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1068_sample_start_ <-& (R_ZERO_33_1068_sample_start__ps)
          R_ZERO_33_1068_update_start_ <-& (R_ZERO_33_1068_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1068_sample_completed__ps <-& (R_ZERO_33_1068_sample_completed_)
          R_ZERO_33_1068_update_completed__ps <-& (R_ZERO_33_1068_update_completed_)
          $T[RPIPE_noblock_obuf_4_3_1070_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1070_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_3_1070_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1070_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_3
          $T[RPIPE_noblock_obuf_4_3_1070_sample_start_] 
          $T[RPIPE_noblock_obuf_4_3_1070_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_3_1070_update_start_] 
          $T[RPIPE_noblock_obuf_4_3_1070_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_3_1070 with guard R_read_from_4_1069
          // root phi_stmt_1066 not in visited_elements
          // root phi_stmt_1071 not in visited_elements
          // root phi_stmt_1075 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_3_1070_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_3_1070_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_3_1070_sample_start_ &-> (RPIPE_noblock_obuf_4_3_1070_Sample)
          RPIPE_noblock_obuf_4_3_1070_sample_completed_ <-& (RPIPE_noblock_obuf_4_3_1070_Sample)
          RPIPE_noblock_obuf_4_3_1070_update_start_ <-& (RPIPE_noblock_obuf_4_3_1070_sample_completed_)
          RPIPE_noblock_obuf_4_3_1070_update_start_ &-> (RPIPE_noblock_obuf_4_3_1070_Update)
          RPIPE_noblock_obuf_4_3_1070_update_completed_ <-& (RPIPE_noblock_obuf_4_3_1070_Update)
          RPIPE_noblock_obuf_4_3_1070_sample_start_ o<-& (RPIPE_noblock_obuf_4_3_1070_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_3_1070_sample_start_ <-& (RPIPE_noblock_obuf_4_3_1070_sample_start__ps)
          RPIPE_noblock_obuf_4_3_1070_update_start_ <-& (RPIPE_noblock_obuf_4_3_1070_update_start__ps)
          // RAW reenables for noblock_obuf_4_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_3_1070_sample_completed__ps <-& (RPIPE_noblock_obuf_4_3_1070_sample_completed_)
          RPIPE_noblock_obuf_4_3_1070_update_completed__ps <-& (RPIPE_noblock_obuf_4_3_1070_update_completed_)
          $phisequencer [ phi_stmt_1066_phi_seq] : 
          phi_stmt_1066_entry_trigger R_ZERO_33_1068_sample_start__ps R_ZERO_33_1068_sample_completed__ps R_ZERO_33_1068_update_start__ps R_ZERO_33_1068_update_completed__ps phi_stmt_1066_loopback_trigger RPIPE_noblock_obuf_4_3_1070_sample_start__ps RPIPE_noblock_obuf_4_3_1070_sample_completed__ps RPIPE_noblock_obuf_4_3_1070_update_start__ps RPIPE_noblock_obuf_4_3_1070_update_completed__ps :
          phi_stmt_1066_sample_start__ps phi_stmt_1066_sample_completed__ps phi_stmt_1066_update_start__ps phi_stmt_1066_update_completed__ps :
          phi_stmt_1066_entry_sample_req_ps phi_stmt_1066_loopback_sample_req_ps : 
          phi_stmt_1066_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1066
          // start:  PHI statement phi_stmt_1071
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1071_sample_start_] 
          $T[phi_stmt_1071_sample_completed_] 
          $T[phi_stmt_1071_update_start_] 
          $T[phi_stmt_1071_update_completed_] 
          $T[phi_stmt_1071_sample_start__ps] 
          phi_stmt_1071_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1071_sample_completed__ps] 
          phi_stmt_1071_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1071_update_start__ps] 
          phi_stmt_1071_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1071_update_completed__ps] 
          phi_stmt_1071_update_completed_ <-& (phi_stmt_1071_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1071_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1071_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1071_update_start_)
          $T[phi_stmt_1071_loopback_trigger] 
          phi_stmt_1071_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1071_loopback_sample_req] 
          $T[phi_stmt_1071_loopback_sample_req_ps] 
          phi_stmt_1071_loopback_sample_req <-& (phi_stmt_1071_loopback_sample_req_ps)
          phi_stmt_1071_loopback_sample_req &-> ($null)
          $T[phi_stmt_1071_entry_trigger] 
          phi_stmt_1071_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1071_entry_sample_req] 
          $T[phi_stmt_1071_entry_sample_req_ps] 
          phi_stmt_1071_entry_sample_req <-& (phi_stmt_1071_entry_sample_req_ps)
          phi_stmt_1071_entry_sample_req &-> ($null)
          phi_stmt_1071_update_start_ o<-& (phi_stmt_1071_update_completed_ 0)
          phi_stmt_1071_sample_start_ o<-& (phi_stmt_1071_sample_completed_ 1)
          $T[phi_stmt_1071_merged_reqs] 
          $T[phi_stmt_1071_phi_mux_ack] 
          $T[phi_stmt_1071_phi_mux_ack_ps] 
          phi_stmt_1071_phi_mux_ack_ps <-& (phi_stmt_1071_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1071_update_completed_)
          $T[R_ZERO_3_1073_sample_start__ps] 
          $T[R_ZERO_3_1073_sample_completed__ps] 
          $T[R_ZERO_3_1073_update_start__ps] 
          $T[R_ZERO_3_1073_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1073_sample_start_] 
          $T[R_ZERO_3_1073_sample_completed_] 
          R_ZERO_3_1073_sample_completed_ <-& (R_ZERO_3_1073_sample_start_)
          $T[R_ZERO_3_1073_update_start_] 
          $T [R_ZERO_3_1073_update_completed_] $delay 
          R_ZERO_3_1073_update_completed_ <-& (R_ZERO_3_1073_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1073_sample_start_ <-& (R_ZERO_3_1073_sample_start__ps)
          R_ZERO_3_1073_update_start_ <-& (R_ZERO_3_1073_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1073_sample_completed__ps <-& (R_ZERO_3_1073_sample_completed_)
          R_ZERO_3_1073_update_completed__ps <-& (R_ZERO_3_1073_update_completed_)
          $T[R_next_active_packet_1074_sample_start__ps] 
          $T[R_next_active_packet_1074_sample_completed__ps] 
          $T[R_next_active_packet_1074_update_start__ps] 
          $T[R_next_active_packet_1074_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1074_sample_start_] 
          $T[R_next_active_packet_1074_sample_completed_] 
          $T[R_next_active_packet_1074_update_start_] 
          $T[R_next_active_packet_1074_update_completed_] 
          ;;[R_next_active_packet_1074_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1074_sample_start_ &-> (R_next_active_packet_1074_Sample)
          R_next_active_packet_1074_sample_completed_ <-& (R_next_active_packet_1074_Sample)
          ;;[R_next_active_packet_1074_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1074_update_start_ &-> (R_next_active_packet_1074_Update)
          R_next_active_packet_1074_update_completed_ <-& (R_next_active_packet_1074_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1074_sample_start_ <-& (R_next_active_packet_1074_sample_start__ps)
          R_next_active_packet_1074_update_start_ <-& (R_next_active_packet_1074_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1074_sample_completed__ps <-& (R_next_active_packet_1074_sample_completed_)
          R_next_active_packet_1074_update_completed__ps <-& (R_next_active_packet_1074_update_completed_)
          $phisequencer [ phi_stmt_1071_phi_seq] : 
          phi_stmt_1071_entry_trigger R_ZERO_3_1073_sample_start__ps R_ZERO_3_1073_sample_completed__ps R_ZERO_3_1073_update_start__ps R_ZERO_3_1073_update_completed__ps phi_stmt_1071_loopback_trigger R_next_active_packet_1074_sample_start__ps R_next_active_packet_1074_sample_completed__ps R_next_active_packet_1074_update_start__ps R_next_active_packet_1074_update_completed__ps :
          phi_stmt_1071_sample_start__ps phi_stmt_1071_sample_completed__ps phi_stmt_1071_update_start__ps phi_stmt_1071_update_completed__ps :
          phi_stmt_1071_entry_sample_req_ps phi_stmt_1071_loopback_sample_req_ps : 
          phi_stmt_1071_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1071
          // start:  PHI statement phi_stmt_1075
          // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1075_sample_start_] 
          $T[phi_stmt_1075_sample_completed_] 
          $T[phi_stmt_1075_update_start_] 
          $T[phi_stmt_1075_update_completed_] 
          $T[phi_stmt_1075_sample_start__ps] 
          phi_stmt_1075_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1075_sample_completed__ps] 
          phi_stmt_1075_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1075_update_start__ps] 
          phi_stmt_1075_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1075_update_completed__ps] 
          phi_stmt_1075_update_completed_ <-& (phi_stmt_1075_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1075_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1075_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1075_update_start_)
          $T[phi_stmt_1075_loopback_trigger] 
          phi_stmt_1075_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1075_loopback_sample_req] 
          $T[phi_stmt_1075_loopback_sample_req_ps] 
          phi_stmt_1075_loopback_sample_req <-& (phi_stmt_1075_loopback_sample_req_ps)
          phi_stmt_1075_loopback_sample_req &-> ($null)
          $T[phi_stmt_1075_entry_trigger] 
          phi_stmt_1075_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1075_entry_sample_req] 
          $T[phi_stmt_1075_entry_sample_req_ps] 
          phi_stmt_1075_entry_sample_req <-& (phi_stmt_1075_entry_sample_req_ps)
          phi_stmt_1075_entry_sample_req &-> ($null)
          phi_stmt_1075_update_start_ o<-& (phi_stmt_1075_update_completed_ 0)
          phi_stmt_1075_sample_start_ o<-& (phi_stmt_1075_sample_completed_ 1)
          $T[phi_stmt_1075_merged_reqs] 
          $T[phi_stmt_1075_phi_mux_ack] 
          $T[phi_stmt_1075_phi_mux_ack_ps] 
          phi_stmt_1075_phi_mux_ack_ps <-& (phi_stmt_1075_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1075_update_completed_)
          $T[R_ONE_3_1077_sample_start__ps] 
          $T[R_ONE_3_1077_sample_completed__ps] 
          $T[R_ONE_3_1077_update_start__ps] 
          $T[R_ONE_3_1077_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ONE_3_1077_sample_start_] 
          $T[R_ONE_3_1077_sample_completed_] 
          R_ONE_3_1077_sample_completed_ <-& (R_ONE_3_1077_sample_start_)
          $T[R_ONE_3_1077_update_start_] 
          $T [R_ONE_3_1077_update_completed_] $delay 
          R_ONE_3_1077_update_completed_ <-& (R_ONE_3_1077_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ONE_3_1077_sample_start_ <-& (R_ONE_3_1077_sample_start__ps)
          R_ONE_3_1077_update_start_ <-& (R_ONE_3_1077_update_start__ps)
          // Phi complete dependency.
          R_ONE_3_1077_sample_completed__ps <-& (R_ONE_3_1077_sample_completed_)
          R_ONE_3_1077_update_completed__ps <-& (R_ONE_3_1077_update_completed_)
          $T[R_next_pkt_priority_1078_sample_start__ps] 
          $T[R_next_pkt_priority_1078_sample_completed__ps] 
          $T[R_next_pkt_priority_1078_update_start__ps] 
          $T[R_next_pkt_priority_1078_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_1078_sample_start_] 
          $T[R_next_pkt_priority_1078_sample_completed_] 
          $T[R_next_pkt_priority_1078_update_start_] 
          $T[R_next_pkt_priority_1078_update_completed_] 
          ;;[R_next_pkt_priority_1078_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_1078_sample_start_ &-> (R_next_pkt_priority_1078_Sample)
          R_next_pkt_priority_1078_sample_completed_ <-& (R_next_pkt_priority_1078_Sample)
          ;;[R_next_pkt_priority_1078_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_1078_update_start_ &-> (R_next_pkt_priority_1078_Update)
          R_next_pkt_priority_1078_update_completed_ <-& (R_next_pkt_priority_1078_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_1078_sample_start_ <-& (R_next_pkt_priority_1078_sample_start__ps)
          R_next_pkt_priority_1078_update_start_ <-& (R_next_pkt_priority_1078_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_1078_sample_completed__ps <-& (R_next_pkt_priority_1078_sample_completed_)
          R_next_pkt_priority_1078_update_completed__ps <-& (R_next_pkt_priority_1078_update_completed_)
          $phisequencer [ phi_stmt_1075_phi_seq] : 
          phi_stmt_1075_entry_trigger R_ONE_3_1077_sample_start__ps R_ONE_3_1077_sample_completed__ps R_ONE_3_1077_update_start__ps R_ONE_3_1077_update_completed__ps phi_stmt_1075_loopback_trigger R_next_pkt_priority_1078_sample_start__ps R_next_pkt_priority_1078_sample_completed__ps R_next_pkt_priority_1078_update_start__ps R_next_pkt_priority_1078_update_completed__ps :
          phi_stmt_1075_sample_start__ps phi_stmt_1075_sample_completed__ps phi_stmt_1075_update_start__ps phi_stmt_1075_update_completed__ps :
          phi_stmt_1075_entry_sample_req_ps phi_stmt_1075_loopback_sample_req_ps : 
          phi_stmt_1075_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1075
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 328
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 329
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 330
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 331
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 332
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 333
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 334
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 335
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 336
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 337
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 338
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 339
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 341
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 342
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 343
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_3
          $T[WPIPE_out_data_3_1265_sample_start_] 
          $T[WPIPE_out_data_3_1265_sample_completed_] 
          $T[WPIPE_out_data_3_1265_update_start_] 
          $T[WPIPE_out_data_3_1265_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_3_1265 with guard R_send_flag_1264
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1047_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1051_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1056_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1061_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1066_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1071_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1075_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1047_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1051_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1056_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1061_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1066_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1071_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1075_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          ;;[WPIPE_out_data_3_1265_Sample] 
          {
            // pipe write sample-start out_data_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_3_1265_Update] 
          {
            // pipe write update (complete) out_data_3
            $T [req] $T [ack] 
          }
          WPIPE_out_data_3_1265_sample_start_ &-> (WPIPE_out_data_3_1265_Sample)
          WPIPE_out_data_3_1265_sample_completed_ <-& (WPIPE_out_data_3_1265_Sample)
          WPIPE_out_data_3_1265_update_start_ <-& (WPIPE_out_data_3_1265_sample_completed_)
          WPIPE_out_data_3_1265_update_start_ &-> (WPIPE_out_data_3_1265_Update)
          WPIPE_out_data_3_1265_update_completed_ <-& (WPIPE_out_data_3_1265_Update)
          WPIPE_out_data_3_1265_sample_start_ o<-& (WPIPE_out_data_3_1265_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1265_sample_start_
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1047_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1051_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1056_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1061_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1066_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1071_update_completed_)
          WPIPE_out_data_3_1265_sample_start_ <-& (phi_stmt_1075_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1265_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1047_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1051_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1056_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1061_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1066_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1071_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          phi_stmt_1075_update_start_ o<-& (WPIPE_out_data_3_1265_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
          // pipe read/write dependencies for pipe out_data_3
          // read-dependencies for pipe out_data_3
          // write-dependencies for pipe out_data_3
          // signal write dependencies for out_data_3
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1045__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1045_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1045__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1045_loop_body : condition_evaluated
        $bind do_while_stmt_1045__entry__  => do_while_stmt_1045_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1045_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1045__exit__)
      }
      do_while_stmt_1045__entry__ |-> (do_while_stmt_1045)
      do_while_stmt_1045__exit__ <-| (do_while_stmt_1045)
      do_while_stmt_1045__entry__ <-| (branch_block_stmt_1044__entry__)
      do_while_stmt_1045__exit__ |-> (branch_block_stmt_1044__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 312
    // constant-object-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 308
    // constant-object-declarations for block %outputPort_3_Daemon
    //  file .Aa/switch2x2.opt.aa, line 303
    // constant-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 308
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 310
    // 1 
    $constant $W[konst_1269_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 312
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 313
    // ZERO_8
    $constant $W[R_ZERO_8_1049_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // ZERO_33
    $constant $W[R_ZERO_33_1053_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // ZERO_33
    $constant $W[R_ZERO_33_1058_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // ZERO_33
    $constant $W[R_ZERO_33_1063_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 321
    // ZERO_33
    $constant $W[R_ZERO_33_1068_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    // ZERO_3
    $constant $W[R_ZERO_3_1073_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 325
    // ONE_3
    $constant $W[R_ONE_3_1077_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_1082_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1087_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1092_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1097_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1102_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1105_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1108_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1111_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1115_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1118_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1121_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1124_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 333
    // 0 
    $constant $W[konst_1141_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_1144_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_1150_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1153_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1163_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1171_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1179_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1187_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1204_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1208_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1211_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1215_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1219_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1223_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1226_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1230_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1237_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1240_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1243_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1246_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1250_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1253_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1256_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1259_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 308
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 310
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 312
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 313
    $W[next_down_counter_1158_1050_buffered] : $int<8>
    // down_counter
    $W[down_counter_1047] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // noblock_obuf_1_3
    $W[RPIPE_noblock_obuf_1_3_1055_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1051] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // noblock_obuf_2_3
    $W[RPIPE_noblock_obuf_2_3_1060_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1056] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // noblock_obuf_3_3
    $W[RPIPE_noblock_obuf_3_3_1065_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1061] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 321
    // noblock_obuf_4_3
    $W[RPIPE_noblock_obuf_4_3_1070_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1066] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    $W[next_active_packet_1138_1074_buffered] : $int<3>
    // active_packet
    $W[active_packet_1071] : $int<3>
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 325
    $W[next_pkt_priority_1138_1078_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_1075] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 328
    // p1_valid
    $W[p1_valid_1084] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 329
    // p2_valid
    $W[p2_valid_1089] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 330
    // p3_valid
    $W[p3_valid_1094] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 331
    // p4_valid
    $W[p4_valid_1099] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 332
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1103_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1106_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1109_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1112_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1113_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1116_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1119_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1122_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1125_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1126_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1128] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 333
    // next_active_packet
    $W[next_active_packet_1138] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_1138] : $int<3>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 334
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_1142_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1145_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1147] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 335
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1154_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1156_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1158] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 336
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1161_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1164_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1166] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 337
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1169_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1172_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1174] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 338
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1177_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1180_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1182] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 339
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1185_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1188_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1190] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 341
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1205_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1207_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1209_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1212_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1214_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1216_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1217_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1220_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1222_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1224_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1227_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1229_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1231_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1232_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1234] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 342
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1238_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1241_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1244_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1247_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1248_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1251_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1254_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1257_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1260_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1261_wire] : $int<1>
    // send_flag
    $W[send_flag_1263] : $int<1>
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 343
    // out_data_3
    // datapath-instances for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 308
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 310
    ==0? [do_while_stmt_1045_branch] (konst_1269_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 312
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 313
    # := [next_down_counter_1158_1050_buf] (next_down_counter_1158) (next_down_counter_1158_1050_buffered)     $fullrate
    $buffering $out next_down_counter_1158_1050_buf next_down_counter_1158_1050_buffered  1
    # $phi [phi_stmt_1047] (R_ZERO_8_1049_wire_constant next_down_counter_1158_1050_buffered) ( down_counter_1047 ) $fullrate
    // $buffering  $out phi_stmt_1047 down_counter_1047 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // noblock_obuf_1_3
    $ioport $in [RPIPE_noblock_obuf_1_3_1055_inst] (noblock_obuf_1_3) (RPIPE_noblock_obuf_1_3_1055_wire) $guard ( read_from_1_1166 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_3_1055_inst RPIPE_noblock_obuf_1_3_1055_wire 1
    # $phi [phi_stmt_1051] (R_ZERO_33_1053_wire_constant RPIPE_noblock_obuf_1_3_1055_wire) ( pkt_1_e_word_1051 ) $fullrate
    // $buffering  $out phi_stmt_1051 pkt_1_e_word_1051 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // noblock_obuf_2_3
    $ioport $in [RPIPE_noblock_obuf_2_3_1060_inst] (noblock_obuf_2_3) (RPIPE_noblock_obuf_2_3_1060_wire) $guard ( read_from_2_1174 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_3_1060_inst RPIPE_noblock_obuf_2_3_1060_wire 1
    # $phi [phi_stmt_1056] (R_ZERO_33_1058_wire_constant RPIPE_noblock_obuf_2_3_1060_wire) ( pkt_2_e_word_1056 ) $fullrate
    // $buffering  $out phi_stmt_1056 pkt_2_e_word_1056 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // noblock_obuf_3_3
    $ioport $in [RPIPE_noblock_obuf_3_3_1065_inst] (noblock_obuf_3_3) (RPIPE_noblock_obuf_3_3_1065_wire) $guard ( read_from_3_1182 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_3_1065_inst RPIPE_noblock_obuf_3_3_1065_wire 1
    # $phi [phi_stmt_1061] (R_ZERO_33_1063_wire_constant RPIPE_noblock_obuf_3_3_1065_wire) ( pkt_3_e_word_1061 ) $fullrate
    // $buffering  $out phi_stmt_1061 pkt_3_e_word_1061 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 321
    // noblock_obuf_4_3
    $ioport $in [RPIPE_noblock_obuf_4_3_1070_inst] (noblock_obuf_4_3) (RPIPE_noblock_obuf_4_3_1070_wire) $guard ( read_from_4_1190 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_3_1070_inst RPIPE_noblock_obuf_4_3_1070_wire 1
    # $phi [phi_stmt_1066] (R_ZERO_33_1068_wire_constant RPIPE_noblock_obuf_4_3_1070_wire) ( pkt_4_e_word_1066 ) $fullrate
    // $buffering  $out phi_stmt_1066 pkt_4_e_word_1066 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    # := [next_active_packet_1138_1074_buf] (next_active_packet_1138) (next_active_packet_1138_1074_buffered)     $fullrate
    $buffering $out next_active_packet_1138_1074_buf next_active_packet_1138_1074_buffered  1
    # $phi [phi_stmt_1071] (R_ZERO_3_1073_wire_constant next_active_packet_1138_1074_buffered) ( active_packet_1071 ) $fullrate
    // $buffering  $out phi_stmt_1071 active_packet_1071 2
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 325
    # := [next_pkt_priority_1138_1078_buf] (next_pkt_priority_1138) (next_pkt_priority_1138_1078_buffered)     $fullrate
    $buffering $out next_pkt_priority_1138_1078_buf next_pkt_priority_1138_1078_buffered  1
    # $phi [phi_stmt_1075] (R_ONE_3_1077_wire_constant next_pkt_priority_1138_1078_buffered) ( pkt_priority_1075 ) $fullrate
    // $buffering  $out phi_stmt_1075 pkt_priority_1075 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 328
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1083_inst] (pkt_1_e_word_1051 konst_1082_wire_constant) (p1_valid_1084)   $flowthrough 
    $delay BITSEL_u33_u1_1083_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 329
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1088_inst] (pkt_2_e_word_1056 konst_1087_wire_constant) (p2_valid_1089)   $flowthrough 
    $delay BITSEL_u33_u1_1088_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 330
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1093_inst] (pkt_3_e_word_1061 konst_1092_wire_constant) (p3_valid_1094)   $flowthrough 
    $delay BITSEL_u33_u1_1093_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 331
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1098_inst] (pkt_4_e_word_1066 konst_1097_wire_constant) (p4_valid_1099)   $flowthrough 
    $delay BITSEL_u33_u1_1098_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 332
    // (active_packet == 1 )
    ==[EQ_u3_u1_1103_inst] (active_packet_1071 konst_1102_wire_constant) (EQ_u3_u1_1103_wire)   $flowthrough 
    $delay EQ_u3_u1_1103_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1106_inst] (EQ_u3_u1_1103_wire p1_valid_1084 konst_1105_wire_constant) (MUX_1106_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1109_inst] (active_packet_1071 konst_1108_wire_constant) (EQ_u3_u1_1109_wire)   $flowthrough 
    $delay EQ_u3_u1_1109_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1112_inst] (EQ_u3_u1_1109_wire p2_valid_1089 konst_1111_wire_constant) (MUX_1112_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1113_inst] (MUX_1106_wire MUX_1112_wire) (OR_u1_u1_1113_wire)   $flowthrough 
    $delay OR_u1_u1_1113_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1116_inst] (active_packet_1071 konst_1115_wire_constant) (EQ_u3_u1_1116_wire)   $flowthrough 
    $delay EQ_u3_u1_1116_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1119_inst] (EQ_u3_u1_1116_wire p3_valid_1094 konst_1118_wire_constant) (MUX_1119_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1122_inst] (active_packet_1071 konst_1121_wire_constant) (EQ_u3_u1_1122_wire)   $flowthrough 
    $delay EQ_u3_u1_1122_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1125_inst] (EQ_u3_u1_1122_wire p4_valid_1099 konst_1124_wire_constant) (MUX_1125_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1126_inst] (MUX_1119_wire MUX_1125_wire) (OR_u1_u1_1126_wire)   $flowthrough 
    $delay OR_u1_u1_1126_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1127_inst] (OR_u1_u1_1113_wire OR_u1_u1_1126_wire) (valid_active_pkt_word_read_1128)   $flowthrough 
    $delay OR_u1_u1_1127_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 333
    $call [call_stmt_1138_call] $module prioritySelect(down_counter_1047 active_packet_1071 pkt_priority_1075 p1_valid_1084 p2_valid_1089 p3_valid_1094 p4_valid_1099) (next_active_packet_1138 next_pkt_priority_1138)   $flowthrough $fullrate
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 334
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_1142_inst] (next_active_packet_1138 konst_1141_wire_constant) (NEQ_u3_u1_1142_wire)   $flowthrough 
    $delay NEQ_u3_u1_1142_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1145_inst] (down_counter_1047 konst_1144_wire_constant) (EQ_u8_u1_1145_wire)   $flowthrough 
    $delay EQ_u8_u1_1145_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_1146_inst] (NEQ_u3_u1_1142_wire EQ_u8_u1_1145_wire) (started_new_packet_1147)   $flowthrough 
    $delay AND_u1_u1_1146_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 335
    // (down_counter - 1 )
    -[SUB_u8_u8_1154_inst] (down_counter_1047 konst_1153_wire_constant) (SUB_u8_u8_1154_wire)   $flowthrough 
    $delay SUB_u8_u8_1154_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1156_inst] (valid_active_pkt_word_read_1128 SUB_u8_u8_1154_wire down_counter_1047) (MUX_1156_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1157_inst] (started_new_packet_1147 konst_1150_wire_constant MUX_1156_wire) (next_down_counter_1158)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 336
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1161_inst] (p1_valid_1084) (NOT_u1_u1_1161_wire)   $flowthrough
    $delay NOT_u1_u1_1161_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1164_inst] (next_active_packet_1138 konst_1163_wire_constant) (EQ_u3_u1_1164_wire)   $flowthrough 
    $delay EQ_u3_u1_1164_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1165_inst] (NOT_u1_u1_1161_wire EQ_u3_u1_1164_wire) (read_from_1_1166)   $flowthrough 
    $delay OR_u1_u1_1165_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 337
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1169_inst] (p2_valid_1089) (NOT_u1_u1_1169_wire)   $flowthrough
    $delay NOT_u1_u1_1169_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1172_inst] (next_active_packet_1138 konst_1171_wire_constant) (EQ_u3_u1_1172_wire)   $flowthrough 
    $delay EQ_u3_u1_1172_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1173_inst] (NOT_u1_u1_1169_wire EQ_u3_u1_1172_wire) (read_from_2_1174)   $flowthrough 
    $delay OR_u1_u1_1173_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 338
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1177_inst] (p3_valid_1094) (NOT_u1_u1_1177_wire)   $flowthrough
    $delay NOT_u1_u1_1177_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1180_inst] (next_active_packet_1138 konst_1179_wire_constant) (EQ_u3_u1_1180_wire)   $flowthrough 
    $delay EQ_u3_u1_1180_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1181_inst] (NOT_u1_u1_1177_wire EQ_u3_u1_1180_wire) (read_from_3_1182)   $flowthrough 
    $delay OR_u1_u1_1181_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 339
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1185_inst] (p4_valid_1099) (NOT_u1_u1_1185_wire)   $flowthrough
    $delay NOT_u1_u1_1185_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1188_inst] (next_active_packet_1138 konst_1187_wire_constant) (EQ_u3_u1_1188_wire)   $flowthrough 
    $delay EQ_u3_u1_1188_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1189_inst] (NOT_u1_u1_1185_wire EQ_u3_u1_1188_wire) (read_from_4_1190)   $flowthrough 
    $delay OR_u1_u1_1189_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 341
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1205_inst] (next_active_packet_1138 konst_1204_wire_constant) (EQ_u3_u1_1205_wire)   $flowthrough 
    $delay EQ_u3_u1_1205_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1207_inst] (pkt_1_e_word_1051 31 0) (slice_1207_wire)  $flowthrough
    $delay slice_1207_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1209_inst] (EQ_u3_u1_1205_wire slice_1207_wire konst_1208_wire_constant) (MUX_1209_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1212_inst] (next_active_packet_1138 konst_1211_wire_constant) (EQ_u3_u1_1212_wire)   $flowthrough 
    $delay EQ_u3_u1_1212_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1214_inst] (pkt_2_e_word_1056 31 0) (slice_1214_wire)  $flowthrough
    $delay slice_1214_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1216_inst] (EQ_u3_u1_1212_wire slice_1214_wire konst_1215_wire_constant) (MUX_1216_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1217_inst] (MUX_1209_wire MUX_1216_wire) (OR_u32_u32_1217_wire)   $flowthrough 
    $delay OR_u32_u32_1217_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1220_inst] (next_active_packet_1138 konst_1219_wire_constant) (EQ_u3_u1_1220_wire)   $flowthrough 
    $delay EQ_u3_u1_1220_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1222_inst] (pkt_3_e_word_1061 31 0) (slice_1222_wire)  $flowthrough
    $delay slice_1222_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1224_inst] (EQ_u3_u1_1220_wire slice_1222_wire konst_1223_wire_constant) (MUX_1224_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1227_inst] (next_active_packet_1138 konst_1226_wire_constant) (EQ_u3_u1_1227_wire)   $flowthrough 
    $delay EQ_u3_u1_1227_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1229_inst] (pkt_4_e_word_1066 31 0) (slice_1229_wire)  $flowthrough
    $delay slice_1229_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1231_inst] (EQ_u3_u1_1227_wire slice_1229_wire konst_1230_wire_constant) (MUX_1231_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1232_inst] (MUX_1224_wire MUX_1231_wire) (OR_u32_u32_1232_wire)   $flowthrough 
    $delay OR_u32_u32_1232_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1233_inst] (OR_u32_u32_1217_wire OR_u32_u32_1232_wire) (data_to_out_1234)   $flowthrough 
    $delay OR_u32_u32_1233_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 342
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1238_inst] (next_active_packet_1138 konst_1237_wire_constant) (EQ_u3_u1_1238_wire)   $flowthrough 
    $delay EQ_u3_u1_1238_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1241_inst] (EQ_u3_u1_1238_wire p1_valid_1084 konst_1240_wire_constant) (MUX_1241_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1244_inst] (next_active_packet_1138 konst_1243_wire_constant) (EQ_u3_u1_1244_wire)   $flowthrough 
    $delay EQ_u3_u1_1244_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1247_inst] (EQ_u3_u1_1244_wire p2_valid_1089 konst_1246_wire_constant) (MUX_1247_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1248_inst] (MUX_1241_wire MUX_1247_wire) (OR_u1_u1_1248_wire)   $flowthrough 
    $delay OR_u1_u1_1248_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1251_inst] (next_active_packet_1138 konst_1250_wire_constant) (EQ_u3_u1_1251_wire)   $flowthrough 
    $delay EQ_u3_u1_1251_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1254_inst] (EQ_u3_u1_1251_wire p3_valid_1094 konst_1253_wire_constant) (MUX_1254_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1257_inst] (next_active_packet_1138 konst_1256_wire_constant) (EQ_u3_u1_1257_wire)   $flowthrough 
    $delay EQ_u3_u1_1257_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1260_inst] (EQ_u3_u1_1257_wire p4_valid_1099 konst_1259_wire_constant) (MUX_1260_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1261_inst] (MUX_1254_wire MUX_1260_wire) (OR_u1_u1_1261_wire)   $flowthrough 
    $delay OR_u1_u1_1261_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1262_inst] (OR_u1_u1_1248_wire OR_u1_u1_1261_wire) (send_flag_1263)   $flowthrough 
    $delay OR_u1_u1_1262_inst 0
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 343
    // out_data_3
    $ioport $out [WPIPE_out_data_3_1265_inst]  (data_to_out_1234) (out_data_3) $guard ( send_flag_1263 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1045
  //  file .Aa/switch2x2.opt.aa, line 310
  phi_stmt_1047 <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1047_entry_sample_req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1047_loopback_sample_req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1047_phi_mux_ack)
  next_down_counter_1158_1050_buf <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_down_counter_1050_Sample/req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_down_counter_1050_Update/req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_down_counter_1050_Sample/ack branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_down_counter_1050_Update/ack)
  phi_stmt_1051 <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1051_entry_sample_req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1051_loopback_sample_req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1051_phi_mux_ack)
  // noblock_obuf_1_3
  RPIPE_noblock_obuf_1_3_1055_inst <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_1_3_1055_Sample/rr branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_1_3_1055_Update/cr) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_1_3_1055_Sample/ra branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_1_3_1055_Update/ca)
  phi_stmt_1056 <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1056_entry_sample_req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1056_loopback_sample_req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1056_phi_mux_ack)
  // noblock_obuf_2_3
  RPIPE_noblock_obuf_2_3_1060_inst <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_2_3_1060_Sample/rr branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_2_3_1060_Update/cr) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_2_3_1060_Sample/ra branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_2_3_1060_Update/ca)
  phi_stmt_1061 <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1061_entry_sample_req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1061_loopback_sample_req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1061_phi_mux_ack)
  // noblock_obuf_3_3
  RPIPE_noblock_obuf_3_3_1065_inst <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_3_3_1065_Sample/rr branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_3_3_1065_Update/cr) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_3_3_1065_Sample/ra branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_3_3_1065_Update/ca)
  phi_stmt_1066 <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1066_entry_sample_req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1066_loopback_sample_req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1066_phi_mux_ack)
  // noblock_obuf_4_3
  RPIPE_noblock_obuf_4_3_1070_inst <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_4_3_1070_Sample/rr branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_4_3_1070_Update/cr) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_4_3_1070_Sample/ra branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/RPIPE_noblock_obuf_4_3_1070_Update/ca)
  phi_stmt_1071 <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1071_entry_sample_req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1071_loopback_sample_req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1071_phi_mux_ack)
  next_active_packet_1138_1074_buf <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_active_packet_1074_Sample/req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_active_packet_1074_Update/req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_active_packet_1074_Sample/ack branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_active_packet_1074_Update/ack)
  phi_stmt_1075 <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1075_entry_sample_req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1075_loopback_sample_req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/phi_stmt_1075_phi_mux_ack)
  next_pkt_priority_1138_1078_buf <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_pkt_priority_1078_Sample/req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_pkt_priority_1078_Update/req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_pkt_priority_1078_Sample/ack branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/R_next_pkt_priority_1078_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 328
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 329
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 330
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 331
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 332
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 333
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 334
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 335
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 336
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 337
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 338
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 339
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 341
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 342
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 343
  // data_to_out
  // out_data_3
  WPIPE_out_data_3_1265_inst <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/WPIPE_out_data_3_1265_Sample/req branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/WPIPE_out_data_3_1265_Update/req) (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/WPIPE_out_data_3_1265_Sample/ack branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/WPIPE_out_data_3_1265_Update/ack)
  do_while_stmt_1045_branch <=> (branch_block_stmt_1044/do_while_stmt_1045/do_while_stmt_1045_loop_body/condition_evaluated) (branch_block_stmt_1044/do_while_stmt_1045/loop_exit/ack branch_block_stmt_1044/do_while_stmt_1045/loop_taken/ack)
}
$module [outputPort_4_Daemon] 
{
  // pipe-declarations for block %outputPort_4_Daemon
  //  file .Aa/switch2x2.opt.aa, line 347
  // pipe-declarations for block %outputPort_4_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 352
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1273] // Branch Block  file .Aa/switch2x2.opt.aa, line 352
    {
      $P [branch_block_stmt_1273__entry__]
      branch_block_stmt_1273__entry__ <-| ($entry)
      $P [branch_block_stmt_1273__exit__]
      branch_block_stmt_1273__exit__ |-> ($exit)
      $P [do_while_stmt_1274__entry__] 
      $P [do_while_stmt_1274__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 354
      <o> [do_while_stmt_1274]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1274__entry__] 
        $P[do_while_stmt_1274__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1274_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1276
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1276_sample_start_] 
          $T[phi_stmt_1276_sample_completed_] 
          $T[phi_stmt_1276_update_start_] 
          $T[phi_stmt_1276_update_completed_] 
          $T[phi_stmt_1276_sample_start__ps] 
          phi_stmt_1276_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1276_sample_completed__ps] 
          phi_stmt_1276_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1276_update_start__ps] 
          phi_stmt_1276_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1276_update_completed__ps] 
          phi_stmt_1276_update_completed_ <-& (phi_stmt_1276_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1276_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1276_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1276_update_start_)
          $T[phi_stmt_1276_loopback_trigger] 
          phi_stmt_1276_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1276_loopback_sample_req] 
          $T[phi_stmt_1276_loopback_sample_req_ps] 
          phi_stmt_1276_loopback_sample_req <-& (phi_stmt_1276_loopback_sample_req_ps)
          phi_stmt_1276_loopback_sample_req &-> ($null)
          $T[phi_stmt_1276_entry_trigger] 
          phi_stmt_1276_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1276_entry_sample_req] 
          $T[phi_stmt_1276_entry_sample_req_ps] 
          phi_stmt_1276_entry_sample_req <-& (phi_stmt_1276_entry_sample_req_ps)
          phi_stmt_1276_entry_sample_req &-> ($null)
          phi_stmt_1276_update_start_ o<-& (phi_stmt_1276_update_completed_ 0)
          phi_stmt_1276_sample_start_ o<-& (phi_stmt_1276_sample_completed_ 1)
          $T[phi_stmt_1276_merged_reqs] 
          $T[phi_stmt_1276_phi_mux_ack] 
          $T[phi_stmt_1276_phi_mux_ack_ps] 
          phi_stmt_1276_phi_mux_ack_ps <-& (phi_stmt_1276_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1276_update_completed_)
          $T[R_ZERO_8_1278_sample_start__ps] 
          $T[R_ZERO_8_1278_sample_completed__ps] 
          $T[R_ZERO_8_1278_update_start__ps] 
          $T[R_ZERO_8_1278_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1278_sample_start_] 
          $T[R_ZERO_8_1278_sample_completed_] 
          R_ZERO_8_1278_sample_completed_ <-& (R_ZERO_8_1278_sample_start_)
          $T[R_ZERO_8_1278_update_start_] 
          $T [R_ZERO_8_1278_update_completed_] $delay 
          R_ZERO_8_1278_update_completed_ <-& (R_ZERO_8_1278_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1278_sample_start_ <-& (R_ZERO_8_1278_sample_start__ps)
          R_ZERO_8_1278_update_start_ <-& (R_ZERO_8_1278_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1278_sample_completed__ps <-& (R_ZERO_8_1278_sample_completed_)
          R_ZERO_8_1278_update_completed__ps <-& (R_ZERO_8_1278_update_completed_)
          $T[R_next_down_counter_1279_sample_start__ps] 
          $T[R_next_down_counter_1279_sample_completed__ps] 
          $T[R_next_down_counter_1279_update_start__ps] 
          $T[R_next_down_counter_1279_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1279_sample_start_] 
          $T[R_next_down_counter_1279_sample_completed_] 
          $T[R_next_down_counter_1279_update_start_] 
          $T[R_next_down_counter_1279_update_completed_] 
          ;;[R_next_down_counter_1279_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1279_sample_start_ &-> (R_next_down_counter_1279_Sample)
          R_next_down_counter_1279_sample_completed_ <-& (R_next_down_counter_1279_Sample)
          ;;[R_next_down_counter_1279_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1279_update_start_ &-> (R_next_down_counter_1279_Update)
          R_next_down_counter_1279_update_completed_ <-& (R_next_down_counter_1279_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1279_sample_start_ <-& (R_next_down_counter_1279_sample_start__ps)
          R_next_down_counter_1279_update_start_ <-& (R_next_down_counter_1279_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1279_sample_completed__ps <-& (R_next_down_counter_1279_sample_completed_)
          R_next_down_counter_1279_update_completed__ps <-& (R_next_down_counter_1279_update_completed_)
          $phisequencer [ phi_stmt_1276_phi_seq] : 
          phi_stmt_1276_entry_trigger R_ZERO_8_1278_sample_start__ps R_ZERO_8_1278_sample_completed__ps R_ZERO_8_1278_update_start__ps R_ZERO_8_1278_update_completed__ps phi_stmt_1276_loopback_trigger R_next_down_counter_1279_sample_start__ps R_next_down_counter_1279_sample_completed__ps R_next_down_counter_1279_update_start__ps R_next_down_counter_1279_update_completed__ps :
          phi_stmt_1276_sample_start__ps phi_stmt_1276_sample_completed__ps phi_stmt_1276_update_start__ps phi_stmt_1276_update_completed__ps :
          phi_stmt_1276_entry_sample_req_ps phi_stmt_1276_loopback_sample_req_ps : 
          phi_stmt_1276_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1276
          // start:  PHI statement phi_stmt_1280
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1280_sample_start_] 
          $T[phi_stmt_1280_sample_completed_] 
          $T[phi_stmt_1280_update_start_] 
          $T[phi_stmt_1280_update_completed_] 
          $T[phi_stmt_1280_sample_start__ps] 
          phi_stmt_1280_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1280_sample_completed__ps] 
          phi_stmt_1280_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1280_update_start__ps] 
          phi_stmt_1280_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1280_update_completed__ps] 
          phi_stmt_1280_update_completed_ <-& (phi_stmt_1280_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1280_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1280_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1280_update_start_)
          $T[phi_stmt_1280_loopback_trigger] 
          phi_stmt_1280_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1280_loopback_sample_req] 
          $T[phi_stmt_1280_loopback_sample_req_ps] 
          phi_stmt_1280_loopback_sample_req <-& (phi_stmt_1280_loopback_sample_req_ps)
          phi_stmt_1280_loopback_sample_req &-> ($null)
          $T[phi_stmt_1280_entry_trigger] 
          phi_stmt_1280_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1280_entry_sample_req] 
          $T[phi_stmt_1280_entry_sample_req_ps] 
          phi_stmt_1280_entry_sample_req <-& (phi_stmt_1280_entry_sample_req_ps)
          phi_stmt_1280_entry_sample_req &-> ($null)
          phi_stmt_1280_update_start_ o<-& (phi_stmt_1280_update_completed_ 0)
          phi_stmt_1280_sample_start_ o<-& (phi_stmt_1280_sample_completed_ 1)
          $T[phi_stmt_1280_merged_reqs] 
          $T[phi_stmt_1280_phi_mux_ack] 
          $T[phi_stmt_1280_phi_mux_ack_ps] 
          phi_stmt_1280_phi_mux_ack_ps <-& (phi_stmt_1280_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1280_update_completed_)
          $T[R_ZERO_33_1282_sample_start__ps] 
          $T[R_ZERO_33_1282_sample_completed__ps] 
          $T[R_ZERO_33_1282_update_start__ps] 
          $T[R_ZERO_33_1282_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1282_sample_start_] 
          $T[R_ZERO_33_1282_sample_completed_] 
          R_ZERO_33_1282_sample_completed_ <-& (R_ZERO_33_1282_sample_start_)
          $T[R_ZERO_33_1282_update_start_] 
          $T [R_ZERO_33_1282_update_completed_] $delay 
          R_ZERO_33_1282_update_completed_ <-& (R_ZERO_33_1282_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1282_sample_start_ <-& (R_ZERO_33_1282_sample_start__ps)
          R_ZERO_33_1282_update_start_ <-& (R_ZERO_33_1282_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1282_sample_completed__ps <-& (R_ZERO_33_1282_sample_completed_)
          R_ZERO_33_1282_update_completed__ps <-& (R_ZERO_33_1282_update_completed_)
          $T[RPIPE_noblock_obuf_1_4_1284_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1284_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_4_1284_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1284_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_4
          $T[RPIPE_noblock_obuf_1_4_1284_sample_start_] 
          $T[RPIPE_noblock_obuf_1_4_1284_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_4_1284_update_start_] 
          $T[RPIPE_noblock_obuf_1_4_1284_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_4_1284 with guard R_read_from_1_1283
          // root phi_stmt_1280 not in visited_elements
          // root phi_stmt_1285 not in visited_elements
          // root phi_stmt_1290 not in visited_elements
          // root phi_stmt_1295 not in visited_elements
          // root phi_stmt_1300 not in visited_elements
          // root phi_stmt_1304 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_4_1284_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_4_1284_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_4_1284_sample_start_ &-> (RPIPE_noblock_obuf_1_4_1284_Sample)
          RPIPE_noblock_obuf_1_4_1284_sample_completed_ <-& (RPIPE_noblock_obuf_1_4_1284_Sample)
          RPIPE_noblock_obuf_1_4_1284_update_start_ <-& (RPIPE_noblock_obuf_1_4_1284_sample_completed_)
          RPIPE_noblock_obuf_1_4_1284_update_start_ &-> (RPIPE_noblock_obuf_1_4_1284_Update)
          RPIPE_noblock_obuf_1_4_1284_update_completed_ <-& (RPIPE_noblock_obuf_1_4_1284_Update)
          RPIPE_noblock_obuf_1_4_1284_sample_start_ o<-& (RPIPE_noblock_obuf_1_4_1284_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_4_1284_sample_start_ <-& (RPIPE_noblock_obuf_1_4_1284_sample_start__ps)
          RPIPE_noblock_obuf_1_4_1284_update_start_ <-& (RPIPE_noblock_obuf_1_4_1284_update_start__ps)
          // RAW reenables for noblock_obuf_1_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_4_1284_sample_completed__ps <-& (RPIPE_noblock_obuf_1_4_1284_sample_completed_)
          RPIPE_noblock_obuf_1_4_1284_update_completed__ps <-& (RPIPE_noblock_obuf_1_4_1284_update_completed_)
          $phisequencer [ phi_stmt_1280_phi_seq] : 
          phi_stmt_1280_entry_trigger R_ZERO_33_1282_sample_start__ps R_ZERO_33_1282_sample_completed__ps R_ZERO_33_1282_update_start__ps R_ZERO_33_1282_update_completed__ps phi_stmt_1280_loopback_trigger RPIPE_noblock_obuf_1_4_1284_sample_start__ps RPIPE_noblock_obuf_1_4_1284_sample_completed__ps RPIPE_noblock_obuf_1_4_1284_update_start__ps RPIPE_noblock_obuf_1_4_1284_update_completed__ps :
          phi_stmt_1280_sample_start__ps phi_stmt_1280_sample_completed__ps phi_stmt_1280_update_start__ps phi_stmt_1280_update_completed__ps :
          phi_stmt_1280_entry_sample_req_ps phi_stmt_1280_loopback_sample_req_ps : 
          phi_stmt_1280_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1280
          // start:  PHI statement phi_stmt_1285
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1285_sample_start_] 
          $T[phi_stmt_1285_sample_completed_] 
          $T[phi_stmt_1285_update_start_] 
          $T[phi_stmt_1285_update_completed_] 
          $T[phi_stmt_1285_sample_start__ps] 
          phi_stmt_1285_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1285_sample_completed__ps] 
          phi_stmt_1285_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1285_update_start__ps] 
          phi_stmt_1285_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1285_update_completed__ps] 
          phi_stmt_1285_update_completed_ <-& (phi_stmt_1285_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1285_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1285_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1285_update_start_)
          $T[phi_stmt_1285_loopback_trigger] 
          phi_stmt_1285_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1285_loopback_sample_req] 
          $T[phi_stmt_1285_loopback_sample_req_ps] 
          phi_stmt_1285_loopback_sample_req <-& (phi_stmt_1285_loopback_sample_req_ps)
          phi_stmt_1285_loopback_sample_req &-> ($null)
          $T[phi_stmt_1285_entry_trigger] 
          phi_stmt_1285_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1285_entry_sample_req] 
          $T[phi_stmt_1285_entry_sample_req_ps] 
          phi_stmt_1285_entry_sample_req <-& (phi_stmt_1285_entry_sample_req_ps)
          phi_stmt_1285_entry_sample_req &-> ($null)
          phi_stmt_1285_update_start_ o<-& (phi_stmt_1285_update_completed_ 0)
          phi_stmt_1285_sample_start_ o<-& (phi_stmt_1285_sample_completed_ 1)
          $T[phi_stmt_1285_merged_reqs] 
          $T[phi_stmt_1285_phi_mux_ack] 
          $T[phi_stmt_1285_phi_mux_ack_ps] 
          phi_stmt_1285_phi_mux_ack_ps <-& (phi_stmt_1285_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1285_update_completed_)
          $T[R_ZERO_33_1287_sample_start__ps] 
          $T[R_ZERO_33_1287_sample_completed__ps] 
          $T[R_ZERO_33_1287_update_start__ps] 
          $T[R_ZERO_33_1287_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1287_sample_start_] 
          $T[R_ZERO_33_1287_sample_completed_] 
          R_ZERO_33_1287_sample_completed_ <-& (R_ZERO_33_1287_sample_start_)
          $T[R_ZERO_33_1287_update_start_] 
          $T [R_ZERO_33_1287_update_completed_] $delay 
          R_ZERO_33_1287_update_completed_ <-& (R_ZERO_33_1287_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1287_sample_start_ <-& (R_ZERO_33_1287_sample_start__ps)
          R_ZERO_33_1287_update_start_ <-& (R_ZERO_33_1287_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1287_sample_completed__ps <-& (R_ZERO_33_1287_sample_completed_)
          R_ZERO_33_1287_update_completed__ps <-& (R_ZERO_33_1287_update_completed_)
          $T[RPIPE_noblock_obuf_2_4_1289_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1289_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_4_1289_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1289_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_4
          $T[RPIPE_noblock_obuf_2_4_1289_sample_start_] 
          $T[RPIPE_noblock_obuf_2_4_1289_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_4_1289_update_start_] 
          $T[RPIPE_noblock_obuf_2_4_1289_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_4_1289 with guard R_read_from_2_1288
          // root phi_stmt_1285 not in visited_elements
          // root phi_stmt_1290 not in visited_elements
          // root phi_stmt_1295 not in visited_elements
          // root phi_stmt_1300 not in visited_elements
          // root phi_stmt_1304 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_4_1289_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_4_1289_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_4_1289_sample_start_ &-> (RPIPE_noblock_obuf_2_4_1289_Sample)
          RPIPE_noblock_obuf_2_4_1289_sample_completed_ <-& (RPIPE_noblock_obuf_2_4_1289_Sample)
          RPIPE_noblock_obuf_2_4_1289_update_start_ <-& (RPIPE_noblock_obuf_2_4_1289_sample_completed_)
          RPIPE_noblock_obuf_2_4_1289_update_start_ &-> (RPIPE_noblock_obuf_2_4_1289_Update)
          RPIPE_noblock_obuf_2_4_1289_update_completed_ <-& (RPIPE_noblock_obuf_2_4_1289_Update)
          RPIPE_noblock_obuf_2_4_1289_sample_start_ o<-& (RPIPE_noblock_obuf_2_4_1289_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_4_1289_sample_start_ <-& (RPIPE_noblock_obuf_2_4_1289_sample_start__ps)
          RPIPE_noblock_obuf_2_4_1289_update_start_ <-& (RPIPE_noblock_obuf_2_4_1289_update_start__ps)
          // RAW reenables for noblock_obuf_2_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_4_1289_sample_completed__ps <-& (RPIPE_noblock_obuf_2_4_1289_sample_completed_)
          RPIPE_noblock_obuf_2_4_1289_update_completed__ps <-& (RPIPE_noblock_obuf_2_4_1289_update_completed_)
          $phisequencer [ phi_stmt_1285_phi_seq] : 
          phi_stmt_1285_entry_trigger R_ZERO_33_1287_sample_start__ps R_ZERO_33_1287_sample_completed__ps R_ZERO_33_1287_update_start__ps R_ZERO_33_1287_update_completed__ps phi_stmt_1285_loopback_trigger RPIPE_noblock_obuf_2_4_1289_sample_start__ps RPIPE_noblock_obuf_2_4_1289_sample_completed__ps RPIPE_noblock_obuf_2_4_1289_update_start__ps RPIPE_noblock_obuf_2_4_1289_update_completed__ps :
          phi_stmt_1285_sample_start__ps phi_stmt_1285_sample_completed__ps phi_stmt_1285_update_start__ps phi_stmt_1285_update_completed__ps :
          phi_stmt_1285_entry_sample_req_ps phi_stmt_1285_loopback_sample_req_ps : 
          phi_stmt_1285_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1285
          // start:  PHI statement phi_stmt_1290
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1290_sample_start_] 
          $T[phi_stmt_1290_sample_completed_] 
          $T[phi_stmt_1290_update_start_] 
          $T[phi_stmt_1290_update_completed_] 
          $T[phi_stmt_1290_sample_start__ps] 
          phi_stmt_1290_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1290_sample_completed__ps] 
          phi_stmt_1290_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1290_update_start__ps] 
          phi_stmt_1290_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1290_update_completed__ps] 
          phi_stmt_1290_update_completed_ <-& (phi_stmt_1290_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1290_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1290_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1290_update_start_)
          $T[phi_stmt_1290_loopback_trigger] 
          phi_stmt_1290_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1290_loopback_sample_req] 
          $T[phi_stmt_1290_loopback_sample_req_ps] 
          phi_stmt_1290_loopback_sample_req <-& (phi_stmt_1290_loopback_sample_req_ps)
          phi_stmt_1290_loopback_sample_req &-> ($null)
          $T[phi_stmt_1290_entry_trigger] 
          phi_stmt_1290_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1290_entry_sample_req] 
          $T[phi_stmt_1290_entry_sample_req_ps] 
          phi_stmt_1290_entry_sample_req <-& (phi_stmt_1290_entry_sample_req_ps)
          phi_stmt_1290_entry_sample_req &-> ($null)
          phi_stmt_1290_update_start_ o<-& (phi_stmt_1290_update_completed_ 0)
          phi_stmt_1290_sample_start_ o<-& (phi_stmt_1290_sample_completed_ 1)
          $T[phi_stmt_1290_merged_reqs] 
          $T[phi_stmt_1290_phi_mux_ack] 
          $T[phi_stmt_1290_phi_mux_ack_ps] 
          phi_stmt_1290_phi_mux_ack_ps <-& (phi_stmt_1290_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1290_update_completed_)
          $T[R_ZERO_33_1292_sample_start__ps] 
          $T[R_ZERO_33_1292_sample_completed__ps] 
          $T[R_ZERO_33_1292_update_start__ps] 
          $T[R_ZERO_33_1292_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1292_sample_start_] 
          $T[R_ZERO_33_1292_sample_completed_] 
          R_ZERO_33_1292_sample_completed_ <-& (R_ZERO_33_1292_sample_start_)
          $T[R_ZERO_33_1292_update_start_] 
          $T [R_ZERO_33_1292_update_completed_] $delay 
          R_ZERO_33_1292_update_completed_ <-& (R_ZERO_33_1292_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1292_sample_start_ <-& (R_ZERO_33_1292_sample_start__ps)
          R_ZERO_33_1292_update_start_ <-& (R_ZERO_33_1292_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1292_sample_completed__ps <-& (R_ZERO_33_1292_sample_completed_)
          R_ZERO_33_1292_update_completed__ps <-& (R_ZERO_33_1292_update_completed_)
          $T[RPIPE_noblock_obuf_3_4_1294_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1294_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_4_1294_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1294_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_4
          $T[RPIPE_noblock_obuf_3_4_1294_sample_start_] 
          $T[RPIPE_noblock_obuf_3_4_1294_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_4_1294_update_start_] 
          $T[RPIPE_noblock_obuf_3_4_1294_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_4_1294 with guard R_read_from_3_1293
          // root phi_stmt_1290 not in visited_elements
          // root phi_stmt_1295 not in visited_elements
          // root phi_stmt_1300 not in visited_elements
          // root phi_stmt_1304 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_4_1294_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_4_1294_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_4_1294_sample_start_ &-> (RPIPE_noblock_obuf_3_4_1294_Sample)
          RPIPE_noblock_obuf_3_4_1294_sample_completed_ <-& (RPIPE_noblock_obuf_3_4_1294_Sample)
          RPIPE_noblock_obuf_3_4_1294_update_start_ <-& (RPIPE_noblock_obuf_3_4_1294_sample_completed_)
          RPIPE_noblock_obuf_3_4_1294_update_start_ &-> (RPIPE_noblock_obuf_3_4_1294_Update)
          RPIPE_noblock_obuf_3_4_1294_update_completed_ <-& (RPIPE_noblock_obuf_3_4_1294_Update)
          RPIPE_noblock_obuf_3_4_1294_sample_start_ o<-& (RPIPE_noblock_obuf_3_4_1294_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_4_1294_sample_start_ <-& (RPIPE_noblock_obuf_3_4_1294_sample_start__ps)
          RPIPE_noblock_obuf_3_4_1294_update_start_ <-& (RPIPE_noblock_obuf_3_4_1294_update_start__ps)
          // RAW reenables for noblock_obuf_3_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_4_1294_sample_completed__ps <-& (RPIPE_noblock_obuf_3_4_1294_sample_completed_)
          RPIPE_noblock_obuf_3_4_1294_update_completed__ps <-& (RPIPE_noblock_obuf_3_4_1294_update_completed_)
          $phisequencer [ phi_stmt_1290_phi_seq] : 
          phi_stmt_1290_entry_trigger R_ZERO_33_1292_sample_start__ps R_ZERO_33_1292_sample_completed__ps R_ZERO_33_1292_update_start__ps R_ZERO_33_1292_update_completed__ps phi_stmt_1290_loopback_trigger RPIPE_noblock_obuf_3_4_1294_sample_start__ps RPIPE_noblock_obuf_3_4_1294_sample_completed__ps RPIPE_noblock_obuf_3_4_1294_update_start__ps RPIPE_noblock_obuf_3_4_1294_update_completed__ps :
          phi_stmt_1290_sample_start__ps phi_stmt_1290_sample_completed__ps phi_stmt_1290_update_start__ps phi_stmt_1290_update_completed__ps :
          phi_stmt_1290_entry_sample_req_ps phi_stmt_1290_loopback_sample_req_ps : 
          phi_stmt_1290_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1290
          // start:  PHI statement phi_stmt_1295
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1295_sample_start_] 
          $T[phi_stmt_1295_sample_completed_] 
          $T[phi_stmt_1295_update_start_] 
          $T[phi_stmt_1295_update_completed_] 
          $T[phi_stmt_1295_sample_start__ps] 
          phi_stmt_1295_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1295_sample_completed__ps] 
          phi_stmt_1295_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1295_update_start__ps] 
          phi_stmt_1295_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1295_update_completed__ps] 
          phi_stmt_1295_update_completed_ <-& (phi_stmt_1295_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1295_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1295_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1295_update_start_)
          $T[phi_stmt_1295_loopback_trigger] 
          phi_stmt_1295_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1295_loopback_sample_req] 
          $T[phi_stmt_1295_loopback_sample_req_ps] 
          phi_stmt_1295_loopback_sample_req <-& (phi_stmt_1295_loopback_sample_req_ps)
          phi_stmt_1295_loopback_sample_req &-> ($null)
          $T[phi_stmt_1295_entry_trigger] 
          phi_stmt_1295_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1295_entry_sample_req] 
          $T[phi_stmt_1295_entry_sample_req_ps] 
          phi_stmt_1295_entry_sample_req <-& (phi_stmt_1295_entry_sample_req_ps)
          phi_stmt_1295_entry_sample_req &-> ($null)
          phi_stmt_1295_update_start_ o<-& (phi_stmt_1295_update_completed_ 0)
          phi_stmt_1295_sample_start_ o<-& (phi_stmt_1295_sample_completed_ 1)
          $T[phi_stmt_1295_merged_reqs] 
          $T[phi_stmt_1295_phi_mux_ack] 
          $T[phi_stmt_1295_phi_mux_ack_ps] 
          phi_stmt_1295_phi_mux_ack_ps <-& (phi_stmt_1295_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1295_update_completed_)
          $T[R_ZERO_33_1297_sample_start__ps] 
          $T[R_ZERO_33_1297_sample_completed__ps] 
          $T[R_ZERO_33_1297_update_start__ps] 
          $T[R_ZERO_33_1297_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1297_sample_start_] 
          $T[R_ZERO_33_1297_sample_completed_] 
          R_ZERO_33_1297_sample_completed_ <-& (R_ZERO_33_1297_sample_start_)
          $T[R_ZERO_33_1297_update_start_] 
          $T [R_ZERO_33_1297_update_completed_] $delay 
          R_ZERO_33_1297_update_completed_ <-& (R_ZERO_33_1297_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1297_sample_start_ <-& (R_ZERO_33_1297_sample_start__ps)
          R_ZERO_33_1297_update_start_ <-& (R_ZERO_33_1297_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1297_sample_completed__ps <-& (R_ZERO_33_1297_sample_completed_)
          R_ZERO_33_1297_update_completed__ps <-& (R_ZERO_33_1297_update_completed_)
          $T[RPIPE_noblock_obuf_4_4_1299_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1299_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_4_1299_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1299_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_4
          $T[RPIPE_noblock_obuf_4_4_1299_sample_start_] 
          $T[RPIPE_noblock_obuf_4_4_1299_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_4_1299_update_start_] 
          $T[RPIPE_noblock_obuf_4_4_1299_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_4_1299 with guard R_read_from_4_1298
          // root phi_stmt_1295 not in visited_elements
          // root phi_stmt_1300 not in visited_elements
          // root phi_stmt_1304 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_4_1299_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_4_1299_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_4_1299_sample_start_ &-> (RPIPE_noblock_obuf_4_4_1299_Sample)
          RPIPE_noblock_obuf_4_4_1299_sample_completed_ <-& (RPIPE_noblock_obuf_4_4_1299_Sample)
          RPIPE_noblock_obuf_4_4_1299_update_start_ <-& (RPIPE_noblock_obuf_4_4_1299_sample_completed_)
          RPIPE_noblock_obuf_4_4_1299_update_start_ &-> (RPIPE_noblock_obuf_4_4_1299_Update)
          RPIPE_noblock_obuf_4_4_1299_update_completed_ <-& (RPIPE_noblock_obuf_4_4_1299_Update)
          RPIPE_noblock_obuf_4_4_1299_sample_start_ o<-& (RPIPE_noblock_obuf_4_4_1299_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_4_1299_sample_start_ <-& (RPIPE_noblock_obuf_4_4_1299_sample_start__ps)
          RPIPE_noblock_obuf_4_4_1299_update_start_ <-& (RPIPE_noblock_obuf_4_4_1299_update_start__ps)
          // RAW reenables for noblock_obuf_4_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_4_1299_sample_completed__ps <-& (RPIPE_noblock_obuf_4_4_1299_sample_completed_)
          RPIPE_noblock_obuf_4_4_1299_update_completed__ps <-& (RPIPE_noblock_obuf_4_4_1299_update_completed_)
          $phisequencer [ phi_stmt_1295_phi_seq] : 
          phi_stmt_1295_entry_trigger R_ZERO_33_1297_sample_start__ps R_ZERO_33_1297_sample_completed__ps R_ZERO_33_1297_update_start__ps R_ZERO_33_1297_update_completed__ps phi_stmt_1295_loopback_trigger RPIPE_noblock_obuf_4_4_1299_sample_start__ps RPIPE_noblock_obuf_4_4_1299_sample_completed__ps RPIPE_noblock_obuf_4_4_1299_update_start__ps RPIPE_noblock_obuf_4_4_1299_update_completed__ps :
          phi_stmt_1295_sample_start__ps phi_stmt_1295_sample_completed__ps phi_stmt_1295_update_start__ps phi_stmt_1295_update_completed__ps :
          phi_stmt_1295_entry_sample_req_ps phi_stmt_1295_loopback_sample_req_ps : 
          phi_stmt_1295_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1295
          // start:  PHI statement phi_stmt_1300
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1300_sample_start_] 
          $T[phi_stmt_1300_sample_completed_] 
          $T[phi_stmt_1300_update_start_] 
          $T[phi_stmt_1300_update_completed_] 
          $T[phi_stmt_1300_sample_start__ps] 
          phi_stmt_1300_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1300_sample_completed__ps] 
          phi_stmt_1300_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1300_update_start__ps] 
          phi_stmt_1300_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1300_update_completed__ps] 
          phi_stmt_1300_update_completed_ <-& (phi_stmt_1300_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1300_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1300_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1300_update_start_)
          $T[phi_stmt_1300_loopback_trigger] 
          phi_stmt_1300_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1300_loopback_sample_req] 
          $T[phi_stmt_1300_loopback_sample_req_ps] 
          phi_stmt_1300_loopback_sample_req <-& (phi_stmt_1300_loopback_sample_req_ps)
          phi_stmt_1300_loopback_sample_req &-> ($null)
          $T[phi_stmt_1300_entry_trigger] 
          phi_stmt_1300_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1300_entry_sample_req] 
          $T[phi_stmt_1300_entry_sample_req_ps] 
          phi_stmt_1300_entry_sample_req <-& (phi_stmt_1300_entry_sample_req_ps)
          phi_stmt_1300_entry_sample_req &-> ($null)
          phi_stmt_1300_update_start_ o<-& (phi_stmt_1300_update_completed_ 0)
          phi_stmt_1300_sample_start_ o<-& (phi_stmt_1300_sample_completed_ 1)
          $T[phi_stmt_1300_merged_reqs] 
          $T[phi_stmt_1300_phi_mux_ack] 
          $T[phi_stmt_1300_phi_mux_ack_ps] 
          phi_stmt_1300_phi_mux_ack_ps <-& (phi_stmt_1300_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1300_update_completed_)
          $T[R_ZERO_3_1302_sample_start__ps] 
          $T[R_ZERO_3_1302_sample_completed__ps] 
          $T[R_ZERO_3_1302_update_start__ps] 
          $T[R_ZERO_3_1302_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1302_sample_start_] 
          $T[R_ZERO_3_1302_sample_completed_] 
          R_ZERO_3_1302_sample_completed_ <-& (R_ZERO_3_1302_sample_start_)
          $T[R_ZERO_3_1302_update_start_] 
          $T [R_ZERO_3_1302_update_completed_] $delay 
          R_ZERO_3_1302_update_completed_ <-& (R_ZERO_3_1302_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1302_sample_start_ <-& (R_ZERO_3_1302_sample_start__ps)
          R_ZERO_3_1302_update_start_ <-& (R_ZERO_3_1302_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1302_sample_completed__ps <-& (R_ZERO_3_1302_sample_completed_)
          R_ZERO_3_1302_update_completed__ps <-& (R_ZERO_3_1302_update_completed_)
          $T[R_next_active_packet_1303_sample_start__ps] 
          $T[R_next_active_packet_1303_sample_completed__ps] 
          $T[R_next_active_packet_1303_update_start__ps] 
          $T[R_next_active_packet_1303_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1303_sample_start_] 
          $T[R_next_active_packet_1303_sample_completed_] 
          $T[R_next_active_packet_1303_update_start_] 
          $T[R_next_active_packet_1303_update_completed_] 
          ;;[R_next_active_packet_1303_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1303_sample_start_ &-> (R_next_active_packet_1303_Sample)
          R_next_active_packet_1303_sample_completed_ <-& (R_next_active_packet_1303_Sample)
          ;;[R_next_active_packet_1303_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1303_update_start_ &-> (R_next_active_packet_1303_Update)
          R_next_active_packet_1303_update_completed_ <-& (R_next_active_packet_1303_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1303_sample_start_ <-& (R_next_active_packet_1303_sample_start__ps)
          R_next_active_packet_1303_update_start_ <-& (R_next_active_packet_1303_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1303_sample_completed__ps <-& (R_next_active_packet_1303_sample_completed_)
          R_next_active_packet_1303_update_completed__ps <-& (R_next_active_packet_1303_update_completed_)
          $phisequencer [ phi_stmt_1300_phi_seq] : 
          phi_stmt_1300_entry_trigger R_ZERO_3_1302_sample_start__ps R_ZERO_3_1302_sample_completed__ps R_ZERO_3_1302_update_start__ps R_ZERO_3_1302_update_completed__ps phi_stmt_1300_loopback_trigger R_next_active_packet_1303_sample_start__ps R_next_active_packet_1303_sample_completed__ps R_next_active_packet_1303_update_start__ps R_next_active_packet_1303_update_completed__ps :
          phi_stmt_1300_sample_start__ps phi_stmt_1300_sample_completed__ps phi_stmt_1300_update_start__ps phi_stmt_1300_update_completed__ps :
          phi_stmt_1300_entry_sample_req_ps phi_stmt_1300_loopback_sample_req_ps : 
          phi_stmt_1300_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1300
          // start:  PHI statement phi_stmt_1304
          // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1304_sample_start_] 
          $T[phi_stmt_1304_sample_completed_] 
          $T[phi_stmt_1304_update_start_] 
          $T[phi_stmt_1304_update_completed_] 
          $T[phi_stmt_1304_sample_start__ps] 
          phi_stmt_1304_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1304_sample_completed__ps] 
          phi_stmt_1304_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1304_update_start__ps] 
          phi_stmt_1304_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1304_update_completed__ps] 
          phi_stmt_1304_update_completed_ <-& (phi_stmt_1304_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1304_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1304_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1304_update_start_)
          $T[phi_stmt_1304_loopback_trigger] 
          phi_stmt_1304_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1304_loopback_sample_req] 
          $T[phi_stmt_1304_loopback_sample_req_ps] 
          phi_stmt_1304_loopback_sample_req <-& (phi_stmt_1304_loopback_sample_req_ps)
          phi_stmt_1304_loopback_sample_req &-> ($null)
          $T[phi_stmt_1304_entry_trigger] 
          phi_stmt_1304_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1304_entry_sample_req] 
          $T[phi_stmt_1304_entry_sample_req_ps] 
          phi_stmt_1304_entry_sample_req <-& (phi_stmt_1304_entry_sample_req_ps)
          phi_stmt_1304_entry_sample_req &-> ($null)
          phi_stmt_1304_update_start_ o<-& (phi_stmt_1304_update_completed_ 0)
          phi_stmt_1304_sample_start_ o<-& (phi_stmt_1304_sample_completed_ 1)
          $T[phi_stmt_1304_merged_reqs] 
          $T[phi_stmt_1304_phi_mux_ack] 
          $T[phi_stmt_1304_phi_mux_ack_ps] 
          phi_stmt_1304_phi_mux_ack_ps <-& (phi_stmt_1304_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1304_update_completed_)
          $T[R_ONE_3_1306_sample_start__ps] 
          $T[R_ONE_3_1306_sample_completed__ps] 
          $T[R_ONE_3_1306_update_start__ps] 
          $T[R_ONE_3_1306_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ONE_3_1306_sample_start_] 
          $T[R_ONE_3_1306_sample_completed_] 
          R_ONE_3_1306_sample_completed_ <-& (R_ONE_3_1306_sample_start_)
          $T[R_ONE_3_1306_update_start_] 
          $T [R_ONE_3_1306_update_completed_] $delay 
          R_ONE_3_1306_update_completed_ <-& (R_ONE_3_1306_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ONE_3_1306_sample_start_ <-& (R_ONE_3_1306_sample_start__ps)
          R_ONE_3_1306_update_start_ <-& (R_ONE_3_1306_update_start__ps)
          // Phi complete dependency.
          R_ONE_3_1306_sample_completed__ps <-& (R_ONE_3_1306_sample_completed_)
          R_ONE_3_1306_update_completed__ps <-& (R_ONE_3_1306_update_completed_)
          $T[R_next_pkt_priority_1307_sample_start__ps] 
          $T[R_next_pkt_priority_1307_sample_completed__ps] 
          $T[R_next_pkt_priority_1307_update_start__ps] 
          $T[R_next_pkt_priority_1307_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_1307_sample_start_] 
          $T[R_next_pkt_priority_1307_sample_completed_] 
          $T[R_next_pkt_priority_1307_update_start_] 
          $T[R_next_pkt_priority_1307_update_completed_] 
          ;;[R_next_pkt_priority_1307_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_1307_sample_start_ &-> (R_next_pkt_priority_1307_Sample)
          R_next_pkt_priority_1307_sample_completed_ <-& (R_next_pkt_priority_1307_Sample)
          ;;[R_next_pkt_priority_1307_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_1307_update_start_ &-> (R_next_pkt_priority_1307_Update)
          R_next_pkt_priority_1307_update_completed_ <-& (R_next_pkt_priority_1307_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_1307_sample_start_ <-& (R_next_pkt_priority_1307_sample_start__ps)
          R_next_pkt_priority_1307_update_start_ <-& (R_next_pkt_priority_1307_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_1307_sample_completed__ps <-& (R_next_pkt_priority_1307_sample_completed_)
          R_next_pkt_priority_1307_update_completed__ps <-& (R_next_pkt_priority_1307_update_completed_)
          $phisequencer [ phi_stmt_1304_phi_seq] : 
          phi_stmt_1304_entry_trigger R_ONE_3_1306_sample_start__ps R_ONE_3_1306_sample_completed__ps R_ONE_3_1306_update_start__ps R_ONE_3_1306_update_completed__ps phi_stmt_1304_loopback_trigger R_next_pkt_priority_1307_sample_start__ps R_next_pkt_priority_1307_sample_completed__ps R_next_pkt_priority_1307_update_start__ps R_next_pkt_priority_1307_update_completed__ps :
          phi_stmt_1304_sample_start__ps phi_stmt_1304_sample_completed__ps phi_stmt_1304_update_start__ps phi_stmt_1304_update_completed__ps :
          phi_stmt_1304_entry_sample_req_ps phi_stmt_1304_loopback_sample_req_ps : 
          phi_stmt_1304_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1304
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 372
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 373
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 374
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 375
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 376
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 377
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 378
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 379
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 380
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 381
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 382
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 383
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 385
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 386
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 387
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_4
          $T[WPIPE_out_data_4_1494_sample_start_] 
          $T[WPIPE_out_data_4_1494_sample_completed_] 
          $T[WPIPE_out_data_4_1494_update_start_] 
          $T[WPIPE_out_data_4_1494_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_4_1494 with guard R_send_flag_1493
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1276_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1280_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1285_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1290_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1295_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1300_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1304_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1276_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1280_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1285_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1290_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1295_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1300_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1304_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          ;;[WPIPE_out_data_4_1494_Sample] 
          {
            // pipe write sample-start out_data_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_4_1494_Update] 
          {
            // pipe write update (complete) out_data_4
            $T [req] $T [ack] 
          }
          WPIPE_out_data_4_1494_sample_start_ &-> (WPIPE_out_data_4_1494_Sample)
          WPIPE_out_data_4_1494_sample_completed_ <-& (WPIPE_out_data_4_1494_Sample)
          WPIPE_out_data_4_1494_update_start_ <-& (WPIPE_out_data_4_1494_sample_completed_)
          WPIPE_out_data_4_1494_update_start_ &-> (WPIPE_out_data_4_1494_Update)
          WPIPE_out_data_4_1494_update_completed_ <-& (WPIPE_out_data_4_1494_Update)
          WPIPE_out_data_4_1494_sample_start_ o<-& (WPIPE_out_data_4_1494_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_4_1494_sample_start_
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1276_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1280_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1285_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1290_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1295_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1300_update_completed_)
          WPIPE_out_data_4_1494_sample_start_ <-& (phi_stmt_1304_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_4_1494_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1276_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1280_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1285_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1290_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1295_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1300_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          phi_stmt_1304_update_start_ o<-& (WPIPE_out_data_4_1494_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
          // pipe read/write dependencies for pipe out_data_4
          // read-dependencies for pipe out_data_4
          // write-dependencies for pipe out_data_4
          // signal write dependencies for out_data_4
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1274__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1274_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1274__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1274_loop_body : condition_evaluated
        $bind do_while_stmt_1274__entry__  => do_while_stmt_1274_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1274_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1274__exit__)
      }
      do_while_stmt_1274__entry__ |-> (do_while_stmt_1274)
      do_while_stmt_1274__exit__ <-| (do_while_stmt_1274)
      do_while_stmt_1274__entry__ <-| (branch_block_stmt_1273__entry__)
      do_while_stmt_1274__exit__ |-> (branch_block_stmt_1273__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 356
    // constant-object-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 352
    // constant-object-declarations for block %outputPort_4_Daemon
    //  file .Aa/switch2x2.opt.aa, line 347
    // constant-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 352
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 354
    // 1 
    $constant $W[konst_1498_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 356
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 357
    // ZERO_8
    $constant $W[R_ZERO_8_1278_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 359
    // ZERO_33
    $constant $W[R_ZERO_33_1282_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 361
    // ZERO_33
    $constant $W[R_ZERO_33_1287_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 363
    // ZERO_33
    $constant $W[R_ZERO_33_1292_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 365
    // ZERO_33
    $constant $W[R_ZERO_33_1297_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 367
    // ZERO_3
    $constant $W[R_ZERO_3_1302_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 369
    // ONE_3
    $constant $W[R_ONE_3_1306_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_1311_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1316_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1321_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1326_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1331_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1334_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1337_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1340_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1344_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1347_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1350_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1353_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 377
    // 0 
    $constant $W[konst_1370_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_1373_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_1379_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1382_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1392_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1400_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1408_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1416_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1433_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1437_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1440_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1444_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1448_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1452_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1455_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1459_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1466_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1469_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1472_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1475_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1479_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1482_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1485_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1488_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 352
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 354
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 356
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 357
    $W[next_down_counter_1387_1279_buffered] : $int<8>
    // down_counter
    $W[down_counter_1276] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 359
    // noblock_obuf_1_4
    $W[RPIPE_noblock_obuf_1_4_1284_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1280] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 361
    // noblock_obuf_2_4
    $W[RPIPE_noblock_obuf_2_4_1289_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1285] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 363
    // noblock_obuf_3_4
    $W[RPIPE_noblock_obuf_3_4_1294_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1290] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 365
    // noblock_obuf_4_4
    $W[RPIPE_noblock_obuf_4_4_1299_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1295] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 367
    $W[next_active_packet_1367_1303_buffered] : $int<3>
    // active_packet
    $W[active_packet_1300] : $int<3>
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 369
    $W[next_pkt_priority_1367_1307_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_1304] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 372
    // p1_valid
    $W[p1_valid_1313] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 373
    // p2_valid
    $W[p2_valid_1318] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 374
    // p3_valid
    $W[p3_valid_1323] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 375
    // p4_valid
    $W[p4_valid_1328] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 376
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1332_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1335_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1338_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1341_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1342_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1345_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1348_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1351_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1354_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1355_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1357] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 377
    // next_active_packet
    $W[next_active_packet_1367] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_1367] : $int<3>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 378
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_1371_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1374_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1376] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 379
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1383_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1385_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1387] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 380
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1390_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1393_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1395] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 381
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1398_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1401_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1403] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 382
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1406_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1409_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1411] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 383
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1414_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1417_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1419] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 385
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1434_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1436_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1438_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1441_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1443_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1445_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1446_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1449_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1451_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1453_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1456_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1458_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1460_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1461_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1463] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 386
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1467_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1470_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1473_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1476_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1477_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1480_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1483_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1486_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1489_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1490_wire] : $int<1>
    // send_flag
    $W[send_flag_1492] : $int<1>
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 387
    // out_data_4
    // datapath-instances for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 352
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 354
    ==0? [do_while_stmt_1274_branch] (konst_1498_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 356
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 357
    # := [next_down_counter_1387_1279_buf] (next_down_counter_1387) (next_down_counter_1387_1279_buffered)     $fullrate
    $buffering $out next_down_counter_1387_1279_buf next_down_counter_1387_1279_buffered  1
    # $phi [phi_stmt_1276] (R_ZERO_8_1278_wire_constant next_down_counter_1387_1279_buffered) ( down_counter_1276 ) $fullrate
    // $buffering  $out phi_stmt_1276 down_counter_1276 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 359
    // noblock_obuf_1_4
    $ioport $in [RPIPE_noblock_obuf_1_4_1284_inst] (noblock_obuf_1_4) (RPIPE_noblock_obuf_1_4_1284_wire) $guard ( read_from_1_1395 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_4_1284_inst RPIPE_noblock_obuf_1_4_1284_wire 1
    # $phi [phi_stmt_1280] (R_ZERO_33_1282_wire_constant RPIPE_noblock_obuf_1_4_1284_wire) ( pkt_1_e_word_1280 ) $fullrate
    // $buffering  $out phi_stmt_1280 pkt_1_e_word_1280 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 361
    // noblock_obuf_2_4
    $ioport $in [RPIPE_noblock_obuf_2_4_1289_inst] (noblock_obuf_2_4) (RPIPE_noblock_obuf_2_4_1289_wire) $guard ( read_from_2_1403 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_4_1289_inst RPIPE_noblock_obuf_2_4_1289_wire 1
    # $phi [phi_stmt_1285] (R_ZERO_33_1287_wire_constant RPIPE_noblock_obuf_2_4_1289_wire) ( pkt_2_e_word_1285 ) $fullrate
    // $buffering  $out phi_stmt_1285 pkt_2_e_word_1285 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 363
    // noblock_obuf_3_4
    $ioport $in [RPIPE_noblock_obuf_3_4_1294_inst] (noblock_obuf_3_4) (RPIPE_noblock_obuf_3_4_1294_wire) $guard ( read_from_3_1411 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_4_1294_inst RPIPE_noblock_obuf_3_4_1294_wire 1
    # $phi [phi_stmt_1290] (R_ZERO_33_1292_wire_constant RPIPE_noblock_obuf_3_4_1294_wire) ( pkt_3_e_word_1290 ) $fullrate
    // $buffering  $out phi_stmt_1290 pkt_3_e_word_1290 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 365
    // noblock_obuf_4_4
    $ioport $in [RPIPE_noblock_obuf_4_4_1299_inst] (noblock_obuf_4_4) (RPIPE_noblock_obuf_4_4_1299_wire) $guard ( read_from_4_1419 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_4_1299_inst RPIPE_noblock_obuf_4_4_1299_wire 1
    # $phi [phi_stmt_1295] (R_ZERO_33_1297_wire_constant RPIPE_noblock_obuf_4_4_1299_wire) ( pkt_4_e_word_1295 ) $fullrate
    // $buffering  $out phi_stmt_1295 pkt_4_e_word_1295 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 367
    # := [next_active_packet_1367_1303_buf] (next_active_packet_1367) (next_active_packet_1367_1303_buffered)     $fullrate
    $buffering $out next_active_packet_1367_1303_buf next_active_packet_1367_1303_buffered  1
    # $phi [phi_stmt_1300] (R_ZERO_3_1302_wire_constant next_active_packet_1367_1303_buffered) ( active_packet_1300 ) $fullrate
    // $buffering  $out phi_stmt_1300 active_packet_1300 2
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 369
    # := [next_pkt_priority_1367_1307_buf] (next_pkt_priority_1367) (next_pkt_priority_1367_1307_buffered)     $fullrate
    $buffering $out next_pkt_priority_1367_1307_buf next_pkt_priority_1367_1307_buffered  1
    # $phi [phi_stmt_1304] (R_ONE_3_1306_wire_constant next_pkt_priority_1367_1307_buffered) ( pkt_priority_1304 ) $fullrate
    // $buffering  $out phi_stmt_1304 pkt_priority_1304 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 372
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1312_inst] (pkt_1_e_word_1280 konst_1311_wire_constant) (p1_valid_1313)   $flowthrough 
    $delay BITSEL_u33_u1_1312_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 373
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1317_inst] (pkt_2_e_word_1285 konst_1316_wire_constant) (p2_valid_1318)   $flowthrough 
    $delay BITSEL_u33_u1_1317_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 374
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1322_inst] (pkt_3_e_word_1290 konst_1321_wire_constant) (p3_valid_1323)   $flowthrough 
    $delay BITSEL_u33_u1_1322_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 375
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1327_inst] (pkt_4_e_word_1295 konst_1326_wire_constant) (p4_valid_1328)   $flowthrough 
    $delay BITSEL_u33_u1_1327_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 376
    // (active_packet == 1 )
    ==[EQ_u3_u1_1332_inst] (active_packet_1300 konst_1331_wire_constant) (EQ_u3_u1_1332_wire)   $flowthrough 
    $delay EQ_u3_u1_1332_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1335_inst] (EQ_u3_u1_1332_wire p1_valid_1313 konst_1334_wire_constant) (MUX_1335_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1338_inst] (active_packet_1300 konst_1337_wire_constant) (EQ_u3_u1_1338_wire)   $flowthrough 
    $delay EQ_u3_u1_1338_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1341_inst] (EQ_u3_u1_1338_wire p2_valid_1318 konst_1340_wire_constant) (MUX_1341_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1342_inst] (MUX_1335_wire MUX_1341_wire) (OR_u1_u1_1342_wire)   $flowthrough 
    $delay OR_u1_u1_1342_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1345_inst] (active_packet_1300 konst_1344_wire_constant) (EQ_u3_u1_1345_wire)   $flowthrough 
    $delay EQ_u3_u1_1345_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1348_inst] (EQ_u3_u1_1345_wire p3_valid_1323 konst_1347_wire_constant) (MUX_1348_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1351_inst] (active_packet_1300 konst_1350_wire_constant) (EQ_u3_u1_1351_wire)   $flowthrough 
    $delay EQ_u3_u1_1351_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1354_inst] (EQ_u3_u1_1351_wire p4_valid_1328 konst_1353_wire_constant) (MUX_1354_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1355_inst] (MUX_1348_wire MUX_1354_wire) (OR_u1_u1_1355_wire)   $flowthrough 
    $delay OR_u1_u1_1355_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1356_inst] (OR_u1_u1_1342_wire OR_u1_u1_1355_wire) (valid_active_pkt_word_read_1357)   $flowthrough 
    $delay OR_u1_u1_1356_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 377
    $call [call_stmt_1367_call] $module prioritySelect(down_counter_1276 active_packet_1300 pkt_priority_1304 p1_valid_1313 p2_valid_1318 p3_valid_1323 p4_valid_1328) (next_active_packet_1367 next_pkt_priority_1367)   $flowthrough $fullrate
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 378
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_1371_inst] (next_active_packet_1367 konst_1370_wire_constant) (NEQ_u3_u1_1371_wire)   $flowthrough 
    $delay NEQ_u3_u1_1371_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1374_inst] (down_counter_1276 konst_1373_wire_constant) (EQ_u8_u1_1374_wire)   $flowthrough 
    $delay EQ_u8_u1_1374_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_1375_inst] (NEQ_u3_u1_1371_wire EQ_u8_u1_1374_wire) (started_new_packet_1376)   $flowthrough 
    $delay AND_u1_u1_1375_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 379
    // (down_counter - 1 )
    -[SUB_u8_u8_1383_inst] (down_counter_1276 konst_1382_wire_constant) (SUB_u8_u8_1383_wire)   $flowthrough 
    $delay SUB_u8_u8_1383_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1385_inst] (valid_active_pkt_word_read_1357 SUB_u8_u8_1383_wire down_counter_1276) (MUX_1385_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1386_inst] (started_new_packet_1376 konst_1379_wire_constant MUX_1385_wire) (next_down_counter_1387)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 380
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1390_inst] (p1_valid_1313) (NOT_u1_u1_1390_wire)   $flowthrough
    $delay NOT_u1_u1_1390_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1393_inst] (next_active_packet_1367 konst_1392_wire_constant) (EQ_u3_u1_1393_wire)   $flowthrough 
    $delay EQ_u3_u1_1393_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1394_inst] (NOT_u1_u1_1390_wire EQ_u3_u1_1393_wire) (read_from_1_1395)   $flowthrough 
    $delay OR_u1_u1_1394_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 381
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1398_inst] (p2_valid_1318) (NOT_u1_u1_1398_wire)   $flowthrough
    $delay NOT_u1_u1_1398_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1401_inst] (next_active_packet_1367 konst_1400_wire_constant) (EQ_u3_u1_1401_wire)   $flowthrough 
    $delay EQ_u3_u1_1401_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1402_inst] (NOT_u1_u1_1398_wire EQ_u3_u1_1401_wire) (read_from_2_1403)   $flowthrough 
    $delay OR_u1_u1_1402_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 382
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1406_inst] (p3_valid_1323) (NOT_u1_u1_1406_wire)   $flowthrough
    $delay NOT_u1_u1_1406_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1409_inst] (next_active_packet_1367 konst_1408_wire_constant) (EQ_u3_u1_1409_wire)   $flowthrough 
    $delay EQ_u3_u1_1409_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1410_inst] (NOT_u1_u1_1406_wire EQ_u3_u1_1409_wire) (read_from_3_1411)   $flowthrough 
    $delay OR_u1_u1_1410_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 383
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1414_inst] (p4_valid_1328) (NOT_u1_u1_1414_wire)   $flowthrough
    $delay NOT_u1_u1_1414_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1417_inst] (next_active_packet_1367 konst_1416_wire_constant) (EQ_u3_u1_1417_wire)   $flowthrough 
    $delay EQ_u3_u1_1417_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1418_inst] (NOT_u1_u1_1414_wire EQ_u3_u1_1417_wire) (read_from_4_1419)   $flowthrough 
    $delay OR_u1_u1_1418_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 385
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1434_inst] (next_active_packet_1367 konst_1433_wire_constant) (EQ_u3_u1_1434_wire)   $flowthrough 
    $delay EQ_u3_u1_1434_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1436_inst] (pkt_1_e_word_1280 31 0) (slice_1436_wire)  $flowthrough
    $delay slice_1436_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1438_inst] (EQ_u3_u1_1434_wire slice_1436_wire konst_1437_wire_constant) (MUX_1438_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1441_inst] (next_active_packet_1367 konst_1440_wire_constant) (EQ_u3_u1_1441_wire)   $flowthrough 
    $delay EQ_u3_u1_1441_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1443_inst] (pkt_2_e_word_1285 31 0) (slice_1443_wire)  $flowthrough
    $delay slice_1443_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1445_inst] (EQ_u3_u1_1441_wire slice_1443_wire konst_1444_wire_constant) (MUX_1445_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1446_inst] (MUX_1438_wire MUX_1445_wire) (OR_u32_u32_1446_wire)   $flowthrough 
    $delay OR_u32_u32_1446_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1449_inst] (next_active_packet_1367 konst_1448_wire_constant) (EQ_u3_u1_1449_wire)   $flowthrough 
    $delay EQ_u3_u1_1449_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1451_inst] (pkt_3_e_word_1290 31 0) (slice_1451_wire)  $flowthrough
    $delay slice_1451_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1453_inst] (EQ_u3_u1_1449_wire slice_1451_wire konst_1452_wire_constant) (MUX_1453_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1456_inst] (next_active_packet_1367 konst_1455_wire_constant) (EQ_u3_u1_1456_wire)   $flowthrough 
    $delay EQ_u3_u1_1456_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1458_inst] (pkt_4_e_word_1295 31 0) (slice_1458_wire)  $flowthrough
    $delay slice_1458_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1460_inst] (EQ_u3_u1_1456_wire slice_1458_wire konst_1459_wire_constant) (MUX_1460_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1461_inst] (MUX_1453_wire MUX_1460_wire) (OR_u32_u32_1461_wire)   $flowthrough 
    $delay OR_u32_u32_1461_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1462_inst] (OR_u32_u32_1446_wire OR_u32_u32_1461_wire) (data_to_out_1463)   $flowthrough 
    $delay OR_u32_u32_1462_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 386
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1467_inst] (next_active_packet_1367 konst_1466_wire_constant) (EQ_u3_u1_1467_wire)   $flowthrough 
    $delay EQ_u3_u1_1467_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1470_inst] (EQ_u3_u1_1467_wire p1_valid_1313 konst_1469_wire_constant) (MUX_1470_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1473_inst] (next_active_packet_1367 konst_1472_wire_constant) (EQ_u3_u1_1473_wire)   $flowthrough 
    $delay EQ_u3_u1_1473_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1476_inst] (EQ_u3_u1_1473_wire p2_valid_1318 konst_1475_wire_constant) (MUX_1476_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1477_inst] (MUX_1470_wire MUX_1476_wire) (OR_u1_u1_1477_wire)   $flowthrough 
    $delay OR_u1_u1_1477_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1480_inst] (next_active_packet_1367 konst_1479_wire_constant) (EQ_u3_u1_1480_wire)   $flowthrough 
    $delay EQ_u3_u1_1480_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1483_inst] (EQ_u3_u1_1480_wire p3_valid_1323 konst_1482_wire_constant) (MUX_1483_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1486_inst] (next_active_packet_1367 konst_1485_wire_constant) (EQ_u3_u1_1486_wire)   $flowthrough 
    $delay EQ_u3_u1_1486_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1489_inst] (EQ_u3_u1_1486_wire p4_valid_1328 konst_1488_wire_constant) (MUX_1489_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1490_inst] (MUX_1483_wire MUX_1489_wire) (OR_u1_u1_1490_wire)   $flowthrough 
    $delay OR_u1_u1_1490_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1491_inst] (OR_u1_u1_1477_wire OR_u1_u1_1490_wire) (send_flag_1492)   $flowthrough 
    $delay OR_u1_u1_1491_inst 0
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 387
    // out_data_4
    $ioport $out [WPIPE_out_data_4_1494_inst]  (data_to_out_1463) (out_data_4) $guard ( send_flag_1492 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1274
  //  file .Aa/switch2x2.opt.aa, line 354
  phi_stmt_1276 <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1276_entry_sample_req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1276_loopback_sample_req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1276_phi_mux_ack)
  next_down_counter_1387_1279_buf <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_down_counter_1279_Sample/req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_down_counter_1279_Update/req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_down_counter_1279_Sample/ack branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_down_counter_1279_Update/ack)
  phi_stmt_1280 <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1280_entry_sample_req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1280_loopback_sample_req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1280_phi_mux_ack)
  // noblock_obuf_1_4
  RPIPE_noblock_obuf_1_4_1284_inst <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_1_4_1284_Sample/rr branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_1_4_1284_Update/cr) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_1_4_1284_Sample/ra branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_1_4_1284_Update/ca)
  phi_stmt_1285 <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1285_entry_sample_req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1285_loopback_sample_req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1285_phi_mux_ack)
  // noblock_obuf_2_4
  RPIPE_noblock_obuf_2_4_1289_inst <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_2_4_1289_Sample/rr branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_2_4_1289_Update/cr) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_2_4_1289_Sample/ra branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_2_4_1289_Update/ca)
  phi_stmt_1290 <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1290_entry_sample_req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1290_loopback_sample_req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1290_phi_mux_ack)
  // noblock_obuf_3_4
  RPIPE_noblock_obuf_3_4_1294_inst <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_3_4_1294_Sample/rr branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_3_4_1294_Update/cr) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_3_4_1294_Sample/ra branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_3_4_1294_Update/ca)
  phi_stmt_1295 <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1295_entry_sample_req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1295_loopback_sample_req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1295_phi_mux_ack)
  // noblock_obuf_4_4
  RPIPE_noblock_obuf_4_4_1299_inst <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_4_4_1299_Sample/rr branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_4_4_1299_Update/cr) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_4_4_1299_Sample/ra branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/RPIPE_noblock_obuf_4_4_1299_Update/ca)
  phi_stmt_1300 <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1300_entry_sample_req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1300_loopback_sample_req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1300_phi_mux_ack)
  next_active_packet_1367_1303_buf <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_active_packet_1303_Sample/req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_active_packet_1303_Update/req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_active_packet_1303_Sample/ack branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_active_packet_1303_Update/ack)
  phi_stmt_1304 <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1304_entry_sample_req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1304_loopback_sample_req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/phi_stmt_1304_phi_mux_ack)
  next_pkt_priority_1367_1307_buf <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_pkt_priority_1307_Sample/req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_pkt_priority_1307_Update/req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_pkt_priority_1307_Sample/ack branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/R_next_pkt_priority_1307_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 372
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 373
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 374
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 375
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 376
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 377
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 378
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 379
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 380
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 381
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 382
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 383
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 385
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 386
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 387
  // data_to_out
  // out_data_4
  WPIPE_out_data_4_1494_inst <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/WPIPE_out_data_4_1494_Sample/req branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/WPIPE_out_data_4_1494_Update/req) (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/WPIPE_out_data_4_1494_Sample/ack branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/WPIPE_out_data_4_1494_Update/ack)
  do_while_stmt_1274_branch <=> (branch_block_stmt_1273/do_while_stmt_1274/do_while_stmt_1274_loop_body/condition_evaluated) (branch_block_stmt_1273/do_while_stmt_1274/loop_exit/ack branch_block_stmt_1273/do_while_stmt_1274/loop_taken/ack)
}
