// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data_1 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [in_data_1] 32 $depth 4 
// $pipe  in_data_2 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [in_data_2] 32 $depth 4 
// $pipe  in_data_3 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [in_data_3] 32 $depth 4 
// $pipe  in_data_4 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [in_data_4] 32 $depth 4 
// $noblock $pipe  noblock_obuf_1_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_4] 33 $depth 256 
// $pipe  out_data_1 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [out_data_1] 32 $depth 4 
// $pipe  out_data_2 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [out_data_2] 32 $depth 4 
// $pipe  out_data_3 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [out_data_3] 32 $depth 4 
// $pipe  out_data_4 : $uint<32>  $depth 4 
// can point into 
// in scope  top-level
$pipe [out_data_4] 32 $depth 4 
$constant $W[ONE_1] : $int<1> := _b1// 1
$constant $W[ONE_2] : $int<2> := _b01// 1
$constant $W[ONE_3] : $int<3> := _b001// 1
$constant $W[ONE_33] : $int<33> := _b000000000000000000000000000000001// 1
$constant $W[ONE_8] : $int<8> := _b00000001// 1
$constant $W[ZERO_1] : $int<1> := _b0// 0
$constant $W[ZERO_2] : $int<2> := _b00// 0
$constant $W[ZERO_3] : $int<3> := _b000// 0
$constant $W[ZERO_33] : $int<33> := _b000000000000000000000000000000000// 0
$constant $W[ZERO_8] : $int<8> := _b00000000// 0
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/switch2x2.opt.aa, line 59
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/switch2x2.opt.aa, line 59
  }
  // end data-path
}
$module [inputPort_1_Daemon] 
{
  // pipe-declarations for block %inputPort_1_Daemon
  //  file .Aa/switch2x2.opt.aa, line 66
  // pipe-declarations for block %inputPort_1_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 71
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_64] // Branch Block  file .Aa/switch2x2.opt.aa, line 71
    {
      $P [branch_block_stmt_64__entry__]
      branch_block_stmt_64__entry__ <-| ($entry)
      $P [branch_block_stmt_64__exit__]
      branch_block_stmt_64__exit__ |-> ($exit)
      $P [do_while_stmt_65__entry__] 
      $P [do_while_stmt_65__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 73
      <o> [do_while_stmt_65]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_65__entry__] 
        $P[do_while_stmt_65__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_65_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_67
          // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_67_sample_start_] 
          $T[phi_stmt_67_sample_completed_] 
          $T[phi_stmt_67_update_start_] 
          $T[phi_stmt_67_update_completed_] 
          $T[phi_stmt_67_sample_start__ps] 
          phi_stmt_67_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_67_sample_completed__ps] 
          phi_stmt_67_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_67_update_start__ps] 
          phi_stmt_67_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_67_update_completed__ps] 
          phi_stmt_67_update_completed_ <-& (phi_stmt_67_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_67_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_67_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_67_update_start_)
          $T[phi_stmt_67_loopback_trigger] 
          phi_stmt_67_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_67_loopback_sample_req] 
          $T[phi_stmt_67_loopback_sample_req_ps] 
          phi_stmt_67_loopback_sample_req <-& (phi_stmt_67_loopback_sample_req_ps)
          phi_stmt_67_loopback_sample_req &-> ($null)
          $T[phi_stmt_67_entry_trigger] 
          phi_stmt_67_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_67_entry_sample_req] 
          $T[phi_stmt_67_entry_sample_req_ps] 
          phi_stmt_67_entry_sample_req <-& (phi_stmt_67_entry_sample_req_ps)
          phi_stmt_67_entry_sample_req &-> ($null)
          phi_stmt_67_update_start_ o<-& (phi_stmt_67_update_completed_ 0)
          phi_stmt_67_sample_start_ o<-& (phi_stmt_67_sample_completed_ 1)
          $T[phi_stmt_67_merged_reqs] 
          $T[phi_stmt_67_phi_mux_ack] 
          $T[phi_stmt_67_phi_mux_ack_ps] 
          phi_stmt_67_phi_mux_ack_ps <-& (phi_stmt_67_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_67_update_completed_)
          $T[R_next_count_down_69_sample_start__ps] 
          $T[R_next_count_down_69_sample_completed__ps] 
          $T[R_next_count_down_69_update_start__ps] 
          $T[R_next_count_down_69_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_count_down_69_sample_start_] 
          $T[R_next_count_down_69_sample_completed_] 
          $T[R_next_count_down_69_update_start_] 
          $T[R_next_count_down_69_update_completed_] 
          ;;[R_next_count_down_69_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_69_sample_start_ &-> (R_next_count_down_69_Sample)
          R_next_count_down_69_sample_completed_ <-& (R_next_count_down_69_Sample)
          ;;[R_next_count_down_69_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_69_update_start_ &-> (R_next_count_down_69_Update)
          R_next_count_down_69_update_completed_ <-& (R_next_count_down_69_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_69_sample_start_ <-& (R_next_count_down_69_sample_start__ps)
          R_next_count_down_69_update_start_ <-& (R_next_count_down_69_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_69_sample_completed__ps <-& (R_next_count_down_69_sample_completed_)
          R_next_count_down_69_update_completed__ps <-& (R_next_count_down_69_update_completed_)
          $T[type_cast_72_sample_start__ps] 
          $T[type_cast_72_sample_completed__ps] 
          $T[type_cast_72_update_start__ps] 
          $T[type_cast_72_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_72_sample_start_] 
          $T[type_cast_72_sample_completed_] 
          type_cast_72_sample_completed_ <-& (type_cast_72_sample_start_)
          $T[type_cast_72_update_start_] 
          $T [type_cast_72_update_completed_] $delay 
          type_cast_72_update_completed_ <-& (type_cast_72_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_72_sample_start_ <-& (type_cast_72_sample_start__ps)
          type_cast_72_update_start_ <-& (type_cast_72_update_start__ps)
          // Phi complete dependency.
          type_cast_72_sample_completed__ps <-& (type_cast_72_sample_completed_)
          type_cast_72_update_completed__ps <-& (type_cast_72_update_completed_)
          $phisequencer [ phi_stmt_67_phi_seq] : 
          phi_stmt_67_loopback_trigger R_next_count_down_69_sample_start__ps R_next_count_down_69_sample_completed__ps R_next_count_down_69_update_start__ps R_next_count_down_69_update_completed__ps phi_stmt_67_entry_trigger type_cast_72_sample_start__ps type_cast_72_sample_completed__ps type_cast_72_update_start__ps type_cast_72_update_completed__ps :
          phi_stmt_67_sample_start__ps phi_stmt_67_sample_completed__ps phi_stmt_67_update_start__ps phi_stmt_67_update_completed__ps :
          phi_stmt_67_loopback_sample_req_ps phi_stmt_67_entry_sample_req_ps : 
          phi_stmt_67_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_67
          // start:  single source PHI statement phi_stmt_73
          // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_73_sample_start_] 
          $T[phi_stmt_73_sample_completed_] 
          $T[phi_stmt_73_update_start_] 
          $T[phi_stmt_73_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_73_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_73_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_73_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_1
          $T[RPIPE_in_data_1_75_sample_start_] 
          $T[RPIPE_in_data_1_75_sample_completed_] 
          $T[RPIPE_in_data_1_75_update_start_] 
          $T[RPIPE_in_data_1_75_update_completed_] 
          ;;[RPIPE_in_data_1_75_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_1_75_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_1_75_sample_start_ &-> (RPIPE_in_data_1_75_Sample)
          RPIPE_in_data_1_75_sample_completed_ <-& (RPIPE_in_data_1_75_Sample)
          RPIPE_in_data_1_75_update_start_ <-& (RPIPE_in_data_1_75_sample_completed_)
          RPIPE_in_data_1_75_update_start_ &-> (RPIPE_in_data_1_75_Update)
          RPIPE_in_data_1_75_update_completed_ <-& (RPIPE_in_data_1_75_Update)
          RPIPE_in_data_1_75_sample_start_ o<-& (RPIPE_in_data_1_75_update_completed_ 0)
          // RAW reenables for in_data_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_1_75_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_1_75_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_1_75_update_start_)
          phi_stmt_73_update_completed_ <-& (RPIPE_in_data_1_75_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_73_update_completed_)
          // done: PHI Statement phi_stmt_73
          // start:  PHI statement phi_stmt_76
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_76_sample_start_] 
          $T[phi_stmt_76_sample_completed_] 
          $T[phi_stmt_76_update_start_] 
          $T[phi_stmt_76_update_completed_] 
          $T[phi_stmt_76_sample_start__ps] 
          phi_stmt_76_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_76_sample_completed__ps] 
          phi_stmt_76_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_76_update_start__ps] 
          phi_stmt_76_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_76_update_completed__ps] 
          phi_stmt_76_update_completed_ <-& (phi_stmt_76_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_76_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_76_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_76_update_start_)
          $T[phi_stmt_76_loopback_trigger] 
          phi_stmt_76_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_76_loopback_sample_req] 
          $T[phi_stmt_76_loopback_sample_req_ps] 
          phi_stmt_76_loopback_sample_req <-& (phi_stmt_76_loopback_sample_req_ps)
          phi_stmt_76_loopback_sample_req &-> ($null)
          $T[phi_stmt_76_entry_trigger] 
          phi_stmt_76_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_76_entry_sample_req] 
          $T[phi_stmt_76_entry_sample_req_ps] 
          phi_stmt_76_entry_sample_req <-& (phi_stmt_76_entry_sample_req_ps)
          phi_stmt_76_entry_sample_req &-> ($null)
          phi_stmt_76_update_start_ o<-& (phi_stmt_76_update_completed_ 0)
          phi_stmt_76_sample_start_ o<-& (phi_stmt_76_sample_completed_ 1)
          $T[phi_stmt_76_merged_reqs] 
          $T[phi_stmt_76_phi_mux_ack] 
          $T[phi_stmt_76_phi_mux_ack_ps] 
          phi_stmt_76_phi_mux_ack_ps <-& (phi_stmt_76_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_76_update_completed_)
          $T[konst_78_sample_start__ps] 
          $T[konst_78_sample_completed__ps] 
          $T[konst_78_update_start__ps] 
          $T[konst_78_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_78_sample_start_] 
          $T[konst_78_sample_completed_] 
          konst_78_sample_completed_ <-& (konst_78_sample_start_)
          $T[konst_78_update_start_] 
          $T [konst_78_update_completed_] $delay 
          konst_78_update_completed_ <-& (konst_78_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_78_sample_start_ <-& (konst_78_sample_start__ps)
          konst_78_update_start_ <-& (konst_78_update_start__ps)
          // Phi complete dependency.
          konst_78_sample_completed__ps <-& (konst_78_sample_completed_)
          konst_78_update_completed__ps <-& (konst_78_update_completed_)
          $T[R_next_last_dest_id_79_sample_start__ps] 
          $T[R_next_last_dest_id_79_sample_completed__ps] 
          $T[R_next_last_dest_id_79_update_start__ps] 
          $T[R_next_last_dest_id_79_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_79_sample_start_] 
          $T[R_next_last_dest_id_79_sample_completed_] 
          $T[R_next_last_dest_id_79_update_start_] 
          $T[R_next_last_dest_id_79_update_completed_] 
          ;;[R_next_last_dest_id_79_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_79_sample_start_ &-> (R_next_last_dest_id_79_Sample)
          R_next_last_dest_id_79_sample_completed_ <-& (R_next_last_dest_id_79_Sample)
          ;;[R_next_last_dest_id_79_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_79_update_start_ &-> (R_next_last_dest_id_79_Update)
          R_next_last_dest_id_79_update_completed_ <-& (R_next_last_dest_id_79_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_79_sample_start_ <-& (R_next_last_dest_id_79_sample_start__ps)
          R_next_last_dest_id_79_update_start_ <-& (R_next_last_dest_id_79_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_79_sample_completed__ps <-& (R_next_last_dest_id_79_sample_completed_)
          R_next_last_dest_id_79_update_completed__ps <-& (R_next_last_dest_id_79_update_completed_)
          $phisequencer [ phi_stmt_76_phi_seq] : 
          phi_stmt_76_entry_trigger konst_78_sample_start__ps konst_78_sample_completed__ps konst_78_update_start__ps konst_78_update_completed__ps phi_stmt_76_loopback_trigger R_next_last_dest_id_79_sample_start__ps R_next_last_dest_id_79_sample_completed__ps R_next_last_dest_id_79_update_start__ps R_next_last_dest_id_79_update_completed__ps :
          phi_stmt_76_sample_start__ps phi_stmt_76_sample_completed__ps phi_stmt_76_update_start__ps phi_stmt_76_update_completed__ps :
          phi_stmt_76_entry_sample_req_ps phi_stmt_76_loopback_sample_req_ps : 
          phi_stmt_76_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_76
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 83
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 84
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 85
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 86
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 87
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 88
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 89
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 90
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_1
          $T[WPIPE_noblock_obuf_1_1_121_sample_start_] 
          $T[WPIPE_noblock_obuf_1_1_121_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_1_121_update_start_] 
          $T[WPIPE_noblock_obuf_1_1_121_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_1_121 with guard R_send_to_1_120
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_1_121_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_1_121_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_1_121_sample_start_ &-> (WPIPE_noblock_obuf_1_1_121_Sample)
          WPIPE_noblock_obuf_1_1_121_sample_completed_ <-& (WPIPE_noblock_obuf_1_1_121_Sample)
          WPIPE_noblock_obuf_1_1_121_update_start_ <-& (WPIPE_noblock_obuf_1_1_121_sample_completed_)
          WPIPE_noblock_obuf_1_1_121_update_start_ &-> (WPIPE_noblock_obuf_1_1_121_Update)
          WPIPE_noblock_obuf_1_1_121_update_completed_ <-& (WPIPE_noblock_obuf_1_1_121_Update)
          WPIPE_noblock_obuf_1_1_121_sample_start_ o<-& (WPIPE_noblock_obuf_1_1_121_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_1_121_sample_start_
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_1_121_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 91
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 92
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_2
          $T[WPIPE_noblock_obuf_1_2_130_sample_start_] 
          $T[WPIPE_noblock_obuf_1_2_130_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_2_130_update_start_] 
          $T[WPIPE_noblock_obuf_1_2_130_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_2_130 with guard R_send_to_2_129
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_2_130_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_2_130_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_2_130_sample_start_ &-> (WPIPE_noblock_obuf_1_2_130_Sample)
          WPIPE_noblock_obuf_1_2_130_sample_completed_ <-& (WPIPE_noblock_obuf_1_2_130_Sample)
          WPIPE_noblock_obuf_1_2_130_update_start_ <-& (WPIPE_noblock_obuf_1_2_130_sample_completed_)
          WPIPE_noblock_obuf_1_2_130_update_start_ &-> (WPIPE_noblock_obuf_1_2_130_Update)
          WPIPE_noblock_obuf_1_2_130_update_completed_ <-& (WPIPE_noblock_obuf_1_2_130_Update)
          WPIPE_noblock_obuf_1_2_130_sample_start_ o<-& (WPIPE_noblock_obuf_1_2_130_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_2_130_sample_start_
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_2_130_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 93
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 94
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_3
          $T[WPIPE_noblock_obuf_1_3_139_sample_start_] 
          $T[WPIPE_noblock_obuf_1_3_139_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_3_139_update_start_] 
          $T[WPIPE_noblock_obuf_1_3_139_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_3_139 with guard R_send_to_3_138
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_3_139_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_3_139_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_3_139_sample_start_ &-> (WPIPE_noblock_obuf_1_3_139_Sample)
          WPIPE_noblock_obuf_1_3_139_sample_completed_ <-& (WPIPE_noblock_obuf_1_3_139_Sample)
          WPIPE_noblock_obuf_1_3_139_update_start_ <-& (WPIPE_noblock_obuf_1_3_139_sample_completed_)
          WPIPE_noblock_obuf_1_3_139_update_start_ &-> (WPIPE_noblock_obuf_1_3_139_Update)
          WPIPE_noblock_obuf_1_3_139_update_completed_ <-& (WPIPE_noblock_obuf_1_3_139_Update)
          WPIPE_noblock_obuf_1_3_139_sample_start_ o<-& (WPIPE_noblock_obuf_1_3_139_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_3_139_sample_start_
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_3_139_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 95
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 96
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_4
          $T[WPIPE_noblock_obuf_1_4_148_sample_start_] 
          $T[WPIPE_noblock_obuf_1_4_148_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_4_148_update_start_] 
          $T[WPIPE_noblock_obuf_1_4_148_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_4_148 with guard R_send_to_4_147
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_4_148_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_4_148_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_4_148_sample_start_ &-> (WPIPE_noblock_obuf_1_4_148_Sample)
          WPIPE_noblock_obuf_1_4_148_sample_completed_ <-& (WPIPE_noblock_obuf_1_4_148_Sample)
          WPIPE_noblock_obuf_1_4_148_update_start_ <-& (WPIPE_noblock_obuf_1_4_148_sample_completed_)
          WPIPE_noblock_obuf_1_4_148_update_start_ &-> (WPIPE_noblock_obuf_1_4_148_Update)
          WPIPE_noblock_obuf_1_4_148_update_completed_ <-& (WPIPE_noblock_obuf_1_4_148_Update)
          WPIPE_noblock_obuf_1_4_148_sample_start_ o<-& (WPIPE_noblock_obuf_1_4_148_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_4_148_sample_start_
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_4_148_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_1
          // read-dependencies for pipe in_data_1
          // write-dependencies for pipe in_data_1
          // signal write dependencies for in_data_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_65__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_65_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_65__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_65_loop_body : condition_evaluated
        $bind do_while_stmt_65__entry__  => do_while_stmt_65_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_65_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_65__exit__)
      }
      do_while_stmt_65__entry__ |-> (do_while_stmt_65)
      do_while_stmt_65__exit__ <-| (do_while_stmt_65)
      do_while_stmt_65__entry__ <-| (branch_block_stmt_64__entry__)
      do_while_stmt_65__exit__ |-> (branch_block_stmt_64__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 75
    // constant-object-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // constant-object-declarations for block %inputPort_1_Daemon
    //  file .Aa/switch2x2.opt.aa, line 66
    // constant-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 73
    // 1 
    $constant $W[konst_152_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 75
    // constant-declarations for phi:  			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_72_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    // 0 
    $constant $W[konst_78_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_83_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_97_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_100_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_111_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_117_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_126_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_135_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_144_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 73
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 75
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    $W[next_count_down_103_69_buffered] : $int<16>
    // count_down
    $W[count_down_67] : $int<16>
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // in_data_1
    $W[RPIPE_in_data_1_75_wire] : $int<32>
    // input_word
    $W[input_word_73] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    $W[next_last_dest_id_109_79_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_76] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 83
    // new_packet
    $W[new_packet_85] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 84
    // dest_id
    $W[dest_id_89] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 85
    // pkt_length
    $W[pkt_length_93] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 86
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_98_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_101_wire] : $int<16>
    // next_count_down
    $W[next_count_down_103] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 87
    // next_last_dest_id
    $W[next_last_dest_id_109] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 88
    // data_to_outport
    $W[data_to_outport_114] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 89
    // send_to_1
    $W[send_to_1_119] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 90
    // noblock_obuf_1_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 91
    // send_to_2
    $W[send_to_2_128] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 92
    // noblock_obuf_1_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 93
    // send_to_3
    $W[send_to_3_137] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 94
    // noblock_obuf_1_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 95
    // send_to_4
    $W[send_to_4_146] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 96
    // noblock_obuf_1_4
    // datapath-instances for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 73
    ==0? [do_while_stmt_65_branch] (konst_152_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 75
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    # := [next_count_down_103_69_buf] (next_count_down_103) (next_count_down_103_69_buffered)     $fullrate
    $buffering $out next_count_down_103_69_buf next_count_down_103_69_buffered  1
    # $phi [phi_stmt_67] (next_count_down_103_69_buffered type_cast_72_wire_constant) ( count_down_67 ) $fullrate
    // $buffering  $out phi_stmt_67 count_down_67 2
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // in_data_1
    $ioport $in [RPIPE_in_data_1_75_inst] (in_data_1) (RPIPE_in_data_1_75_wire)  $fullrate 
    $buffering $out RPIPE_in_data_1_75_inst RPIPE_in_data_1_75_wire 1
    # := [ssrc_phi_stmt_73] (RPIPE_in_data_1_75_wire) (input_word_73)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    # := [next_last_dest_id_109_79_buf] (next_last_dest_id_109) (next_last_dest_id_109_79_buffered)     $fullrate
    $buffering $out next_last_dest_id_109_79_buf next_last_dest_id_109_79_buffered  1
    # $phi [phi_stmt_76] (konst_78_wire_constant next_last_dest_id_109_79_buffered) ( last_dest_id_76 ) $fullrate
    // $buffering  $out phi_stmt_76 last_dest_id_76 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 83
    // (count_down == 0 )
    ==[EQ_u16_u1_84_inst] (count_down_67 konst_83_wire_constant) (new_packet_85)   $flowthrough 
    $delay EQ_u16_u1_84_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 84
    // ( $slice input_word 31 24 ) 
    [:] [slice_88_inst] (input_word_73 31 24) (dest_id_89)  $flowthrough
    $delay slice_88_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 85
    // ( $slice input_word 23 8 ) 
    [:] [slice_92_inst] (input_word_73 23 8) (pkt_length_93)  $flowthrough
    $delay slice_92_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 86
    // (pkt_length - 1 )
    -[SUB_u16_u16_98_inst] (pkt_length_93 konst_97_wire_constant) (SUB_u16_u16_98_wire)   $flowthrough 
    $delay SUB_u16_u16_98_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_101_inst] (count_down_67 konst_100_wire_constant) (SUB_u16_u16_101_wire)   $flowthrough 
    $delay SUB_u16_u16_101_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_102_inst] (new_packet_85 SUB_u16_u16_98_wire SUB_u16_u16_101_wire) (next_count_down_103)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 87
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_108_inst] (new_packet_85 dest_id_89 last_dest_id_76) (next_last_dest_id_109)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 88
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_113_inst] (R_ONE_1_111_wire_constant input_word_73) (data_to_outport_114)   $flowthrough 
    $delay CONCAT_u1_u33_113_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 89
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_118_inst] (next_last_dest_id_109 konst_117_wire_constant) (send_to_1_119)   $flowthrough 
    $delay EQ_u8_u1_118_inst 0
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 90
    // noblock_obuf_1_1
    $ioport $out [WPIPE_noblock_obuf_1_1_121_inst]  (data_to_outport_114) (noblock_obuf_1_1) $guard ( send_to_1_119 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 91
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_127_inst] (next_last_dest_id_109 konst_126_wire_constant) (send_to_2_128)   $flowthrough 
    $delay EQ_u8_u1_127_inst 0
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 92
    // noblock_obuf_1_2
    $ioport $out [WPIPE_noblock_obuf_1_2_130_inst]  (data_to_outport_114) (noblock_obuf_1_2) $guard ( send_to_2_128 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 93
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_136_inst] (next_last_dest_id_109 konst_135_wire_constant) (send_to_3_137)   $flowthrough 
    $delay EQ_u8_u1_136_inst 0
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 94
    // noblock_obuf_1_3
    $ioport $out [WPIPE_noblock_obuf_1_3_139_inst]  (data_to_outport_114) (noblock_obuf_1_3) $guard ( send_to_3_137 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 95
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_145_inst] (next_last_dest_id_109 konst_144_wire_constant) (send_to_4_146)   $flowthrough 
    $delay EQ_u8_u1_145_inst 0
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 96
    // noblock_obuf_1_4
    $ioport $out [WPIPE_noblock_obuf_1_4_148_inst]  (data_to_outport_114) (noblock_obuf_1_4) $guard ( send_to_4_146 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_65
  //  file .Aa/switch2x2.opt.aa, line 73
  phi_stmt_67 <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_loopback_sample_req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_entry_sample_req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_phi_mux_ack)
  next_count_down_103_69_buf <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_69_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_69_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_69_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_69_Update/ack)
  // in_data_1
  RPIPE_in_data_1_75_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Sample/rr branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Update/cr) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Sample/ra branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Update/ca)
  phi_stmt_76 <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_entry_sample_req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_loopback_sample_req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_phi_mux_ack)
  next_last_dest_id_109_79_buf <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 83
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 84
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 85
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 86
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 87
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 88
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 89
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 90
  // data_to_outport
  // noblock_obuf_1_1
  WPIPE_noblock_obuf_1_1_121_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 91
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 92
  // data_to_outport
  // noblock_obuf_1_2
  WPIPE_noblock_obuf_1_2_130_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 93
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 94
  // data_to_outport
  // noblock_obuf_1_3
  WPIPE_noblock_obuf_1_3_139_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 95
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 96
  // data_to_outport
  // noblock_obuf_1_4
  WPIPE_noblock_obuf_1_4_148_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Update/ack)
  do_while_stmt_65_branch <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/condition_evaluated) (branch_block_stmt_64/do_while_stmt_65/loop_exit/ack branch_block_stmt_64/do_while_stmt_65/loop_taken/ack)
}
$module [inputPort_2_Daemon] 
{
  // pipe-declarations for block %inputPort_2_Daemon
  //  file .Aa/switch2x2.opt.aa, line 100
  // pipe-declarations for block %inputPort_2_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 105
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_156] // Branch Block  file .Aa/switch2x2.opt.aa, line 105
    {
      $P [branch_block_stmt_156__entry__]
      branch_block_stmt_156__entry__ <-| ($entry)
      $P [branch_block_stmt_156__exit__]
      branch_block_stmt_156__exit__ |-> ($exit)
      $P [do_while_stmt_157__entry__] 
      $P [do_while_stmt_157__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 107
      <o> [do_while_stmt_157]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_157__entry__] 
        $P[do_while_stmt_157__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_157_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_159
          // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_159_sample_start_] 
          $T[phi_stmt_159_sample_completed_] 
          $T[phi_stmt_159_update_start_] 
          $T[phi_stmt_159_update_completed_] 
          $T[phi_stmt_159_sample_start__ps] 
          phi_stmt_159_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_159_sample_completed__ps] 
          phi_stmt_159_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_159_update_start__ps] 
          phi_stmt_159_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_159_update_completed__ps] 
          phi_stmt_159_update_completed_ <-& (phi_stmt_159_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_159_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_159_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_159_update_start_)
          $T[phi_stmt_159_loopback_trigger] 
          phi_stmt_159_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_159_loopback_sample_req] 
          $T[phi_stmt_159_loopback_sample_req_ps] 
          phi_stmt_159_loopback_sample_req <-& (phi_stmt_159_loopback_sample_req_ps)
          phi_stmt_159_loopback_sample_req &-> ($null)
          $T[phi_stmt_159_entry_trigger] 
          phi_stmt_159_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_159_entry_sample_req] 
          $T[phi_stmt_159_entry_sample_req_ps] 
          phi_stmt_159_entry_sample_req <-& (phi_stmt_159_entry_sample_req_ps)
          phi_stmt_159_entry_sample_req &-> ($null)
          phi_stmt_159_update_start_ o<-& (phi_stmt_159_update_completed_ 0)
          phi_stmt_159_sample_start_ o<-& (phi_stmt_159_sample_completed_ 1)
          $T[phi_stmt_159_merged_reqs] 
          $T[phi_stmt_159_phi_mux_ack] 
          $T[phi_stmt_159_phi_mux_ack_ps] 
          phi_stmt_159_phi_mux_ack_ps <-& (phi_stmt_159_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_159_update_completed_)
          $T[R_next_count_down_161_sample_start__ps] 
          $T[R_next_count_down_161_sample_completed__ps] 
          $T[R_next_count_down_161_update_start__ps] 
          $T[R_next_count_down_161_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_count_down_161_sample_start_] 
          $T[R_next_count_down_161_sample_completed_] 
          $T[R_next_count_down_161_update_start_] 
          $T[R_next_count_down_161_update_completed_] 
          ;;[R_next_count_down_161_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_161_sample_start_ &-> (R_next_count_down_161_Sample)
          R_next_count_down_161_sample_completed_ <-& (R_next_count_down_161_Sample)
          ;;[R_next_count_down_161_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_161_update_start_ &-> (R_next_count_down_161_Update)
          R_next_count_down_161_update_completed_ <-& (R_next_count_down_161_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_161_sample_start_ <-& (R_next_count_down_161_sample_start__ps)
          R_next_count_down_161_update_start_ <-& (R_next_count_down_161_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_161_sample_completed__ps <-& (R_next_count_down_161_sample_completed_)
          R_next_count_down_161_update_completed__ps <-& (R_next_count_down_161_update_completed_)
          $T[type_cast_163_sample_start__ps] 
          $T[type_cast_163_sample_completed__ps] 
          $T[type_cast_163_update_start__ps] 
          $T[type_cast_163_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_163_sample_start_] 
          $T[type_cast_163_sample_completed_] 
          type_cast_163_sample_completed_ <-& (type_cast_163_sample_start_)
          $T[type_cast_163_update_start_] 
          $T [type_cast_163_update_completed_] $delay 
          type_cast_163_update_completed_ <-& (type_cast_163_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_163_sample_start_ <-& (type_cast_163_sample_start__ps)
          type_cast_163_update_start_ <-& (type_cast_163_update_start__ps)
          // Phi complete dependency.
          type_cast_163_sample_completed__ps <-& (type_cast_163_sample_completed_)
          type_cast_163_update_completed__ps <-& (type_cast_163_update_completed_)
          $phisequencer [ phi_stmt_159_phi_seq] : 
          phi_stmt_159_loopback_trigger R_next_count_down_161_sample_start__ps R_next_count_down_161_sample_completed__ps R_next_count_down_161_update_start__ps R_next_count_down_161_update_completed__ps phi_stmt_159_entry_trigger type_cast_163_sample_start__ps type_cast_163_sample_completed__ps type_cast_163_update_start__ps type_cast_163_update_completed__ps :
          phi_stmt_159_sample_start__ps phi_stmt_159_sample_completed__ps phi_stmt_159_update_start__ps phi_stmt_159_update_completed__ps :
          phi_stmt_159_loopback_sample_req_ps phi_stmt_159_entry_sample_req_ps : 
          phi_stmt_159_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_159
          // start:  single source PHI statement phi_stmt_164
          // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_164_sample_start_] 
          $T[phi_stmt_164_sample_completed_] 
          $T[phi_stmt_164_update_start_] 
          $T[phi_stmt_164_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_164_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_164_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_164_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_2
          $T[RPIPE_in_data_2_166_sample_start_] 
          $T[RPIPE_in_data_2_166_sample_completed_] 
          $T[RPIPE_in_data_2_166_update_start_] 
          $T[RPIPE_in_data_2_166_update_completed_] 
          ;;[RPIPE_in_data_2_166_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_2_166_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_2_166_sample_start_ &-> (RPIPE_in_data_2_166_Sample)
          RPIPE_in_data_2_166_sample_completed_ <-& (RPIPE_in_data_2_166_Sample)
          RPIPE_in_data_2_166_update_start_ <-& (RPIPE_in_data_2_166_sample_completed_)
          RPIPE_in_data_2_166_update_start_ &-> (RPIPE_in_data_2_166_Update)
          RPIPE_in_data_2_166_update_completed_ <-& (RPIPE_in_data_2_166_Update)
          RPIPE_in_data_2_166_sample_start_ o<-& (RPIPE_in_data_2_166_update_completed_ 0)
          // RAW reenables for in_data_2
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_2_166_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_2_166_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_2_166_update_start_)
          phi_stmt_164_update_completed_ <-& (RPIPE_in_data_2_166_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_164_update_completed_)
          // done: PHI Statement phi_stmt_164
          // start:  PHI statement phi_stmt_167
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_167_sample_start_] 
          $T[phi_stmt_167_sample_completed_] 
          $T[phi_stmt_167_update_start_] 
          $T[phi_stmt_167_update_completed_] 
          $T[phi_stmt_167_sample_start__ps] 
          phi_stmt_167_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_167_sample_completed__ps] 
          phi_stmt_167_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_167_update_start__ps] 
          phi_stmt_167_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_167_update_completed__ps] 
          phi_stmt_167_update_completed_ <-& (phi_stmt_167_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_167_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_167_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_167_update_start_)
          $T[phi_stmt_167_loopback_trigger] 
          phi_stmt_167_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_167_loopback_sample_req] 
          $T[phi_stmt_167_loopback_sample_req_ps] 
          phi_stmt_167_loopback_sample_req <-& (phi_stmt_167_loopback_sample_req_ps)
          phi_stmt_167_loopback_sample_req &-> ($null)
          $T[phi_stmt_167_entry_trigger] 
          phi_stmt_167_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_167_entry_sample_req] 
          $T[phi_stmt_167_entry_sample_req_ps] 
          phi_stmt_167_entry_sample_req <-& (phi_stmt_167_entry_sample_req_ps)
          phi_stmt_167_entry_sample_req &-> ($null)
          phi_stmt_167_update_start_ o<-& (phi_stmt_167_update_completed_ 0)
          phi_stmt_167_sample_start_ o<-& (phi_stmt_167_sample_completed_ 1)
          $T[phi_stmt_167_merged_reqs] 
          $T[phi_stmt_167_phi_mux_ack] 
          $T[phi_stmt_167_phi_mux_ack_ps] 
          phi_stmt_167_phi_mux_ack_ps <-& (phi_stmt_167_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_167_update_completed_)
          $T[konst_169_sample_start__ps] 
          $T[konst_169_sample_completed__ps] 
          $T[konst_169_update_start__ps] 
          $T[konst_169_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_169_sample_start_] 
          $T[konst_169_sample_completed_] 
          konst_169_sample_completed_ <-& (konst_169_sample_start_)
          $T[konst_169_update_start_] 
          $T [konst_169_update_completed_] $delay 
          konst_169_update_completed_ <-& (konst_169_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_169_sample_start_ <-& (konst_169_sample_start__ps)
          konst_169_update_start_ <-& (konst_169_update_start__ps)
          // Phi complete dependency.
          konst_169_sample_completed__ps <-& (konst_169_sample_completed_)
          konst_169_update_completed__ps <-& (konst_169_update_completed_)
          $T[R_next_last_dest_id_170_sample_start__ps] 
          $T[R_next_last_dest_id_170_sample_completed__ps] 
          $T[R_next_last_dest_id_170_update_start__ps] 
          $T[R_next_last_dest_id_170_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_170_sample_start_] 
          $T[R_next_last_dest_id_170_sample_completed_] 
          $T[R_next_last_dest_id_170_update_start_] 
          $T[R_next_last_dest_id_170_update_completed_] 
          ;;[R_next_last_dest_id_170_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_170_sample_start_ &-> (R_next_last_dest_id_170_Sample)
          R_next_last_dest_id_170_sample_completed_ <-& (R_next_last_dest_id_170_Sample)
          ;;[R_next_last_dest_id_170_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_170_update_start_ &-> (R_next_last_dest_id_170_Update)
          R_next_last_dest_id_170_update_completed_ <-& (R_next_last_dest_id_170_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_170_sample_start_ <-& (R_next_last_dest_id_170_sample_start__ps)
          R_next_last_dest_id_170_update_start_ <-& (R_next_last_dest_id_170_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_170_sample_completed__ps <-& (R_next_last_dest_id_170_sample_completed_)
          R_next_last_dest_id_170_update_completed__ps <-& (R_next_last_dest_id_170_update_completed_)
          $phisequencer [ phi_stmt_167_phi_seq] : 
          phi_stmt_167_entry_trigger konst_169_sample_start__ps konst_169_sample_completed__ps konst_169_update_start__ps konst_169_update_completed__ps phi_stmt_167_loopback_trigger R_next_last_dest_id_170_sample_start__ps R_next_last_dest_id_170_sample_completed__ps R_next_last_dest_id_170_update_start__ps R_next_last_dest_id_170_update_completed__ps :
          phi_stmt_167_sample_start__ps phi_stmt_167_sample_completed__ps phi_stmt_167_update_start__ps phi_stmt_167_update_completed__ps :
          phi_stmt_167_entry_sample_req_ps phi_stmt_167_loopback_sample_req_ps : 
          phi_stmt_167_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_167
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 117
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 118
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 119
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 120
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 121
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 122
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 123
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 124
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_1
          $T[WPIPE_noblock_obuf_2_1_212_sample_start_] 
          $T[WPIPE_noblock_obuf_2_1_212_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_1_212_update_start_] 
          $T[WPIPE_noblock_obuf_2_1_212_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_1_212 with guard R_send_to_1_211
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_1_212_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_1_212_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_1_212_sample_start_ &-> (WPIPE_noblock_obuf_2_1_212_Sample)
          WPIPE_noblock_obuf_2_1_212_sample_completed_ <-& (WPIPE_noblock_obuf_2_1_212_Sample)
          WPIPE_noblock_obuf_2_1_212_update_start_ <-& (WPIPE_noblock_obuf_2_1_212_sample_completed_)
          WPIPE_noblock_obuf_2_1_212_update_start_ &-> (WPIPE_noblock_obuf_2_1_212_Update)
          WPIPE_noblock_obuf_2_1_212_update_completed_ <-& (WPIPE_noblock_obuf_2_1_212_Update)
          WPIPE_noblock_obuf_2_1_212_sample_start_ o<-& (WPIPE_noblock_obuf_2_1_212_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_1_212_sample_start_
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_1_212_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 125
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 126
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_2
          $T[WPIPE_noblock_obuf_2_2_221_sample_start_] 
          $T[WPIPE_noblock_obuf_2_2_221_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_2_221_update_start_] 
          $T[WPIPE_noblock_obuf_2_2_221_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_2_221 with guard R_send_to_2_220
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_2_221_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_2_221_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_2_221_sample_start_ &-> (WPIPE_noblock_obuf_2_2_221_Sample)
          WPIPE_noblock_obuf_2_2_221_sample_completed_ <-& (WPIPE_noblock_obuf_2_2_221_Sample)
          WPIPE_noblock_obuf_2_2_221_update_start_ <-& (WPIPE_noblock_obuf_2_2_221_sample_completed_)
          WPIPE_noblock_obuf_2_2_221_update_start_ &-> (WPIPE_noblock_obuf_2_2_221_Update)
          WPIPE_noblock_obuf_2_2_221_update_completed_ <-& (WPIPE_noblock_obuf_2_2_221_Update)
          WPIPE_noblock_obuf_2_2_221_sample_start_ o<-& (WPIPE_noblock_obuf_2_2_221_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_2_221_sample_start_
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_2_221_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 127
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 128
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_3
          $T[WPIPE_noblock_obuf_2_3_230_sample_start_] 
          $T[WPIPE_noblock_obuf_2_3_230_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_3_230_update_start_] 
          $T[WPIPE_noblock_obuf_2_3_230_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_3_230 with guard R_send_to_3_229
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_3_230_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_3_230_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_3_230_sample_start_ &-> (WPIPE_noblock_obuf_2_3_230_Sample)
          WPIPE_noblock_obuf_2_3_230_sample_completed_ <-& (WPIPE_noblock_obuf_2_3_230_Sample)
          WPIPE_noblock_obuf_2_3_230_update_start_ <-& (WPIPE_noblock_obuf_2_3_230_sample_completed_)
          WPIPE_noblock_obuf_2_3_230_update_start_ &-> (WPIPE_noblock_obuf_2_3_230_Update)
          WPIPE_noblock_obuf_2_3_230_update_completed_ <-& (WPIPE_noblock_obuf_2_3_230_Update)
          WPIPE_noblock_obuf_2_3_230_sample_start_ o<-& (WPIPE_noblock_obuf_2_3_230_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_3_230_sample_start_
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_3_230_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 129
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 130
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_4
          $T[WPIPE_noblock_obuf_2_4_239_sample_start_] 
          $T[WPIPE_noblock_obuf_2_4_239_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_4_239_update_start_] 
          $T[WPIPE_noblock_obuf_2_4_239_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_4_239 with guard R_send_to_4_238
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_4_239_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_4_239_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_4_239_sample_start_ &-> (WPIPE_noblock_obuf_2_4_239_Sample)
          WPIPE_noblock_obuf_2_4_239_sample_completed_ <-& (WPIPE_noblock_obuf_2_4_239_Sample)
          WPIPE_noblock_obuf_2_4_239_update_start_ <-& (WPIPE_noblock_obuf_2_4_239_sample_completed_)
          WPIPE_noblock_obuf_2_4_239_update_start_ &-> (WPIPE_noblock_obuf_2_4_239_Update)
          WPIPE_noblock_obuf_2_4_239_update_completed_ <-& (WPIPE_noblock_obuf_2_4_239_Update)
          WPIPE_noblock_obuf_2_4_239_sample_start_ o<-& (WPIPE_noblock_obuf_2_4_239_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_4_239_sample_start_
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_4_239_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_2
          // read-dependencies for pipe in_data_2
          // write-dependencies for pipe in_data_2
          // signal write dependencies for in_data_2
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_157__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_157_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_157__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_157_loop_body : condition_evaluated
        $bind do_while_stmt_157__entry__  => do_while_stmt_157_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_157_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_157__exit__)
      }
      do_while_stmt_157__entry__ |-> (do_while_stmt_157)
      do_while_stmt_157__exit__ <-| (do_while_stmt_157)
      do_while_stmt_157__entry__ <-| (branch_block_stmt_156__entry__)
      do_while_stmt_157__exit__ |-> (branch_block_stmt_156__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 109
    // constant-object-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // constant-object-declarations for block %inputPort_2_Daemon
    //  file .Aa/switch2x2.opt.aa, line 100
    // constant-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 107
    // 1 
    $constant $W[konst_243_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 109
    // constant-declarations for phi:  			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_163_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    // 0 
    $constant $W[konst_169_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_174_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_188_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_191_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_202_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_208_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_217_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_226_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_235_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 107
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 109
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    $W[next_count_down_194_161_buffered] : $int<16>
    // count_down
    $W[count_down_159] : $int<16>
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // in_data_2
    $W[RPIPE_in_data_2_166_wire] : $int<32>
    // input_word
    $W[input_word_164] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    $W[next_last_dest_id_200_170_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_167] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 117
    // new_packet
    $W[new_packet_176] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 118
    // dest_id
    $W[dest_id_180] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 119
    // pkt_length
    $W[pkt_length_184] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 120
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_189_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_192_wire] : $int<16>
    // next_count_down
    $W[next_count_down_194] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 121
    // next_last_dest_id
    $W[next_last_dest_id_200] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 122
    // data_to_outport
    $W[data_to_outport_205] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 123
    // send_to_1
    $W[send_to_1_210] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 124
    // noblock_obuf_2_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 125
    // send_to_2
    $W[send_to_2_219] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 126
    // noblock_obuf_2_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 127
    // send_to_3
    $W[send_to_3_228] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 128
    // noblock_obuf_2_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 129
    // send_to_4
    $W[send_to_4_237] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 130
    // noblock_obuf_2_4
    // datapath-instances for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 107
    ==0? [do_while_stmt_157_branch] (konst_243_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 109
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    # := [next_count_down_194_161_buf] (next_count_down_194) (next_count_down_194_161_buffered)     $fullrate
    $buffering $out next_count_down_194_161_buf next_count_down_194_161_buffered  1
    # $phi [phi_stmt_159] (next_count_down_194_161_buffered type_cast_163_wire_constant) ( count_down_159 ) $fullrate
    // $buffering  $out phi_stmt_159 count_down_159 2
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // in_data_2
    $ioport $in [RPIPE_in_data_2_166_inst] (in_data_2) (RPIPE_in_data_2_166_wire)  $fullrate 
    $buffering $out RPIPE_in_data_2_166_inst RPIPE_in_data_2_166_wire 1
    # := [ssrc_phi_stmt_164] (RPIPE_in_data_2_166_wire) (input_word_164)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    # := [next_last_dest_id_200_170_buf] (next_last_dest_id_200) (next_last_dest_id_200_170_buffered)     $fullrate
    $buffering $out next_last_dest_id_200_170_buf next_last_dest_id_200_170_buffered  1
    # $phi [phi_stmt_167] (konst_169_wire_constant next_last_dest_id_200_170_buffered) ( last_dest_id_167 ) $fullrate
    // $buffering  $out phi_stmt_167 last_dest_id_167 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 117
    // (count_down == 0 )
    ==[EQ_u16_u1_175_inst] (count_down_159 konst_174_wire_constant) (new_packet_176)   $flowthrough 
    $delay EQ_u16_u1_175_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 118
    // ( $slice input_word 31 24 ) 
    [:] [slice_179_inst] (input_word_164 31 24) (dest_id_180)  $flowthrough
    $delay slice_179_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 119
    // ( $slice input_word 23 8 ) 
    [:] [slice_183_inst] (input_word_164 23 8) (pkt_length_184)  $flowthrough
    $delay slice_183_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 120
    // (pkt_length - 1 )
    -[SUB_u16_u16_189_inst] (pkt_length_184 konst_188_wire_constant) (SUB_u16_u16_189_wire)   $flowthrough 
    $delay SUB_u16_u16_189_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_192_inst] (count_down_159 konst_191_wire_constant) (SUB_u16_u16_192_wire)   $flowthrough 
    $delay SUB_u16_u16_192_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_193_inst] (new_packet_176 SUB_u16_u16_189_wire SUB_u16_u16_192_wire) (next_count_down_194)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 121
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_199_inst] (new_packet_176 dest_id_180 last_dest_id_167) (next_last_dest_id_200)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 122
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_204_inst] (R_ONE_1_202_wire_constant input_word_164) (data_to_outport_205)   $flowthrough 
    $delay CONCAT_u1_u33_204_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 123
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_209_inst] (next_last_dest_id_200 konst_208_wire_constant) (send_to_1_210)   $flowthrough 
    $delay EQ_u8_u1_209_inst 0
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 124
    // noblock_obuf_2_1
    $ioport $out [WPIPE_noblock_obuf_2_1_212_inst]  (data_to_outport_205) (noblock_obuf_2_1) $guard ( send_to_1_210 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 125
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_218_inst] (next_last_dest_id_200 konst_217_wire_constant) (send_to_2_219)   $flowthrough 
    $delay EQ_u8_u1_218_inst 0
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 126
    // noblock_obuf_2_2
    $ioport $out [WPIPE_noblock_obuf_2_2_221_inst]  (data_to_outport_205) (noblock_obuf_2_2) $guard ( send_to_2_219 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 127
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_227_inst] (next_last_dest_id_200 konst_226_wire_constant) (send_to_3_228)   $flowthrough 
    $delay EQ_u8_u1_227_inst 0
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 128
    // noblock_obuf_2_3
    $ioport $out [WPIPE_noblock_obuf_2_3_230_inst]  (data_to_outport_205) (noblock_obuf_2_3) $guard ( send_to_3_228 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 129
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_236_inst] (next_last_dest_id_200 konst_235_wire_constant) (send_to_4_237)   $flowthrough 
    $delay EQ_u8_u1_236_inst 0
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 130
    // noblock_obuf_2_4
    $ioport $out [WPIPE_noblock_obuf_2_4_239_inst]  (data_to_outport_205) (noblock_obuf_2_4) $guard ( send_to_4_237 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_157
  //  file .Aa/switch2x2.opt.aa, line 107
  phi_stmt_159 <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_loopback_sample_req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_entry_sample_req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_phi_mux_ack)
  next_count_down_194_161_buf <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Update/ack)
  // in_data_2
  RPIPE_in_data_2_166_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Sample/rr branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Update/cr) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Sample/ra branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Update/ca)
  phi_stmt_167 <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_entry_sample_req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_loopback_sample_req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_phi_mux_ack)
  next_last_dest_id_200_170_buf <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 117
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 118
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 119
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 120
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 121
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 122
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 123
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 124
  // data_to_outport
  // noblock_obuf_2_1
  WPIPE_noblock_obuf_2_1_212_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 125
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 126
  // data_to_outport
  // noblock_obuf_2_2
  WPIPE_noblock_obuf_2_2_221_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 127
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 128
  // data_to_outport
  // noblock_obuf_2_3
  WPIPE_noblock_obuf_2_3_230_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 129
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 130
  // data_to_outport
  // noblock_obuf_2_4
  WPIPE_noblock_obuf_2_4_239_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Update/ack)
  do_while_stmt_157_branch <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/condition_evaluated) (branch_block_stmt_156/do_while_stmt_157/loop_exit/ack branch_block_stmt_156/do_while_stmt_157/loop_taken/ack)
}
$module [inputPort_3_Daemon] 
{
  // pipe-declarations for block %inputPort_3_Daemon
  //  file .Aa/switch2x2.opt.aa, line 134
  // pipe-declarations for block %inputPort_3_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 139
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_247] // Branch Block  file .Aa/switch2x2.opt.aa, line 139
    {
      $P [branch_block_stmt_247__entry__]
      branch_block_stmt_247__entry__ <-| ($entry)
      $P [branch_block_stmt_247__exit__]
      branch_block_stmt_247__exit__ |-> ($exit)
      $P [do_while_stmt_248__entry__] 
      $P [do_while_stmt_248__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 141
      <o> [do_while_stmt_248]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_248__entry__] 
        $P[do_while_stmt_248__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_248_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_250
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_250_sample_start_] 
          $T[phi_stmt_250_sample_completed_] 
          $T[phi_stmt_250_update_start_] 
          $T[phi_stmt_250_update_completed_] 
          $T[phi_stmt_250_sample_start__ps] 
          phi_stmt_250_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_250_sample_completed__ps] 
          phi_stmt_250_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_250_update_start__ps] 
          phi_stmt_250_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_250_update_completed__ps] 
          phi_stmt_250_update_completed_ <-& (phi_stmt_250_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_250_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_250_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_250_update_start_)
          $T[phi_stmt_250_loopback_trigger] 
          phi_stmt_250_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_250_loopback_sample_req] 
          $T[phi_stmt_250_loopback_sample_req_ps] 
          phi_stmt_250_loopback_sample_req <-& (phi_stmt_250_loopback_sample_req_ps)
          phi_stmt_250_loopback_sample_req &-> ($null)
          $T[phi_stmt_250_entry_trigger] 
          phi_stmt_250_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_250_entry_sample_req] 
          $T[phi_stmt_250_entry_sample_req_ps] 
          phi_stmt_250_entry_sample_req <-& (phi_stmt_250_entry_sample_req_ps)
          phi_stmt_250_entry_sample_req &-> ($null)
          phi_stmt_250_update_start_ o<-& (phi_stmt_250_update_completed_ 0)
          phi_stmt_250_sample_start_ o<-& (phi_stmt_250_sample_completed_ 1)
          $T[phi_stmt_250_merged_reqs] 
          $T[phi_stmt_250_phi_mux_ack] 
          $T[phi_stmt_250_phi_mux_ack_ps] 
          phi_stmt_250_phi_mux_ack_ps <-& (phi_stmt_250_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_250_update_completed_)
          $T[type_cast_253_sample_start__ps] 
          $T[type_cast_253_sample_completed__ps] 
          $T[type_cast_253_update_start__ps] 
          $T[type_cast_253_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_253_sample_start_] 
          $T[type_cast_253_sample_completed_] 
          type_cast_253_sample_completed_ <-& (type_cast_253_sample_start_)
          $T[type_cast_253_update_start_] 
          $T [type_cast_253_update_completed_] $delay 
          type_cast_253_update_completed_ <-& (type_cast_253_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_253_sample_start_ <-& (type_cast_253_sample_start__ps)
          type_cast_253_update_start_ <-& (type_cast_253_update_start__ps)
          // Phi complete dependency.
          type_cast_253_sample_completed__ps <-& (type_cast_253_sample_completed_)
          type_cast_253_update_completed__ps <-& (type_cast_253_update_completed_)
          $T[R_next_count_down_254_sample_start__ps] 
          $T[R_next_count_down_254_sample_completed__ps] 
          $T[R_next_count_down_254_update_start__ps] 
          $T[R_next_count_down_254_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_254_sample_start_] 
          $T[R_next_count_down_254_sample_completed_] 
          $T[R_next_count_down_254_update_start_] 
          $T[R_next_count_down_254_update_completed_] 
          ;;[R_next_count_down_254_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_254_sample_start_ &-> (R_next_count_down_254_Sample)
          R_next_count_down_254_sample_completed_ <-& (R_next_count_down_254_Sample)
          ;;[R_next_count_down_254_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_254_update_start_ &-> (R_next_count_down_254_Update)
          R_next_count_down_254_update_completed_ <-& (R_next_count_down_254_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_254_sample_start_ <-& (R_next_count_down_254_sample_start__ps)
          R_next_count_down_254_update_start_ <-& (R_next_count_down_254_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_254_sample_completed__ps <-& (R_next_count_down_254_sample_completed_)
          R_next_count_down_254_update_completed__ps <-& (R_next_count_down_254_update_completed_)
          $phisequencer [ phi_stmt_250_phi_seq] : 
          phi_stmt_250_entry_trigger type_cast_253_sample_start__ps type_cast_253_sample_completed__ps type_cast_253_update_start__ps type_cast_253_update_completed__ps phi_stmt_250_loopback_trigger R_next_count_down_254_sample_start__ps R_next_count_down_254_sample_completed__ps R_next_count_down_254_update_start__ps R_next_count_down_254_update_completed__ps :
          phi_stmt_250_sample_start__ps phi_stmt_250_sample_completed__ps phi_stmt_250_update_start__ps phi_stmt_250_update_completed__ps :
          phi_stmt_250_entry_sample_req_ps phi_stmt_250_loopback_sample_req_ps : 
          phi_stmt_250_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_250
          // start:  single source PHI statement phi_stmt_255
          // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_255_sample_start_] 
          $T[phi_stmt_255_sample_completed_] 
          $T[phi_stmt_255_update_start_] 
          $T[phi_stmt_255_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_255_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_255_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_255_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_3
          $T[RPIPE_in_data_3_257_sample_start_] 
          $T[RPIPE_in_data_3_257_sample_completed_] 
          $T[RPIPE_in_data_3_257_update_start_] 
          $T[RPIPE_in_data_3_257_update_completed_] 
          ;;[RPIPE_in_data_3_257_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_3_257_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_3_257_sample_start_ &-> (RPIPE_in_data_3_257_Sample)
          RPIPE_in_data_3_257_sample_completed_ <-& (RPIPE_in_data_3_257_Sample)
          RPIPE_in_data_3_257_update_start_ <-& (RPIPE_in_data_3_257_sample_completed_)
          RPIPE_in_data_3_257_update_start_ &-> (RPIPE_in_data_3_257_Update)
          RPIPE_in_data_3_257_update_completed_ <-& (RPIPE_in_data_3_257_Update)
          RPIPE_in_data_3_257_sample_start_ o<-& (RPIPE_in_data_3_257_update_completed_ 0)
          // RAW reenables for in_data_3
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_3_257_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_3_257_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_3_257_update_start_)
          phi_stmt_255_update_completed_ <-& (RPIPE_in_data_3_257_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_255_update_completed_)
          // done: PHI Statement phi_stmt_255
          // start:  PHI statement phi_stmt_258
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_258_sample_start_] 
          $T[phi_stmt_258_sample_completed_] 
          $T[phi_stmt_258_update_start_] 
          $T[phi_stmt_258_update_completed_] 
          $T[phi_stmt_258_sample_start__ps] 
          phi_stmt_258_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_258_sample_completed__ps] 
          phi_stmt_258_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_258_update_start__ps] 
          phi_stmt_258_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_258_update_completed__ps] 
          phi_stmt_258_update_completed_ <-& (phi_stmt_258_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_258_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_258_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_258_update_start_)
          $T[phi_stmt_258_loopback_trigger] 
          phi_stmt_258_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_258_loopback_sample_req] 
          $T[phi_stmt_258_loopback_sample_req_ps] 
          phi_stmt_258_loopback_sample_req <-& (phi_stmt_258_loopback_sample_req_ps)
          phi_stmt_258_loopback_sample_req &-> ($null)
          $T[phi_stmt_258_entry_trigger] 
          phi_stmt_258_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_258_entry_sample_req] 
          $T[phi_stmt_258_entry_sample_req_ps] 
          phi_stmt_258_entry_sample_req <-& (phi_stmt_258_entry_sample_req_ps)
          phi_stmt_258_entry_sample_req &-> ($null)
          phi_stmt_258_update_start_ o<-& (phi_stmt_258_update_completed_ 0)
          phi_stmt_258_sample_start_ o<-& (phi_stmt_258_sample_completed_ 1)
          $T[phi_stmt_258_merged_reqs] 
          $T[phi_stmt_258_phi_mux_ack] 
          $T[phi_stmt_258_phi_mux_ack_ps] 
          phi_stmt_258_phi_mux_ack_ps <-& (phi_stmt_258_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_258_update_completed_)
          $T[konst_260_sample_start__ps] 
          $T[konst_260_sample_completed__ps] 
          $T[konst_260_update_start__ps] 
          $T[konst_260_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_260_sample_start_] 
          $T[konst_260_sample_completed_] 
          konst_260_sample_completed_ <-& (konst_260_sample_start_)
          $T[konst_260_update_start_] 
          $T [konst_260_update_completed_] $delay 
          konst_260_update_completed_ <-& (konst_260_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_260_sample_start_ <-& (konst_260_sample_start__ps)
          konst_260_update_start_ <-& (konst_260_update_start__ps)
          // Phi complete dependency.
          konst_260_sample_completed__ps <-& (konst_260_sample_completed_)
          konst_260_update_completed__ps <-& (konst_260_update_completed_)
          $T[R_next_last_dest_id_261_sample_start__ps] 
          $T[R_next_last_dest_id_261_sample_completed__ps] 
          $T[R_next_last_dest_id_261_update_start__ps] 
          $T[R_next_last_dest_id_261_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_261_sample_start_] 
          $T[R_next_last_dest_id_261_sample_completed_] 
          $T[R_next_last_dest_id_261_update_start_] 
          $T[R_next_last_dest_id_261_update_completed_] 
          ;;[R_next_last_dest_id_261_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_261_sample_start_ &-> (R_next_last_dest_id_261_Sample)
          R_next_last_dest_id_261_sample_completed_ <-& (R_next_last_dest_id_261_Sample)
          ;;[R_next_last_dest_id_261_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_261_update_start_ &-> (R_next_last_dest_id_261_Update)
          R_next_last_dest_id_261_update_completed_ <-& (R_next_last_dest_id_261_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_261_sample_start_ <-& (R_next_last_dest_id_261_sample_start__ps)
          R_next_last_dest_id_261_update_start_ <-& (R_next_last_dest_id_261_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_261_sample_completed__ps <-& (R_next_last_dest_id_261_sample_completed_)
          R_next_last_dest_id_261_update_completed__ps <-& (R_next_last_dest_id_261_update_completed_)
          $phisequencer [ phi_stmt_258_phi_seq] : 
          phi_stmt_258_entry_trigger konst_260_sample_start__ps konst_260_sample_completed__ps konst_260_update_start__ps konst_260_update_completed__ps phi_stmt_258_loopback_trigger R_next_last_dest_id_261_sample_start__ps R_next_last_dest_id_261_sample_completed__ps R_next_last_dest_id_261_update_start__ps R_next_last_dest_id_261_update_completed__ps :
          phi_stmt_258_sample_start__ps phi_stmt_258_sample_completed__ps phi_stmt_258_update_start__ps phi_stmt_258_update_completed__ps :
          phi_stmt_258_entry_sample_req_ps phi_stmt_258_loopback_sample_req_ps : 
          phi_stmt_258_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_258
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 151
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 152
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 153
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 154
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 155
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 156
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 157
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 158
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_1
          $T[WPIPE_noblock_obuf_3_1_303_sample_start_] 
          $T[WPIPE_noblock_obuf_3_1_303_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_1_303_update_start_] 
          $T[WPIPE_noblock_obuf_3_1_303_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_1_303 with guard R_send_to_1_302
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_1_303_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_1_303_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_1_303_sample_start_ &-> (WPIPE_noblock_obuf_3_1_303_Sample)
          WPIPE_noblock_obuf_3_1_303_sample_completed_ <-& (WPIPE_noblock_obuf_3_1_303_Sample)
          WPIPE_noblock_obuf_3_1_303_update_start_ <-& (WPIPE_noblock_obuf_3_1_303_sample_completed_)
          WPIPE_noblock_obuf_3_1_303_update_start_ &-> (WPIPE_noblock_obuf_3_1_303_Update)
          WPIPE_noblock_obuf_3_1_303_update_completed_ <-& (WPIPE_noblock_obuf_3_1_303_Update)
          WPIPE_noblock_obuf_3_1_303_sample_start_ o<-& (WPIPE_noblock_obuf_3_1_303_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_1_303_sample_start_
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_1_303_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 159
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 160
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_2
          $T[WPIPE_noblock_obuf_3_2_312_sample_start_] 
          $T[WPIPE_noblock_obuf_3_2_312_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_2_312_update_start_] 
          $T[WPIPE_noblock_obuf_3_2_312_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_2_312 with guard R_send_to_2_311
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_2_312_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_2_312_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_2_312_sample_start_ &-> (WPIPE_noblock_obuf_3_2_312_Sample)
          WPIPE_noblock_obuf_3_2_312_sample_completed_ <-& (WPIPE_noblock_obuf_3_2_312_Sample)
          WPIPE_noblock_obuf_3_2_312_update_start_ <-& (WPIPE_noblock_obuf_3_2_312_sample_completed_)
          WPIPE_noblock_obuf_3_2_312_update_start_ &-> (WPIPE_noblock_obuf_3_2_312_Update)
          WPIPE_noblock_obuf_3_2_312_update_completed_ <-& (WPIPE_noblock_obuf_3_2_312_Update)
          WPIPE_noblock_obuf_3_2_312_sample_start_ o<-& (WPIPE_noblock_obuf_3_2_312_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_2_312_sample_start_
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_2_312_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 161
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 162
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_3
          $T[WPIPE_noblock_obuf_3_3_321_sample_start_] 
          $T[WPIPE_noblock_obuf_3_3_321_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_3_321_update_start_] 
          $T[WPIPE_noblock_obuf_3_3_321_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_3_321 with guard R_send_to_3_320
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_3_321_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_3_321_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_3_321_sample_start_ &-> (WPIPE_noblock_obuf_3_3_321_Sample)
          WPIPE_noblock_obuf_3_3_321_sample_completed_ <-& (WPIPE_noblock_obuf_3_3_321_Sample)
          WPIPE_noblock_obuf_3_3_321_update_start_ <-& (WPIPE_noblock_obuf_3_3_321_sample_completed_)
          WPIPE_noblock_obuf_3_3_321_update_start_ &-> (WPIPE_noblock_obuf_3_3_321_Update)
          WPIPE_noblock_obuf_3_3_321_update_completed_ <-& (WPIPE_noblock_obuf_3_3_321_Update)
          WPIPE_noblock_obuf_3_3_321_sample_start_ o<-& (WPIPE_noblock_obuf_3_3_321_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_3_321_sample_start_
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_3_321_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 163
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 164
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_4
          $T[WPIPE_noblock_obuf_3_4_330_sample_start_] 
          $T[WPIPE_noblock_obuf_3_4_330_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_4_330_update_start_] 
          $T[WPIPE_noblock_obuf_3_4_330_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_4_330 with guard R_send_to_4_329
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_4_330_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_4_330_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_4_330_sample_start_ &-> (WPIPE_noblock_obuf_3_4_330_Sample)
          WPIPE_noblock_obuf_3_4_330_sample_completed_ <-& (WPIPE_noblock_obuf_3_4_330_Sample)
          WPIPE_noblock_obuf_3_4_330_update_start_ <-& (WPIPE_noblock_obuf_3_4_330_sample_completed_)
          WPIPE_noblock_obuf_3_4_330_update_start_ &-> (WPIPE_noblock_obuf_3_4_330_Update)
          WPIPE_noblock_obuf_3_4_330_update_completed_ <-& (WPIPE_noblock_obuf_3_4_330_Update)
          WPIPE_noblock_obuf_3_4_330_sample_start_ o<-& (WPIPE_noblock_obuf_3_4_330_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_4_330_sample_start_
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_4_330_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_3
          // read-dependencies for pipe in_data_3
          // write-dependencies for pipe in_data_3
          // signal write dependencies for in_data_3
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_248__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_248_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_248__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_248_loop_body : condition_evaluated
        $bind do_while_stmt_248__entry__  => do_while_stmt_248_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_248_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_248__exit__)
      }
      do_while_stmt_248__entry__ |-> (do_while_stmt_248)
      do_while_stmt_248__exit__ <-| (do_while_stmt_248)
      do_while_stmt_248__entry__ <-| (branch_block_stmt_247__entry__)
      do_while_stmt_248__exit__ |-> (branch_block_stmt_247__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 143
    // constant-object-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // constant-object-declarations for block %inputPort_3_Daemon
    //  file .Aa/switch2x2.opt.aa, line 134
    // constant-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 141
    // 1 
    $constant $W[konst_334_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 143
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_253_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    // 0 
    $constant $W[konst_260_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_265_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_279_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_282_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_293_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_299_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_308_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_317_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_326_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 141
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 143
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    $W[next_count_down_285_254_buffered] : $int<16>
    // count_down
    $W[count_down_250] : $int<16>
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // in_data_3
    $W[RPIPE_in_data_3_257_wire] : $int<32>
    // input_word
    $W[input_word_255] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    $W[next_last_dest_id_291_261_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_258] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 151
    // new_packet
    $W[new_packet_267] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 152
    // dest_id
    $W[dest_id_271] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 153
    // pkt_length
    $W[pkt_length_275] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 154
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_280_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_283_wire] : $int<16>
    // next_count_down
    $W[next_count_down_285] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 155
    // next_last_dest_id
    $W[next_last_dest_id_291] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 156
    // data_to_outport
    $W[data_to_outport_296] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 157
    // send_to_1
    $W[send_to_1_301] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 158
    // noblock_obuf_3_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 159
    // send_to_2
    $W[send_to_2_310] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 160
    // noblock_obuf_3_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 161
    // send_to_3
    $W[send_to_3_319] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 162
    // noblock_obuf_3_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 163
    // send_to_4
    $W[send_to_4_328] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 164
    // noblock_obuf_3_4
    // datapath-instances for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 141
    ==0? [do_while_stmt_248_branch] (konst_334_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 143
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    # := [next_count_down_285_254_buf] (next_count_down_285) (next_count_down_285_254_buffered)     $fullrate
    $buffering $out next_count_down_285_254_buf next_count_down_285_254_buffered  1
    # $phi [phi_stmt_250] (type_cast_253_wire_constant next_count_down_285_254_buffered) ( count_down_250 ) $fullrate
    // $buffering  $out phi_stmt_250 count_down_250 2
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // in_data_3
    $ioport $in [RPIPE_in_data_3_257_inst] (in_data_3) (RPIPE_in_data_3_257_wire)  $fullrate 
    $buffering $out RPIPE_in_data_3_257_inst RPIPE_in_data_3_257_wire 1
    # := [ssrc_phi_stmt_255] (RPIPE_in_data_3_257_wire) (input_word_255)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    # := [next_last_dest_id_291_261_buf] (next_last_dest_id_291) (next_last_dest_id_291_261_buffered)     $fullrate
    $buffering $out next_last_dest_id_291_261_buf next_last_dest_id_291_261_buffered  1
    # $phi [phi_stmt_258] (konst_260_wire_constant next_last_dest_id_291_261_buffered) ( last_dest_id_258 ) $fullrate
    // $buffering  $out phi_stmt_258 last_dest_id_258 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 151
    // (count_down == 0 )
    ==[EQ_u16_u1_266_inst] (count_down_250 konst_265_wire_constant) (new_packet_267)   $flowthrough 
    $delay EQ_u16_u1_266_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 152
    // ( $slice input_word 31 24 ) 
    [:] [slice_270_inst] (input_word_255 31 24) (dest_id_271)  $flowthrough
    $delay slice_270_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 153
    // ( $slice input_word 23 8 ) 
    [:] [slice_274_inst] (input_word_255 23 8) (pkt_length_275)  $flowthrough
    $delay slice_274_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 154
    // (pkt_length - 1 )
    -[SUB_u16_u16_280_inst] (pkt_length_275 konst_279_wire_constant) (SUB_u16_u16_280_wire)   $flowthrough 
    $delay SUB_u16_u16_280_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_283_inst] (count_down_250 konst_282_wire_constant) (SUB_u16_u16_283_wire)   $flowthrough 
    $delay SUB_u16_u16_283_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_284_inst] (new_packet_267 SUB_u16_u16_280_wire SUB_u16_u16_283_wire) (next_count_down_285)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 155
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_290_inst] (new_packet_267 dest_id_271 last_dest_id_258) (next_last_dest_id_291)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 156
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_295_inst] (R_ONE_1_293_wire_constant input_word_255) (data_to_outport_296)   $flowthrough 
    $delay CONCAT_u1_u33_295_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 157
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_300_inst] (next_last_dest_id_291 konst_299_wire_constant) (send_to_1_301)   $flowthrough 
    $delay EQ_u8_u1_300_inst 0
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 158
    // noblock_obuf_3_1
    $ioport $out [WPIPE_noblock_obuf_3_1_303_inst]  (data_to_outport_296) (noblock_obuf_3_1) $guard ( send_to_1_301 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 159
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_309_inst] (next_last_dest_id_291 konst_308_wire_constant) (send_to_2_310)   $flowthrough 
    $delay EQ_u8_u1_309_inst 0
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 160
    // noblock_obuf_3_2
    $ioport $out [WPIPE_noblock_obuf_3_2_312_inst]  (data_to_outport_296) (noblock_obuf_3_2) $guard ( send_to_2_310 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 161
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_318_inst] (next_last_dest_id_291 konst_317_wire_constant) (send_to_3_319)   $flowthrough 
    $delay EQ_u8_u1_318_inst 0
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 162
    // noblock_obuf_3_3
    $ioport $out [WPIPE_noblock_obuf_3_3_321_inst]  (data_to_outport_296) (noblock_obuf_3_3) $guard ( send_to_3_319 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 163
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_327_inst] (next_last_dest_id_291 konst_326_wire_constant) (send_to_4_328)   $flowthrough 
    $delay EQ_u8_u1_327_inst 0
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 164
    // noblock_obuf_3_4
    $ioport $out [WPIPE_noblock_obuf_3_4_330_inst]  (data_to_outport_296) (noblock_obuf_3_4) $guard ( send_to_4_328 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_248
  //  file .Aa/switch2x2.opt.aa, line 141
  phi_stmt_250 <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_entry_sample_req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_loopback_sample_req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_phi_mux_ack)
  next_count_down_285_254_buf <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Update/ack)
  // in_data_3
  RPIPE_in_data_3_257_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Sample/rr branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Update/cr) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Sample/ra branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Update/ca)
  phi_stmt_258 <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_entry_sample_req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_loopback_sample_req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_phi_mux_ack)
  next_last_dest_id_291_261_buf <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 151
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 152
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 153
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 154
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 155
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 156
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 157
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 158
  // data_to_outport
  // noblock_obuf_3_1
  WPIPE_noblock_obuf_3_1_303_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 159
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 160
  // data_to_outport
  // noblock_obuf_3_2
  WPIPE_noblock_obuf_3_2_312_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 161
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 162
  // data_to_outport
  // noblock_obuf_3_3
  WPIPE_noblock_obuf_3_3_321_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 163
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 164
  // data_to_outport
  // noblock_obuf_3_4
  WPIPE_noblock_obuf_3_4_330_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Update/ack)
  do_while_stmt_248_branch <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/condition_evaluated) (branch_block_stmt_247/do_while_stmt_248/loop_exit/ack branch_block_stmt_247/do_while_stmt_248/loop_taken/ack)
}
$module [inputPort_4_Daemon] 
{
  // pipe-declarations for block %inputPort_4_Daemon
  //  file .Aa/switch2x2.opt.aa, line 168
  // pipe-declarations for block %inputPort_4_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 173
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_338] // Branch Block  file .Aa/switch2x2.opt.aa, line 173
    {
      $P [branch_block_stmt_338__entry__]
      branch_block_stmt_338__entry__ <-| ($entry)
      $P [branch_block_stmt_338__exit__]
      branch_block_stmt_338__exit__ |-> ($exit)
      $P [do_while_stmt_339__entry__] 
      $P [do_while_stmt_339__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 175
      <o> [do_while_stmt_339]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_339__entry__] 
        $P[do_while_stmt_339__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_339_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_341
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_341_sample_start_] 
          $T[phi_stmt_341_sample_completed_] 
          $T[phi_stmt_341_update_start_] 
          $T[phi_stmt_341_update_completed_] 
          $T[phi_stmt_341_sample_start__ps] 
          phi_stmt_341_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_341_sample_completed__ps] 
          phi_stmt_341_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_341_update_start__ps] 
          phi_stmt_341_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_341_update_completed__ps] 
          phi_stmt_341_update_completed_ <-& (phi_stmt_341_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_341_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_341_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_341_update_start_)
          $T[phi_stmt_341_loopback_trigger] 
          phi_stmt_341_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_341_loopback_sample_req] 
          $T[phi_stmt_341_loopback_sample_req_ps] 
          phi_stmt_341_loopback_sample_req <-& (phi_stmt_341_loopback_sample_req_ps)
          phi_stmt_341_loopback_sample_req &-> ($null)
          $T[phi_stmt_341_entry_trigger] 
          phi_stmt_341_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_341_entry_sample_req] 
          $T[phi_stmt_341_entry_sample_req_ps] 
          phi_stmt_341_entry_sample_req <-& (phi_stmt_341_entry_sample_req_ps)
          phi_stmt_341_entry_sample_req &-> ($null)
          phi_stmt_341_update_start_ o<-& (phi_stmt_341_update_completed_ 0)
          phi_stmt_341_sample_start_ o<-& (phi_stmt_341_sample_completed_ 1)
          $T[phi_stmt_341_merged_reqs] 
          $T[phi_stmt_341_phi_mux_ack] 
          $T[phi_stmt_341_phi_mux_ack_ps] 
          phi_stmt_341_phi_mux_ack_ps <-& (phi_stmt_341_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_341_update_completed_)
          $T[type_cast_344_sample_start__ps] 
          $T[type_cast_344_sample_completed__ps] 
          $T[type_cast_344_update_start__ps] 
          $T[type_cast_344_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_344_sample_start_] 
          $T[type_cast_344_sample_completed_] 
          type_cast_344_sample_completed_ <-& (type_cast_344_sample_start_)
          $T[type_cast_344_update_start_] 
          $T [type_cast_344_update_completed_] $delay 
          type_cast_344_update_completed_ <-& (type_cast_344_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_344_sample_start_ <-& (type_cast_344_sample_start__ps)
          type_cast_344_update_start_ <-& (type_cast_344_update_start__ps)
          // Phi complete dependency.
          type_cast_344_sample_completed__ps <-& (type_cast_344_sample_completed_)
          type_cast_344_update_completed__ps <-& (type_cast_344_update_completed_)
          $T[R_next_count_down_345_sample_start__ps] 
          $T[R_next_count_down_345_sample_completed__ps] 
          $T[R_next_count_down_345_update_start__ps] 
          $T[R_next_count_down_345_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_345_sample_start_] 
          $T[R_next_count_down_345_sample_completed_] 
          $T[R_next_count_down_345_update_start_] 
          $T[R_next_count_down_345_update_completed_] 
          ;;[R_next_count_down_345_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_345_sample_start_ &-> (R_next_count_down_345_Sample)
          R_next_count_down_345_sample_completed_ <-& (R_next_count_down_345_Sample)
          ;;[R_next_count_down_345_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_345_update_start_ &-> (R_next_count_down_345_Update)
          R_next_count_down_345_update_completed_ <-& (R_next_count_down_345_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_345_sample_start_ <-& (R_next_count_down_345_sample_start__ps)
          R_next_count_down_345_update_start_ <-& (R_next_count_down_345_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_345_sample_completed__ps <-& (R_next_count_down_345_sample_completed_)
          R_next_count_down_345_update_completed__ps <-& (R_next_count_down_345_update_completed_)
          $phisequencer [ phi_stmt_341_phi_seq] : 
          phi_stmt_341_entry_trigger type_cast_344_sample_start__ps type_cast_344_sample_completed__ps type_cast_344_update_start__ps type_cast_344_update_completed__ps phi_stmt_341_loopback_trigger R_next_count_down_345_sample_start__ps R_next_count_down_345_sample_completed__ps R_next_count_down_345_update_start__ps R_next_count_down_345_update_completed__ps :
          phi_stmt_341_sample_start__ps phi_stmt_341_sample_completed__ps phi_stmt_341_update_start__ps phi_stmt_341_update_completed__ps :
          phi_stmt_341_entry_sample_req_ps phi_stmt_341_loopback_sample_req_ps : 
          phi_stmt_341_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_341
          // start:  single source PHI statement phi_stmt_346
          // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_346_sample_start_] 
          $T[phi_stmt_346_sample_completed_] 
          $T[phi_stmt_346_update_start_] 
          $T[phi_stmt_346_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_346_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_346_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_346_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_4
          $T[RPIPE_in_data_4_348_sample_start_] 
          $T[RPIPE_in_data_4_348_sample_completed_] 
          $T[RPIPE_in_data_4_348_update_start_] 
          $T[RPIPE_in_data_4_348_update_completed_] 
          ;;[RPIPE_in_data_4_348_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_4_348_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_4_348_sample_start_ &-> (RPIPE_in_data_4_348_Sample)
          RPIPE_in_data_4_348_sample_completed_ <-& (RPIPE_in_data_4_348_Sample)
          RPIPE_in_data_4_348_update_start_ <-& (RPIPE_in_data_4_348_sample_completed_)
          RPIPE_in_data_4_348_update_start_ &-> (RPIPE_in_data_4_348_Update)
          RPIPE_in_data_4_348_update_completed_ <-& (RPIPE_in_data_4_348_Update)
          RPIPE_in_data_4_348_sample_start_ o<-& (RPIPE_in_data_4_348_update_completed_ 0)
          // RAW reenables for in_data_4
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_4_348_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_4_348_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_4_348_update_start_)
          phi_stmt_346_update_completed_ <-& (RPIPE_in_data_4_348_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_346_update_completed_)
          // done: PHI Statement phi_stmt_346
          // start:  PHI statement phi_stmt_349
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_349_sample_start_] 
          $T[phi_stmt_349_sample_completed_] 
          $T[phi_stmt_349_update_start_] 
          $T[phi_stmt_349_update_completed_] 
          $T[phi_stmt_349_sample_start__ps] 
          phi_stmt_349_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_349_sample_completed__ps] 
          phi_stmt_349_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_349_update_start__ps] 
          phi_stmt_349_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_349_update_completed__ps] 
          phi_stmt_349_update_completed_ <-& (phi_stmt_349_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_349_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_349_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_349_update_start_)
          $T[phi_stmt_349_loopback_trigger] 
          phi_stmt_349_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_349_loopback_sample_req] 
          $T[phi_stmt_349_loopback_sample_req_ps] 
          phi_stmt_349_loopback_sample_req <-& (phi_stmt_349_loopback_sample_req_ps)
          phi_stmt_349_loopback_sample_req &-> ($null)
          $T[phi_stmt_349_entry_trigger] 
          phi_stmt_349_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_349_entry_sample_req] 
          $T[phi_stmt_349_entry_sample_req_ps] 
          phi_stmt_349_entry_sample_req <-& (phi_stmt_349_entry_sample_req_ps)
          phi_stmt_349_entry_sample_req &-> ($null)
          phi_stmt_349_update_start_ o<-& (phi_stmt_349_update_completed_ 0)
          phi_stmt_349_sample_start_ o<-& (phi_stmt_349_sample_completed_ 1)
          $T[phi_stmt_349_merged_reqs] 
          $T[phi_stmt_349_phi_mux_ack] 
          $T[phi_stmt_349_phi_mux_ack_ps] 
          phi_stmt_349_phi_mux_ack_ps <-& (phi_stmt_349_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_349_update_completed_)
          $T[konst_351_sample_start__ps] 
          $T[konst_351_sample_completed__ps] 
          $T[konst_351_update_start__ps] 
          $T[konst_351_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_351_sample_start_] 
          $T[konst_351_sample_completed_] 
          konst_351_sample_completed_ <-& (konst_351_sample_start_)
          $T[konst_351_update_start_] 
          $T [konst_351_update_completed_] $delay 
          konst_351_update_completed_ <-& (konst_351_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_351_sample_start_ <-& (konst_351_sample_start__ps)
          konst_351_update_start_ <-& (konst_351_update_start__ps)
          // Phi complete dependency.
          konst_351_sample_completed__ps <-& (konst_351_sample_completed_)
          konst_351_update_completed__ps <-& (konst_351_update_completed_)
          $T[R_next_last_dest_id_352_sample_start__ps] 
          $T[R_next_last_dest_id_352_sample_completed__ps] 
          $T[R_next_last_dest_id_352_update_start__ps] 
          $T[R_next_last_dest_id_352_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_352_sample_start_] 
          $T[R_next_last_dest_id_352_sample_completed_] 
          $T[R_next_last_dest_id_352_update_start_] 
          $T[R_next_last_dest_id_352_update_completed_] 
          ;;[R_next_last_dest_id_352_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_352_sample_start_ &-> (R_next_last_dest_id_352_Sample)
          R_next_last_dest_id_352_sample_completed_ <-& (R_next_last_dest_id_352_Sample)
          ;;[R_next_last_dest_id_352_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_352_update_start_ &-> (R_next_last_dest_id_352_Update)
          R_next_last_dest_id_352_update_completed_ <-& (R_next_last_dest_id_352_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_352_sample_start_ <-& (R_next_last_dest_id_352_sample_start__ps)
          R_next_last_dest_id_352_update_start_ <-& (R_next_last_dest_id_352_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_352_sample_completed__ps <-& (R_next_last_dest_id_352_sample_completed_)
          R_next_last_dest_id_352_update_completed__ps <-& (R_next_last_dest_id_352_update_completed_)
          $phisequencer [ phi_stmt_349_phi_seq] : 
          phi_stmt_349_entry_trigger konst_351_sample_start__ps konst_351_sample_completed__ps konst_351_update_start__ps konst_351_update_completed__ps phi_stmt_349_loopback_trigger R_next_last_dest_id_352_sample_start__ps R_next_last_dest_id_352_sample_completed__ps R_next_last_dest_id_352_update_start__ps R_next_last_dest_id_352_update_completed__ps :
          phi_stmt_349_sample_start__ps phi_stmt_349_sample_completed__ps phi_stmt_349_update_start__ps phi_stmt_349_update_completed__ps :
          phi_stmt_349_entry_sample_req_ps phi_stmt_349_loopback_sample_req_ps : 
          phi_stmt_349_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_349
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 185
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 186
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 187
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 188
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 189
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 190
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 191
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 192
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_1
          $T[WPIPE_noblock_obuf_4_1_394_sample_start_] 
          $T[WPIPE_noblock_obuf_4_1_394_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_1_394_update_start_] 
          $T[WPIPE_noblock_obuf_4_1_394_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_1_394 with guard R_send_to_1_393
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_1_394_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_1_394_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_1_394_sample_start_ &-> (WPIPE_noblock_obuf_4_1_394_Sample)
          WPIPE_noblock_obuf_4_1_394_sample_completed_ <-& (WPIPE_noblock_obuf_4_1_394_Sample)
          WPIPE_noblock_obuf_4_1_394_update_start_ <-& (WPIPE_noblock_obuf_4_1_394_sample_completed_)
          WPIPE_noblock_obuf_4_1_394_update_start_ &-> (WPIPE_noblock_obuf_4_1_394_Update)
          WPIPE_noblock_obuf_4_1_394_update_completed_ <-& (WPIPE_noblock_obuf_4_1_394_Update)
          WPIPE_noblock_obuf_4_1_394_sample_start_ o<-& (WPIPE_noblock_obuf_4_1_394_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_1_394_sample_start_
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_1_394_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 193
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 194
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_2
          $T[WPIPE_noblock_obuf_4_2_403_sample_start_] 
          $T[WPIPE_noblock_obuf_4_2_403_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_2_403_update_start_] 
          $T[WPIPE_noblock_obuf_4_2_403_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_2_403 with guard R_send_to_2_402
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_2_403_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_2_403_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_2_403_sample_start_ &-> (WPIPE_noblock_obuf_4_2_403_Sample)
          WPIPE_noblock_obuf_4_2_403_sample_completed_ <-& (WPIPE_noblock_obuf_4_2_403_Sample)
          WPIPE_noblock_obuf_4_2_403_update_start_ <-& (WPIPE_noblock_obuf_4_2_403_sample_completed_)
          WPIPE_noblock_obuf_4_2_403_update_start_ &-> (WPIPE_noblock_obuf_4_2_403_Update)
          WPIPE_noblock_obuf_4_2_403_update_completed_ <-& (WPIPE_noblock_obuf_4_2_403_Update)
          WPIPE_noblock_obuf_4_2_403_sample_start_ o<-& (WPIPE_noblock_obuf_4_2_403_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_2_403_sample_start_
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_2_403_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 195
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 196
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_3
          $T[WPIPE_noblock_obuf_4_3_412_sample_start_] 
          $T[WPIPE_noblock_obuf_4_3_412_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_3_412_update_start_] 
          $T[WPIPE_noblock_obuf_4_3_412_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_3_412 with guard R_send_to_3_411
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_3_412_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_3_412_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_3_412_sample_start_ &-> (WPIPE_noblock_obuf_4_3_412_Sample)
          WPIPE_noblock_obuf_4_3_412_sample_completed_ <-& (WPIPE_noblock_obuf_4_3_412_Sample)
          WPIPE_noblock_obuf_4_3_412_update_start_ <-& (WPIPE_noblock_obuf_4_3_412_sample_completed_)
          WPIPE_noblock_obuf_4_3_412_update_start_ &-> (WPIPE_noblock_obuf_4_3_412_Update)
          WPIPE_noblock_obuf_4_3_412_update_completed_ <-& (WPIPE_noblock_obuf_4_3_412_Update)
          WPIPE_noblock_obuf_4_3_412_sample_start_ o<-& (WPIPE_noblock_obuf_4_3_412_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_3_412_sample_start_
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_3_412_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 197
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 198
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_4
          $T[WPIPE_noblock_obuf_4_4_421_sample_start_] 
          $T[WPIPE_noblock_obuf_4_4_421_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_4_421_update_start_] 
          $T[WPIPE_noblock_obuf_4_4_421_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_4_421 with guard R_send_to_4_420
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_4_421_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_4_421_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_4_421_sample_start_ &-> (WPIPE_noblock_obuf_4_4_421_Sample)
          WPIPE_noblock_obuf_4_4_421_sample_completed_ <-& (WPIPE_noblock_obuf_4_4_421_Sample)
          WPIPE_noblock_obuf_4_4_421_update_start_ <-& (WPIPE_noblock_obuf_4_4_421_sample_completed_)
          WPIPE_noblock_obuf_4_4_421_update_start_ &-> (WPIPE_noblock_obuf_4_4_421_Update)
          WPIPE_noblock_obuf_4_4_421_update_completed_ <-& (WPIPE_noblock_obuf_4_4_421_Update)
          WPIPE_noblock_obuf_4_4_421_sample_start_ o<-& (WPIPE_noblock_obuf_4_4_421_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_4_421_sample_start_
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_4_421_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_4
          // read-dependencies for pipe in_data_4
          // write-dependencies for pipe in_data_4
          // signal write dependencies for in_data_4
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_339__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_339_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_339__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_339_loop_body : condition_evaluated
        $bind do_while_stmt_339__entry__  => do_while_stmt_339_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_339_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_339__exit__)
      }
      do_while_stmt_339__entry__ |-> (do_while_stmt_339)
      do_while_stmt_339__exit__ <-| (do_while_stmt_339)
      do_while_stmt_339__entry__ <-| (branch_block_stmt_338__entry__)
      do_while_stmt_339__exit__ |-> (branch_block_stmt_338__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 177
    // constant-object-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // constant-object-declarations for block %inputPort_4_Daemon
    //  file .Aa/switch2x2.opt.aa, line 168
    // constant-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 175
    // 1 
    $constant $W[konst_425_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 177
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_344_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    // 0 
    $constant $W[konst_351_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_356_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_370_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_373_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_384_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_390_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_399_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_408_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_417_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 175
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 177
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    $W[next_count_down_376_345_buffered] : $int<16>
    // count_down
    $W[count_down_341] : $int<16>
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // in_data_4
    $W[RPIPE_in_data_4_348_wire] : $int<32>
    // input_word
    $W[input_word_346] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    $W[next_last_dest_id_382_352_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_349] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 185
    // new_packet
    $W[new_packet_358] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 186
    // dest_id
    $W[dest_id_362] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 187
    // pkt_length
    $W[pkt_length_366] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 188
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_371_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_374_wire] : $int<16>
    // next_count_down
    $W[next_count_down_376] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 189
    // next_last_dest_id
    $W[next_last_dest_id_382] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 190
    // data_to_outport
    $W[data_to_outport_387] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 191
    // send_to_1
    $W[send_to_1_392] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 192
    // noblock_obuf_4_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 193
    // send_to_2
    $W[send_to_2_401] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 194
    // noblock_obuf_4_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 195
    // send_to_3
    $W[send_to_3_410] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 196
    // noblock_obuf_4_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 197
    // send_to_4
    $W[send_to_4_419] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 198
    // noblock_obuf_4_4
    // datapath-instances for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 175
    ==0? [do_while_stmt_339_branch] (konst_425_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 177
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    # := [next_count_down_376_345_buf] (next_count_down_376) (next_count_down_376_345_buffered)     $fullrate
    $buffering $out next_count_down_376_345_buf next_count_down_376_345_buffered  1
    # $phi [phi_stmt_341] (type_cast_344_wire_constant next_count_down_376_345_buffered) ( count_down_341 ) $fullrate
    // $buffering  $out phi_stmt_341 count_down_341 2
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // in_data_4
    $ioport $in [RPIPE_in_data_4_348_inst] (in_data_4) (RPIPE_in_data_4_348_wire)  $fullrate 
    $buffering $out RPIPE_in_data_4_348_inst RPIPE_in_data_4_348_wire 1
    # := [ssrc_phi_stmt_346] (RPIPE_in_data_4_348_wire) (input_word_346)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    # := [next_last_dest_id_382_352_buf] (next_last_dest_id_382) (next_last_dest_id_382_352_buffered)     $fullrate
    $buffering $out next_last_dest_id_382_352_buf next_last_dest_id_382_352_buffered  1
    # $phi [phi_stmt_349] (konst_351_wire_constant next_last_dest_id_382_352_buffered) ( last_dest_id_349 ) $fullrate
    // $buffering  $out phi_stmt_349 last_dest_id_349 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 185
    // (count_down == 0 )
    ==[EQ_u16_u1_357_inst] (count_down_341 konst_356_wire_constant) (new_packet_358)   $flowthrough 
    $delay EQ_u16_u1_357_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 186
    // ( $slice input_word 31 24 ) 
    [:] [slice_361_inst] (input_word_346 31 24) (dest_id_362)  $flowthrough
    $delay slice_361_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 187
    // ( $slice input_word 23 8 ) 
    [:] [slice_365_inst] (input_word_346 23 8) (pkt_length_366)  $flowthrough
    $delay slice_365_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 188
    // (pkt_length - 1 )
    -[SUB_u16_u16_371_inst] (pkt_length_366 konst_370_wire_constant) (SUB_u16_u16_371_wire)   $flowthrough 
    $delay SUB_u16_u16_371_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_374_inst] (count_down_341 konst_373_wire_constant) (SUB_u16_u16_374_wire)   $flowthrough 
    $delay SUB_u16_u16_374_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_375_inst] (new_packet_358 SUB_u16_u16_371_wire SUB_u16_u16_374_wire) (next_count_down_376)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 189
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_381_inst] (new_packet_358 dest_id_362 last_dest_id_349) (next_last_dest_id_382)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 190
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_386_inst] (R_ONE_1_384_wire_constant input_word_346) (data_to_outport_387)   $flowthrough 
    $delay CONCAT_u1_u33_386_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 191
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_391_inst] (next_last_dest_id_382 konst_390_wire_constant) (send_to_1_392)   $flowthrough 
    $delay EQ_u8_u1_391_inst 0
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 192
    // noblock_obuf_4_1
    $ioport $out [WPIPE_noblock_obuf_4_1_394_inst]  (data_to_outport_387) (noblock_obuf_4_1) $guard ( send_to_1_392 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 193
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_400_inst] (next_last_dest_id_382 konst_399_wire_constant) (send_to_2_401)   $flowthrough 
    $delay EQ_u8_u1_400_inst 0
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 194
    // noblock_obuf_4_2
    $ioport $out [WPIPE_noblock_obuf_4_2_403_inst]  (data_to_outport_387) (noblock_obuf_4_2) $guard ( send_to_2_401 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 195
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_409_inst] (next_last_dest_id_382 konst_408_wire_constant) (send_to_3_410)   $flowthrough 
    $delay EQ_u8_u1_409_inst 0
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 196
    // noblock_obuf_4_3
    $ioport $out [WPIPE_noblock_obuf_4_3_412_inst]  (data_to_outport_387) (noblock_obuf_4_3) $guard ( send_to_3_410 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 197
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_418_inst] (next_last_dest_id_382 konst_417_wire_constant) (send_to_4_419)   $flowthrough 
    $delay EQ_u8_u1_418_inst 0
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 198
    // noblock_obuf_4_4
    $ioport $out [WPIPE_noblock_obuf_4_4_421_inst]  (data_to_outport_387) (noblock_obuf_4_4) $guard ( send_to_4_419 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_339
  //  file .Aa/switch2x2.opt.aa, line 175
  phi_stmt_341 <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_entry_sample_req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_loopback_sample_req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_phi_mux_ack)
  next_count_down_376_345_buf <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Update/ack)
  // in_data_4
  RPIPE_in_data_4_348_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Sample/rr branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Update/cr) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Sample/ra branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Update/ca)
  phi_stmt_349 <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_entry_sample_req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_loopback_sample_req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_phi_mux_ack)
  next_last_dest_id_382_352_buf <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 185
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 186
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 187
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 188
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 189
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 190
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 191
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 192
  // data_to_outport
  // noblock_obuf_4_1
  WPIPE_noblock_obuf_4_1_394_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 193
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 194
  // data_to_outport
  // noblock_obuf_4_2
  WPIPE_noblock_obuf_4_2_403_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 195
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 196
  // data_to_outport
  // noblock_obuf_4_3
  WPIPE_noblock_obuf_4_3_412_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 197
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 198
  // data_to_outport
  // noblock_obuf_4_4
  WPIPE_noblock_obuf_4_4_421_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Update/ack)
  do_while_stmt_339_branch <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/condition_evaluated) (branch_block_stmt_338/do_while_stmt_339/loop_exit/ack branch_block_stmt_338/do_while_stmt_339/loop_taken/ack)
}
$volatile $module [prioritySelect] 
{
  $in down_counter:$int<8>
  // can point into 
  active_packet:$int<3>
  // can point into 
  pkt_priority:$int<3>
  // can point into 
  p1_valid:$int<1>
  // can point into 
  p2_valid:$int<1>
  // can point into 
  p3_valid:$int<1>
  // can point into 
  p4_valid:$int<1>
  // can point into 
  $out next_active_packet:$int<3>
  // can point into 
  next_pkt_priority:$int<3>
  // can point into 
  // pipe-declarations for block %prioritySelect
  //  file .Aa/switch2x2.opt.aa, line 202
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %prioritySelect
    //  file .Aa/switch2x2.opt.aa, line 202
    // 0 
    $constant $W[konst_440_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_448_wire_constant] : $int<3> := _b001// 1
    // 3 
    $constant $W[konst_460_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_469_wire_constant] : $int<3> := _b100// 4
    // 2 
    $constant $W[konst_483_wire_constant] : $int<3> := _b010// 2
    // 4 
    $constant $W[konst_495_wire_constant] : $int<3> := _b100// 4
    // 1 
    $constant $W[konst_504_wire_constant] : $int<3> := _b001// 1
    // 3 
    $constant $W[konst_518_wire_constant] : $int<3> := _b011// 3
    // 1 
    $constant $W[konst_530_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_539_wire_constant] : $int<3> := _b010// 2
    // 4 
    $constant $W[konst_553_wire_constant] : $int<3> := _b100// 4
    // 2 
    $constant $W[konst_565_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_574_wire_constant] : $int<3> := _b011// 3
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    // _b0 
    $constant $W[konst_587_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_1 1   _b0  ) 
    // 1 
    $constant $W[konst_590_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_591_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_2 2   _b0  ) 
    // 2 
    $constant $W[konst_595_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_596_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_3 3   _b0  ) 
    // 3 
    $constant $W[konst_600_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_601_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_4 4   _b0  ) 
    // 4 
    $constant $W[konst_604_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_605_wire_constant] : $int<3> := _b000// 0
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    // _b0 
    $constant $W[konst_620_wire_constant] : $int<3> := _b000// 0
    // ( $mux ( ~ d0 ) pkt_priority  _b0  ) 
    // _b0 
    $constant $W[konst_629_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_1 2   _b0  ) 
    // 2 
    $constant $W[konst_632_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_633_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_2 3   _b0  ) 
    // 3 
    $constant $W[konst_637_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_638_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_3 4   _b0  ) 
    // 4 
    $constant $W[konst_642_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_643_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_4 1   _b0  ) 
    // 1 
    $constant $W[konst_646_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_647_wire_constant] : $int<3> := _b000// 0
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 207
    // d0
    $W[d0_442] : $int<1>
    // 	select_1 := ((d0 & p1_valid) & (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 208
    // (d0 & p1_valid)
    $intermediate $W[AND_u1_u1_446_wire] : $int<1>
    // (pkt_priority == 1 )
    $intermediate $W[EQ_u3_u1_449_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_451_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_453_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_454_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_456_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_457_wire] : $int<1>
    // ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_458_wire] : $int<1>
    // (pkt_priority == 3 )
    $intermediate $W[EQ_u3_u1_461_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_463_wire] : $int<1>
    // ((pkt_priority == 3 ) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_464_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_466_wire] : $int<1>
    // (((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid ))
    $intermediate $W[AND_u1_u1_467_wire] : $int<1>
    // (pkt_priority == 4 )
    $intermediate $W[EQ_u3_u1_470_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_472_wire] : $int<1>
    // ((pkt_priority == 4 ) & ( ~ p4_valid ))
    $intermediate $W[AND_u1_u1_473_wire] : $int<1>
    // ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid )))
    $intermediate $W[OR_u1_u1_474_wire] : $int<1>
    // (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid ))))
    $intermediate $W[OR_u1_u1_475_wire] : $int<1>
    // select_1
    $W[select_1_477] : $int<1>
    // 	select_2 := ((d0 & p2_valid) & (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 209
    // (d0 & p2_valid)
    $intermediate $W[AND_u1_u1_481_wire] : $int<1>
    // (pkt_priority == 2 )
    $intermediate $W[EQ_u3_u1_484_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_486_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_488_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_489_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_491_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_492_wire] : $int<1>
    // ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_493_wire] : $int<1>
    // (pkt_priority == 4 )
    $intermediate $W[EQ_u3_u1_496_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_498_wire] : $int<1>
    // ((pkt_priority == 4 ) & ( ~ p4_valid ))
    $intermediate $W[AND_u1_u1_499_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_501_wire] : $int<1>
    // (((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_502_wire] : $int<1>
    // (pkt_priority == 1 )
    $intermediate $W[EQ_u3_u1_505_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_507_wire] : $int<1>
    // ((pkt_priority == 1 ) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_508_wire] : $int<1>
    // ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid )))
    $intermediate $W[OR_u1_u1_509_wire] : $int<1>
    // (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid ))))
    $intermediate $W[OR_u1_u1_510_wire] : $int<1>
    // select_2
    $W[select_2_512] : $int<1>
    // 	select_3 := ((d0 & p3_valid) & (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 210
    // (d0 & p3_valid)
    $intermediate $W[AND_u1_u1_516_wire] : $int<1>
    // (pkt_priority == 3 )
    $intermediate $W[EQ_u3_u1_519_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_521_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_523_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_524_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_526_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_527_wire] : $int<1>
    // ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid )))
    $intermediate $W[OR_u1_u1_528_wire] : $int<1>
    // (pkt_priority == 1 )
    $intermediate $W[EQ_u3_u1_531_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_533_wire] : $int<1>
    // ((pkt_priority == 1 ) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_534_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_536_wire] : $int<1>
    // (((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_537_wire] : $int<1>
    // (pkt_priority == 2 )
    $intermediate $W[EQ_u3_u1_540_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_542_wire] : $int<1>
    // ((pkt_priority == 2 ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_543_wire] : $int<1>
    // ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid )))
    $intermediate $W[OR_u1_u1_544_wire] : $int<1>
    // (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid ))))
    $intermediate $W[OR_u1_u1_545_wire] : $int<1>
    // select_3
    $W[select_3_547] : $int<1>
    // 	select_4 := ((d0 & p4_valid) & (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 211
    // (d0 & p4_valid)
    $intermediate $W[AND_u1_u1_551_wire] : $int<1>
    // (pkt_priority == 4 )
    $intermediate $W[EQ_u3_u1_554_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_556_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_558_wire] : $int<1>
    // (( ~ p1_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_559_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_561_wire] : $int<1>
    // ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_562_wire] : $int<1>
    // ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_563_wire] : $int<1>
    // (pkt_priority == 2 )
    $intermediate $W[EQ_u3_u1_566_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_568_wire] : $int<1>
    // ((pkt_priority == 2 ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_569_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_571_wire] : $int<1>
    // (((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_572_wire] : $int<1>
    // (pkt_priority == 3 )
    $intermediate $W[EQ_u3_u1_575_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_577_wire] : $int<1>
    // ((pkt_priority == 3 ) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_578_wire] : $int<1>
    // ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_579_wire] : $int<1>
    // (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid ))))
    $intermediate $W[OR_u1_u1_580_wire] : $int<1>
    // select_4
    $W[select_4_582] : $int<1>
    // 	next_active_packet := (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 212
    // ( ~ d0 )
    $intermediate $W[NOT_u1_u1_585_wire] : $int<1>
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    $intermediate $W[MUX_588_wire] : $int<3>
    // ( $mux select_1 1   _b0  ) 
    $intermediate $W[MUX_592_wire] : $int<3>
    // (( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) )
    $intermediate $W[OR_u3_u3_593_wire] : $int<3>
    // ( $mux select_2 2   _b0  ) 
    $intermediate $W[MUX_597_wire] : $int<3>
    // ((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) )
    $intermediate $W[OR_u3_u3_598_wire] : $int<3>
    // ( $mux select_3 3   _b0  ) 
    $intermediate $W[MUX_602_wire] : $int<3>
    // ( $mux select_4 4   _b0  ) 
    $intermediate $W[MUX_606_wire] : $int<3>
    // (( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) )
    $intermediate $W[OR_u3_u3_607_wire] : $int<3>
    // ( ~ select_1 )
    $intermediate $W[NOT_u1_u1_609_wire] : $int<1>
    // ( ~ select_2 )
    $intermediate $W[NOT_u1_u1_611_wire] : $int<1>
    // (( ~ select_1 ) & ( ~ select_2 ))
    $intermediate $W[AND_u1_u1_612_wire] : $int<1>
    // ( ~ select_3 )
    $intermediate $W[NOT_u1_u1_614_wire] : $int<1>
    // ( ~ select_4 )
    $intermediate $W[NOT_u1_u1_616_wire] : $int<1>
    // (( ~ select_3 ) & ( ~ select_4 ))
    $intermediate $W[AND_u1_u1_617_wire] : $int<1>
    // ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 )))
    $intermediate $W[AND_u1_u1_618_wire] : $int<1>
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    $intermediate $W[MUX_621_wire] : $int<3>
    // ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )
    $intermediate $W[OR_u3_u3_622_wire] : $int<3>
    // next_active_packet
    // 	next_pkt_priority := (((( $mux ( ~ d0 ) pkt_priority  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) ) | (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 213
    // ( ~ d0 )
    $intermediate $W[NOT_u1_u1_627_wire] : $int<1>
    // ( $mux ( ~ d0 ) pkt_priority  _b0  ) 
    $intermediate $W[MUX_630_wire] : $int<3>
    // ( $mux select_1 2   _b0  ) 
    $intermediate $W[MUX_634_wire] : $int<3>
    // (( $mux ( ~ d0 ) pkt_priority  _b0  )  | ( $mux select_1 2   _b0  ) )
    $intermediate $W[OR_u3_u3_635_wire] : $int<3>
    // ( $mux select_2 3   _b0  ) 
    $intermediate $W[MUX_639_wire] : $int<3>
    // ((( $mux ( ~ d0 ) pkt_priority  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) )
    $intermediate $W[OR_u3_u3_640_wire] : $int<3>
    // ( $mux select_3 4   _b0  ) 
    $intermediate $W[MUX_644_wire] : $int<3>
    // ( $mux select_4 1   _b0  ) 
    $intermediate $W[MUX_648_wire] : $int<3>
    // (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) )
    $intermediate $W[OR_u3_u3_649_wire] : $int<3>
    // next_pkt_priority
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 207
    // (down_counter == 0 )
    ==[EQ_u8_u1_441_inst] (down_counter konst_440_wire_constant) (d0_442)   
    $buffering  $out EQ_u8_u1_441_inst d0_442 1
    $delay EQ_u8_u1_441_inst 1
    // 	select_1 := ((d0 & p1_valid) & (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 208
    // (d0 & p1_valid)
    &[AND_u1_u1_446_inst] (d0_442 p1_valid) (AND_u1_u1_446_wire)   $flowthrough 
    $delay AND_u1_u1_446_inst 0
    // (pkt_priority == 1 )
    ==[EQ_u3_u1_449_inst] (pkt_priority konst_448_wire_constant) (EQ_u3_u1_449_wire)   $flowthrough 
    $delay EQ_u3_u1_449_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_451_inst] (p4_valid) (NOT_u1_u1_451_wire)   $flowthrough
    $delay NOT_u1_u1_451_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_453_inst] (p2_valid) (NOT_u1_u1_453_wire)   $flowthrough
    $delay NOT_u1_u1_453_inst 0
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_454_inst] (NOT_u1_u1_451_wire NOT_u1_u1_453_wire) (AND_u1_u1_454_wire)   $flowthrough 
    $delay AND_u1_u1_454_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_456_inst] (p3_valid) (NOT_u1_u1_456_wire)   $flowthrough
    $delay NOT_u1_u1_456_inst 0
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_457_inst] (AND_u1_u1_454_wire NOT_u1_u1_456_wire) (AND_u1_u1_457_wire)   $flowthrough 
    $delay AND_u1_u1_457_inst 0
    // ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_458_inst] (EQ_u3_u1_449_wire AND_u1_u1_457_wire) (OR_u1_u1_458_wire)   $flowthrough 
    $delay OR_u1_u1_458_inst 0
    // (pkt_priority == 3 )
    ==[EQ_u3_u1_461_inst] (pkt_priority konst_460_wire_constant) (EQ_u3_u1_461_wire)   $flowthrough 
    $delay EQ_u3_u1_461_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_463_inst] (p3_valid) (NOT_u1_u1_463_wire)   $flowthrough
    $delay NOT_u1_u1_463_inst 0
    // ((pkt_priority == 3 ) & ( ~ p3_valid ))
    &[AND_u1_u1_464_inst] (EQ_u3_u1_461_wire NOT_u1_u1_463_wire) (AND_u1_u1_464_wire)   $flowthrough 
    $delay AND_u1_u1_464_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_466_inst] (p4_valid) (NOT_u1_u1_466_wire)   $flowthrough
    $delay NOT_u1_u1_466_inst 0
    // (((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid ))
    &[AND_u1_u1_467_inst] (AND_u1_u1_464_wire NOT_u1_u1_466_wire) (AND_u1_u1_467_wire)   $flowthrough 
    $delay AND_u1_u1_467_inst 0
    // (pkt_priority == 4 )
    ==[EQ_u3_u1_470_inst] (pkt_priority konst_469_wire_constant) (EQ_u3_u1_470_wire)   $flowthrough 
    $delay EQ_u3_u1_470_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_472_inst] (p4_valid) (NOT_u1_u1_472_wire)   $flowthrough
    $delay NOT_u1_u1_472_inst 0
    // ((pkt_priority == 4 ) & ( ~ p4_valid ))
    &[AND_u1_u1_473_inst] (EQ_u3_u1_470_wire NOT_u1_u1_472_wire) (AND_u1_u1_473_wire)   $flowthrough 
    $delay AND_u1_u1_473_inst 0
    // ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid )))
    |[OR_u1_u1_474_inst] (AND_u1_u1_467_wire AND_u1_u1_473_wire) (OR_u1_u1_474_wire)   $flowthrough 
    $delay OR_u1_u1_474_inst 0
    // (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid ))))
    |[OR_u1_u1_475_inst] (OR_u1_u1_458_wire OR_u1_u1_474_wire) (OR_u1_u1_475_wire)   $flowthrough 
    $delay OR_u1_u1_475_inst 0
    // ((d0 & p1_valid) & (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid )))))
    &[AND_u1_u1_476_inst] (AND_u1_u1_446_wire OR_u1_u1_475_wire) (select_1_477)   
    $buffering  $out AND_u1_u1_476_inst select_1_477 1
    $delay AND_u1_u1_476_inst 1
    // 	select_2 := ((d0 & p2_valid) & (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 209
    // (d0 & p2_valid)
    &[AND_u1_u1_481_inst] (d0_442 p2_valid) (AND_u1_u1_481_wire)   $flowthrough 
    $delay AND_u1_u1_481_inst 0
    // (pkt_priority == 2 )
    ==[EQ_u3_u1_484_inst] (pkt_priority konst_483_wire_constant) (EQ_u3_u1_484_wire)   $flowthrough 
    $delay EQ_u3_u1_484_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_486_inst] (p4_valid) (NOT_u1_u1_486_wire)   $flowthrough
    $delay NOT_u1_u1_486_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_488_inst] (p1_valid) (NOT_u1_u1_488_wire)   $flowthrough
    $delay NOT_u1_u1_488_inst 0
    // (( ~ p4_valid ) & ( ~ p1_valid ))
    &[AND_u1_u1_489_inst] (NOT_u1_u1_486_wire NOT_u1_u1_488_wire) (AND_u1_u1_489_wire)   $flowthrough 
    $delay AND_u1_u1_489_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_491_inst] (p3_valid) (NOT_u1_u1_491_wire)   $flowthrough
    $delay NOT_u1_u1_491_inst 0
    // ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_492_inst] (AND_u1_u1_489_wire NOT_u1_u1_491_wire) (AND_u1_u1_492_wire)   $flowthrough 
    $delay AND_u1_u1_492_inst 0
    // ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_493_inst] (EQ_u3_u1_484_wire AND_u1_u1_492_wire) (OR_u1_u1_493_wire)   $flowthrough 
    $delay OR_u1_u1_493_inst 0
    // (pkt_priority == 4 )
    ==[EQ_u3_u1_496_inst] (pkt_priority konst_495_wire_constant) (EQ_u3_u1_496_wire)   $flowthrough 
    $delay EQ_u3_u1_496_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_498_inst] (p4_valid) (NOT_u1_u1_498_wire)   $flowthrough
    $delay NOT_u1_u1_498_inst 0
    // ((pkt_priority == 4 ) & ( ~ p4_valid ))
    &[AND_u1_u1_499_inst] (EQ_u3_u1_496_wire NOT_u1_u1_498_wire) (AND_u1_u1_499_wire)   $flowthrough 
    $delay AND_u1_u1_499_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_501_inst] (p1_valid) (NOT_u1_u1_501_wire)   $flowthrough
    $delay NOT_u1_u1_501_inst 0
    // (((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid ))
    &[AND_u1_u1_502_inst] (AND_u1_u1_499_wire NOT_u1_u1_501_wire) (AND_u1_u1_502_wire)   $flowthrough 
    $delay AND_u1_u1_502_inst 0
    // (pkt_priority == 1 )
    ==[EQ_u3_u1_505_inst] (pkt_priority konst_504_wire_constant) (EQ_u3_u1_505_wire)   $flowthrough 
    $delay EQ_u3_u1_505_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_507_inst] (p1_valid) (NOT_u1_u1_507_wire)   $flowthrough
    $delay NOT_u1_u1_507_inst 0
    // ((pkt_priority == 1 ) & ( ~ p1_valid ))
    &[AND_u1_u1_508_inst] (EQ_u3_u1_505_wire NOT_u1_u1_507_wire) (AND_u1_u1_508_wire)   $flowthrough 
    $delay AND_u1_u1_508_inst 0
    // ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid )))
    |[OR_u1_u1_509_inst] (AND_u1_u1_502_wire AND_u1_u1_508_wire) (OR_u1_u1_509_wire)   $flowthrough 
    $delay OR_u1_u1_509_inst 0
    // (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid ))))
    |[OR_u1_u1_510_inst] (OR_u1_u1_493_wire OR_u1_u1_509_wire) (OR_u1_u1_510_wire)   $flowthrough 
    $delay OR_u1_u1_510_inst 0
    // ((d0 & p2_valid) & (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid )))))
    &[AND_u1_u1_511_inst] (AND_u1_u1_481_wire OR_u1_u1_510_wire) (select_2_512)   
    $buffering  $out AND_u1_u1_511_inst select_2_512 1
    $delay AND_u1_u1_511_inst 1
    // 	select_3 := ((d0 & p3_valid) & (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 210
    // (d0 & p3_valid)
    &[AND_u1_u1_516_inst] (d0_442 p3_valid) (AND_u1_u1_516_wire)   $flowthrough 
    $delay AND_u1_u1_516_inst 0
    // (pkt_priority == 3 )
    ==[EQ_u3_u1_519_inst] (pkt_priority konst_518_wire_constant) (EQ_u3_u1_519_wire)   $flowthrough 
    $delay EQ_u3_u1_519_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_521_inst] (p4_valid) (NOT_u1_u1_521_wire)   $flowthrough
    $delay NOT_u1_u1_521_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_523_inst] (p2_valid) (NOT_u1_u1_523_wire)   $flowthrough
    $delay NOT_u1_u1_523_inst 0
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_524_inst] (NOT_u1_u1_521_wire NOT_u1_u1_523_wire) (AND_u1_u1_524_wire)   $flowthrough 
    $delay AND_u1_u1_524_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_526_inst] (p1_valid) (NOT_u1_u1_526_wire)   $flowthrough
    $delay NOT_u1_u1_526_inst 0
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))
    &[AND_u1_u1_527_inst] (AND_u1_u1_524_wire NOT_u1_u1_526_wire) (AND_u1_u1_527_wire)   $flowthrough 
    $delay AND_u1_u1_527_inst 0
    // ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid )))
    |[OR_u1_u1_528_inst] (EQ_u3_u1_519_wire AND_u1_u1_527_wire) (OR_u1_u1_528_wire)   $flowthrough 
    $delay OR_u1_u1_528_inst 0
    // (pkt_priority == 1 )
    ==[EQ_u3_u1_531_inst] (pkt_priority konst_530_wire_constant) (EQ_u3_u1_531_wire)   $flowthrough 
    $delay EQ_u3_u1_531_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_533_inst] (p1_valid) (NOT_u1_u1_533_wire)   $flowthrough
    $delay NOT_u1_u1_533_inst 0
    // ((pkt_priority == 1 ) & ( ~ p1_valid ))
    &[AND_u1_u1_534_inst] (EQ_u3_u1_531_wire NOT_u1_u1_533_wire) (AND_u1_u1_534_wire)   $flowthrough 
    $delay AND_u1_u1_534_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_536_inst] (p2_valid) (NOT_u1_u1_536_wire)   $flowthrough
    $delay NOT_u1_u1_536_inst 0
    // (((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid ))
    &[AND_u1_u1_537_inst] (AND_u1_u1_534_wire NOT_u1_u1_536_wire) (AND_u1_u1_537_wire)   $flowthrough 
    $delay AND_u1_u1_537_inst 0
    // (pkt_priority == 2 )
    ==[EQ_u3_u1_540_inst] (pkt_priority konst_539_wire_constant) (EQ_u3_u1_540_wire)   $flowthrough 
    $delay EQ_u3_u1_540_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_542_inst] (p2_valid) (NOT_u1_u1_542_wire)   $flowthrough
    $delay NOT_u1_u1_542_inst 0
    // ((pkt_priority == 2 ) & ( ~ p2_valid ))
    &[AND_u1_u1_543_inst] (EQ_u3_u1_540_wire NOT_u1_u1_542_wire) (AND_u1_u1_543_wire)   $flowthrough 
    $delay AND_u1_u1_543_inst 0
    // ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid )))
    |[OR_u1_u1_544_inst] (AND_u1_u1_537_wire AND_u1_u1_543_wire) (OR_u1_u1_544_wire)   $flowthrough 
    $delay OR_u1_u1_544_inst 0
    // (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid ))))
    |[OR_u1_u1_545_inst] (OR_u1_u1_528_wire OR_u1_u1_544_wire) (OR_u1_u1_545_wire)   $flowthrough 
    $delay OR_u1_u1_545_inst 0
    // ((d0 & p3_valid) & (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid )))))
    &[AND_u1_u1_546_inst] (AND_u1_u1_516_wire OR_u1_u1_545_wire) (select_3_547)   
    $buffering  $out AND_u1_u1_546_inst select_3_547 1
    $delay AND_u1_u1_546_inst 1
    // 	select_4 := ((d0 & p4_valid) & (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 211
    // (d0 & p4_valid)
    &[AND_u1_u1_551_inst] (d0_442 p4_valid) (AND_u1_u1_551_wire)   $flowthrough 
    $delay AND_u1_u1_551_inst 0
    // (pkt_priority == 4 )
    ==[EQ_u3_u1_554_inst] (pkt_priority konst_553_wire_constant) (EQ_u3_u1_554_wire)   $flowthrough 
    $delay EQ_u3_u1_554_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_556_inst] (p1_valid) (NOT_u1_u1_556_wire)   $flowthrough
    $delay NOT_u1_u1_556_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_558_inst] (p2_valid) (NOT_u1_u1_558_wire)   $flowthrough
    $delay NOT_u1_u1_558_inst 0
    // (( ~ p1_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_559_inst] (NOT_u1_u1_556_wire NOT_u1_u1_558_wire) (AND_u1_u1_559_wire)   $flowthrough 
    $delay AND_u1_u1_559_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_561_inst] (p3_valid) (NOT_u1_u1_561_wire)   $flowthrough
    $delay NOT_u1_u1_561_inst 0
    // ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_562_inst] (AND_u1_u1_559_wire NOT_u1_u1_561_wire) (AND_u1_u1_562_wire)   $flowthrough 
    $delay AND_u1_u1_562_inst 0
    // ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_563_inst] (EQ_u3_u1_554_wire AND_u1_u1_562_wire) (OR_u1_u1_563_wire)   $flowthrough 
    $delay OR_u1_u1_563_inst 0
    // (pkt_priority == 2 )
    ==[EQ_u3_u1_566_inst] (pkt_priority konst_565_wire_constant) (EQ_u3_u1_566_wire)   $flowthrough 
    $delay EQ_u3_u1_566_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_568_inst] (p2_valid) (NOT_u1_u1_568_wire)   $flowthrough
    $delay NOT_u1_u1_568_inst 0
    // ((pkt_priority == 2 ) & ( ~ p2_valid ))
    &[AND_u1_u1_569_inst] (EQ_u3_u1_566_wire NOT_u1_u1_568_wire) (AND_u1_u1_569_wire)   $flowthrough 
    $delay AND_u1_u1_569_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_571_inst] (p3_valid) (NOT_u1_u1_571_wire)   $flowthrough
    $delay NOT_u1_u1_571_inst 0
    // (((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_572_inst] (AND_u1_u1_569_wire NOT_u1_u1_571_wire) (AND_u1_u1_572_wire)   $flowthrough 
    $delay AND_u1_u1_572_inst 0
    // (pkt_priority == 3 )
    ==[EQ_u3_u1_575_inst] (pkt_priority konst_574_wire_constant) (EQ_u3_u1_575_wire)   $flowthrough 
    $delay EQ_u3_u1_575_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_577_inst] (p3_valid) (NOT_u1_u1_577_wire)   $flowthrough
    $delay NOT_u1_u1_577_inst 0
    // ((pkt_priority == 3 ) & ( ~ p3_valid ))
    &[AND_u1_u1_578_inst] (EQ_u3_u1_575_wire NOT_u1_u1_577_wire) (AND_u1_u1_578_wire)   $flowthrough 
    $delay AND_u1_u1_578_inst 0
    // ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid )))
    |[OR_u1_u1_579_inst] (AND_u1_u1_572_wire AND_u1_u1_578_wire) (OR_u1_u1_579_wire)   $flowthrough 
    $delay OR_u1_u1_579_inst 0
    // (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid ))))
    |[OR_u1_u1_580_inst] (OR_u1_u1_563_wire OR_u1_u1_579_wire) (OR_u1_u1_580_wire)   $flowthrough 
    $delay OR_u1_u1_580_inst 0
    // ((d0 & p4_valid) & (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid )))))
    &[AND_u1_u1_581_inst] (AND_u1_u1_551_wire OR_u1_u1_580_wire) (select_4_582)   
    $buffering  $out AND_u1_u1_581_inst select_4_582 1
    $delay AND_u1_u1_581_inst 1
    // 	next_active_packet := (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 212
    // ( ~ d0 )
    ~ [NOT_u1_u1_585_inst] (d0_442) (NOT_u1_u1_585_wire)   $flowthrough
    $delay NOT_u1_u1_585_inst 0
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    ? [MUX_588_inst] (NOT_u1_u1_585_wire active_packet konst_587_wire_constant) (MUX_588_wire)  $flowthrough
    // ( $mux select_1 1   _b0  ) 
    ? [MUX_592_inst] (select_1_477 konst_590_wire_constant konst_591_wire_constant) (MUX_592_wire)  $flowthrough
    // (( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) )
    |[OR_u3_u3_593_inst] (MUX_588_wire MUX_592_wire) (OR_u3_u3_593_wire)   $flowthrough 
    $delay OR_u3_u3_593_inst 0
    // ( $mux select_2 2   _b0  ) 
    ? [MUX_597_inst] (select_2_512 konst_595_wire_constant konst_596_wire_constant) (MUX_597_wire)  $flowthrough
    // ((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) )
    |[OR_u3_u3_598_inst] (OR_u3_u3_593_wire MUX_597_wire) (OR_u3_u3_598_wire)   $flowthrough 
    $delay OR_u3_u3_598_inst 0
    // ( $mux select_3 3   _b0  ) 
    ? [MUX_602_inst] (select_3_547 konst_600_wire_constant konst_601_wire_constant) (MUX_602_wire)  $flowthrough
    // ( $mux select_4 4   _b0  ) 
    ? [MUX_606_inst] (select_4_582 konst_604_wire_constant konst_605_wire_constant) (MUX_606_wire)  $flowthrough
    // (( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) )
    |[OR_u3_u3_607_inst] (MUX_602_wire MUX_606_wire) (OR_u3_u3_607_wire)   $flowthrough 
    $delay OR_u3_u3_607_inst 0
    // ( ~ select_1 )
    ~ [NOT_u1_u1_609_inst] (select_1_477) (NOT_u1_u1_609_wire)   $flowthrough
    $delay NOT_u1_u1_609_inst 0
    // ( ~ select_2 )
    ~ [NOT_u1_u1_611_inst] (select_2_512) (NOT_u1_u1_611_wire)   $flowthrough
    $delay NOT_u1_u1_611_inst 0
    // (( ~ select_1 ) & ( ~ select_2 ))
    &[AND_u1_u1_612_inst] (NOT_u1_u1_609_wire NOT_u1_u1_611_wire) (AND_u1_u1_612_wire)   $flowthrough 
    $delay AND_u1_u1_612_inst 0
    // ( ~ select_3 )
    ~ [NOT_u1_u1_614_inst] (select_3_547) (NOT_u1_u1_614_wire)   $flowthrough
    $delay NOT_u1_u1_614_inst 0
    // ( ~ select_4 )
    ~ [NOT_u1_u1_616_inst] (select_4_582) (NOT_u1_u1_616_wire)   $flowthrough
    $delay NOT_u1_u1_616_inst 0
    // (( ~ select_3 ) & ( ~ select_4 ))
    &[AND_u1_u1_617_inst] (NOT_u1_u1_614_wire NOT_u1_u1_616_wire) (AND_u1_u1_617_wire)   $flowthrough 
    $delay AND_u1_u1_617_inst 0
    // ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 )))
    &[AND_u1_u1_618_inst] (AND_u1_u1_612_wire AND_u1_u1_617_wire) (AND_u1_u1_618_wire)   $flowthrough 
    $delay AND_u1_u1_618_inst 0
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    ? [MUX_621_inst] (AND_u1_u1_618_wire active_packet konst_620_wire_constant) (MUX_621_wire)  $flowthrough
    // ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )
    |[OR_u3_u3_622_inst] (OR_u3_u3_607_wire MUX_621_wire) (OR_u3_u3_622_wire)   $flowthrough 
    $delay OR_u3_u3_622_inst 0
    // (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) ))
    |[OR_u3_u3_623_inst] (OR_u3_u3_598_wire OR_u3_u3_622_wire) (next_active_packet)   
    $buffering  $out OR_u3_u3_623_inst next_active_packet 1
    $delay OR_u3_u3_623_inst 1
    // 	next_pkt_priority := (((( $mux ( ~ d0 ) pkt_priority  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) ) | (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 213
    // ( ~ d0 )
    ~ [NOT_u1_u1_627_inst] (d0_442) (NOT_u1_u1_627_wire)   $flowthrough
    $delay NOT_u1_u1_627_inst 0
    // ( $mux ( ~ d0 ) pkt_priority  _b0  ) 
    ? [MUX_630_inst] (NOT_u1_u1_627_wire pkt_priority konst_629_wire_constant) (MUX_630_wire)  $flowthrough
    // ( $mux select_1 2   _b0  ) 
    ? [MUX_634_inst] (select_1_477 konst_632_wire_constant konst_633_wire_constant) (MUX_634_wire)  $flowthrough
    // (( $mux ( ~ d0 ) pkt_priority  _b0  )  | ( $mux select_1 2   _b0  ) )
    |[OR_u3_u3_635_inst] (MUX_630_wire MUX_634_wire) (OR_u3_u3_635_wire)   $flowthrough 
    $delay OR_u3_u3_635_inst 0
    // ( $mux select_2 3   _b0  ) 
    ? [MUX_639_inst] (select_2_512 konst_637_wire_constant konst_638_wire_constant) (MUX_639_wire)  $flowthrough
    // ((( $mux ( ~ d0 ) pkt_priority  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) )
    |[OR_u3_u3_640_inst] (OR_u3_u3_635_wire MUX_639_wire) (OR_u3_u3_640_wire)   $flowthrough 
    $delay OR_u3_u3_640_inst 0
    // ( $mux select_3 4   _b0  ) 
    ? [MUX_644_inst] (select_3_547 konst_642_wire_constant konst_643_wire_constant) (MUX_644_wire)  $flowthrough
    // ( $mux select_4 1   _b0  ) 
    ? [MUX_648_inst] (select_4_582 konst_646_wire_constant konst_647_wire_constant) (MUX_648_wire)  $flowthrough
    // (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) )
    |[OR_u3_u3_649_inst] (MUX_644_wire MUX_648_wire) (OR_u3_u3_649_wire)   $flowthrough 
    $delay OR_u3_u3_649_inst 0
    // (((( $mux ( ~ d0 ) pkt_priority  _b0  )  | ( $mux select_1 2   _b0  ) ) | ( $mux select_2 3   _b0  ) ) | (( $mux select_3 4   _b0  )  | ( $mux select_4 1   _b0  ) ))
    |[OR_u3_u3_650_inst] (OR_u3_u3_640_wire OR_u3_u3_649_wire) (next_pkt_priority)   
    $buffering  $out OR_u3_u3_650_inst next_pkt_priority 1
    $delay OR_u3_u3_650_inst 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [outputPort_1_Daemon] 
{
  // pipe-declarations for block %outputPort_1_Daemon
  //  file .Aa/switch2x2.opt.aa, line 215
  // pipe-declarations for block %outputPort_1_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 220
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_654] // Branch Block  file .Aa/switch2x2.opt.aa, line 220
    {
      $P [branch_block_stmt_654__entry__]
      branch_block_stmt_654__entry__ <-| ($entry)
      $P [branch_block_stmt_654__exit__]
      branch_block_stmt_654__exit__ |-> ($exit)
      $P [do_while_stmt_655__entry__] 
      $P [do_while_stmt_655__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 222
      <o> [do_while_stmt_655]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_655__entry__] 
        $P[do_while_stmt_655__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_655_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_657
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_657_sample_start_] 
          $T[phi_stmt_657_sample_completed_] 
          $T[phi_stmt_657_update_start_] 
          $T[phi_stmt_657_update_completed_] 
          $T[phi_stmt_657_sample_start__ps] 
          phi_stmt_657_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_657_sample_completed__ps] 
          phi_stmt_657_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_657_update_start__ps] 
          phi_stmt_657_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_657_update_completed__ps] 
          phi_stmt_657_update_completed_ <-& (phi_stmt_657_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_657_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_657_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_657_update_start_)
          $T[phi_stmt_657_loopback_trigger] 
          phi_stmt_657_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_657_loopback_sample_req] 
          $T[phi_stmt_657_loopback_sample_req_ps] 
          phi_stmt_657_loopback_sample_req <-& (phi_stmt_657_loopback_sample_req_ps)
          phi_stmt_657_loopback_sample_req &-> ($null)
          $T[phi_stmt_657_entry_trigger] 
          phi_stmt_657_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_657_entry_sample_req] 
          $T[phi_stmt_657_entry_sample_req_ps] 
          phi_stmt_657_entry_sample_req <-& (phi_stmt_657_entry_sample_req_ps)
          phi_stmt_657_entry_sample_req &-> ($null)
          phi_stmt_657_update_start_ o<-& (phi_stmt_657_update_completed_ 0)
          phi_stmt_657_sample_start_ o<-& (phi_stmt_657_sample_completed_ 1)
          $T[phi_stmt_657_merged_reqs] 
          $T[phi_stmt_657_phi_mux_ack] 
          $T[phi_stmt_657_phi_mux_ack_ps] 
          phi_stmt_657_phi_mux_ack_ps <-& (phi_stmt_657_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_657_update_completed_)
          $T[R_ZERO_8_659_sample_start__ps] 
          $T[R_ZERO_8_659_sample_completed__ps] 
          $T[R_ZERO_8_659_update_start__ps] 
          $T[R_ZERO_8_659_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_659_sample_start_] 
          $T[R_ZERO_8_659_sample_completed_] 
          R_ZERO_8_659_sample_completed_ <-& (R_ZERO_8_659_sample_start_)
          $T[R_ZERO_8_659_update_start_] 
          $T [R_ZERO_8_659_update_completed_] $delay 
          R_ZERO_8_659_update_completed_ <-& (R_ZERO_8_659_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_659_sample_start_ <-& (R_ZERO_8_659_sample_start__ps)
          R_ZERO_8_659_update_start_ <-& (R_ZERO_8_659_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_659_sample_completed__ps <-& (R_ZERO_8_659_sample_completed_)
          R_ZERO_8_659_update_completed__ps <-& (R_ZERO_8_659_update_completed_)
          $T[R_next_down_counter_660_sample_start__ps] 
          $T[R_next_down_counter_660_sample_completed__ps] 
          $T[R_next_down_counter_660_update_start__ps] 
          $T[R_next_down_counter_660_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_660_sample_start_] 
          $T[R_next_down_counter_660_sample_completed_] 
          $T[R_next_down_counter_660_update_start_] 
          $T[R_next_down_counter_660_update_completed_] 
          ;;[R_next_down_counter_660_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_660_sample_start_ &-> (R_next_down_counter_660_Sample)
          R_next_down_counter_660_sample_completed_ <-& (R_next_down_counter_660_Sample)
          ;;[R_next_down_counter_660_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_660_update_start_ &-> (R_next_down_counter_660_Update)
          R_next_down_counter_660_update_completed_ <-& (R_next_down_counter_660_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_660_sample_start_ <-& (R_next_down_counter_660_sample_start__ps)
          R_next_down_counter_660_update_start_ <-& (R_next_down_counter_660_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_660_sample_completed__ps <-& (R_next_down_counter_660_sample_completed_)
          R_next_down_counter_660_update_completed__ps <-& (R_next_down_counter_660_update_completed_)
          $phisequencer [ phi_stmt_657_phi_seq] : 
          phi_stmt_657_entry_trigger R_ZERO_8_659_sample_start__ps R_ZERO_8_659_sample_completed__ps R_ZERO_8_659_update_start__ps R_ZERO_8_659_update_completed__ps phi_stmt_657_loopback_trigger R_next_down_counter_660_sample_start__ps R_next_down_counter_660_sample_completed__ps R_next_down_counter_660_update_start__ps R_next_down_counter_660_update_completed__ps :
          phi_stmt_657_sample_start__ps phi_stmt_657_sample_completed__ps phi_stmt_657_update_start__ps phi_stmt_657_update_completed__ps :
          phi_stmt_657_entry_sample_req_ps phi_stmt_657_loopback_sample_req_ps : 
          phi_stmt_657_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_657
          // start:  PHI statement phi_stmt_661
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_661_sample_start_] 
          $T[phi_stmt_661_sample_completed_] 
          $T[phi_stmt_661_update_start_] 
          $T[phi_stmt_661_update_completed_] 
          $T[phi_stmt_661_sample_start__ps] 
          phi_stmt_661_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_661_sample_completed__ps] 
          phi_stmt_661_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_661_update_start__ps] 
          phi_stmt_661_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_661_update_completed__ps] 
          phi_stmt_661_update_completed_ <-& (phi_stmt_661_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_661_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_661_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_661_update_start_)
          $T[phi_stmt_661_loopback_trigger] 
          phi_stmt_661_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_661_loopback_sample_req] 
          $T[phi_stmt_661_loopback_sample_req_ps] 
          phi_stmt_661_loopback_sample_req <-& (phi_stmt_661_loopback_sample_req_ps)
          phi_stmt_661_loopback_sample_req &-> ($null)
          $T[phi_stmt_661_entry_trigger] 
          phi_stmt_661_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_661_entry_sample_req] 
          $T[phi_stmt_661_entry_sample_req_ps] 
          phi_stmt_661_entry_sample_req <-& (phi_stmt_661_entry_sample_req_ps)
          phi_stmt_661_entry_sample_req &-> ($null)
          phi_stmt_661_update_start_ o<-& (phi_stmt_661_update_completed_ 0)
          phi_stmt_661_sample_start_ o<-& (phi_stmt_661_sample_completed_ 1)
          $T[phi_stmt_661_merged_reqs] 
          $T[phi_stmt_661_phi_mux_ack] 
          $T[phi_stmt_661_phi_mux_ack_ps] 
          phi_stmt_661_phi_mux_ack_ps <-& (phi_stmt_661_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_661_update_completed_)
          $T[R_ZERO_33_663_sample_start__ps] 
          $T[R_ZERO_33_663_sample_completed__ps] 
          $T[R_ZERO_33_663_update_start__ps] 
          $T[R_ZERO_33_663_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_663_sample_start_] 
          $T[R_ZERO_33_663_sample_completed_] 
          R_ZERO_33_663_sample_completed_ <-& (R_ZERO_33_663_sample_start_)
          $T[R_ZERO_33_663_update_start_] 
          $T [R_ZERO_33_663_update_completed_] $delay 
          R_ZERO_33_663_update_completed_ <-& (R_ZERO_33_663_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_663_sample_start_ <-& (R_ZERO_33_663_sample_start__ps)
          R_ZERO_33_663_update_start_ <-& (R_ZERO_33_663_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_663_sample_completed__ps <-& (R_ZERO_33_663_sample_completed_)
          R_ZERO_33_663_update_completed__ps <-& (R_ZERO_33_663_update_completed_)
          $T[RPIPE_noblock_obuf_1_1_665_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_665_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_1_665_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_665_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_1
          $T[RPIPE_noblock_obuf_1_1_665_sample_start_] 
          $T[RPIPE_noblock_obuf_1_1_665_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_1_665_update_start_] 
          $T[RPIPE_noblock_obuf_1_1_665_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_1_665 with guard R_read_from_1_664
          // root phi_stmt_661 not in visited_elements
          // root phi_stmt_666 not in visited_elements
          // root phi_stmt_671 not in visited_elements
          // root phi_stmt_676 not in visited_elements
          // root phi_stmt_681 not in visited_elements
          // root phi_stmt_685 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_1_665_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_1_665_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_1_665_sample_start_ &-> (RPIPE_noblock_obuf_1_1_665_Sample)
          RPIPE_noblock_obuf_1_1_665_sample_completed_ <-& (RPIPE_noblock_obuf_1_1_665_Sample)
          RPIPE_noblock_obuf_1_1_665_update_start_ <-& (RPIPE_noblock_obuf_1_1_665_sample_completed_)
          RPIPE_noblock_obuf_1_1_665_update_start_ &-> (RPIPE_noblock_obuf_1_1_665_Update)
          RPIPE_noblock_obuf_1_1_665_update_completed_ <-& (RPIPE_noblock_obuf_1_1_665_Update)
          RPIPE_noblock_obuf_1_1_665_sample_start_ o<-& (RPIPE_noblock_obuf_1_1_665_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_1_665_sample_start_ <-& (RPIPE_noblock_obuf_1_1_665_sample_start__ps)
          RPIPE_noblock_obuf_1_1_665_update_start_ <-& (RPIPE_noblock_obuf_1_1_665_update_start__ps)
          // RAW reenables for noblock_obuf_1_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_1_665_sample_completed__ps <-& (RPIPE_noblock_obuf_1_1_665_sample_completed_)
          RPIPE_noblock_obuf_1_1_665_update_completed__ps <-& (RPIPE_noblock_obuf_1_1_665_update_completed_)
          $phisequencer [ phi_stmt_661_phi_seq] : 
          phi_stmt_661_entry_trigger R_ZERO_33_663_sample_start__ps R_ZERO_33_663_sample_completed__ps R_ZERO_33_663_update_start__ps R_ZERO_33_663_update_completed__ps phi_stmt_661_loopback_trigger RPIPE_noblock_obuf_1_1_665_sample_start__ps RPIPE_noblock_obuf_1_1_665_sample_completed__ps RPIPE_noblock_obuf_1_1_665_update_start__ps RPIPE_noblock_obuf_1_1_665_update_completed__ps :
          phi_stmt_661_sample_start__ps phi_stmt_661_sample_completed__ps phi_stmt_661_update_start__ps phi_stmt_661_update_completed__ps :
          phi_stmt_661_entry_sample_req_ps phi_stmt_661_loopback_sample_req_ps : 
          phi_stmt_661_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_661
          // start:  PHI statement phi_stmt_666
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_666_sample_start_] 
          $T[phi_stmt_666_sample_completed_] 
          $T[phi_stmt_666_update_start_] 
          $T[phi_stmt_666_update_completed_] 
          $T[phi_stmt_666_sample_start__ps] 
          phi_stmt_666_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_666_sample_completed__ps] 
          phi_stmt_666_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_666_update_start__ps] 
          phi_stmt_666_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_666_update_completed__ps] 
          phi_stmt_666_update_completed_ <-& (phi_stmt_666_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_666_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_666_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_666_update_start_)
          $T[phi_stmt_666_loopback_trigger] 
          phi_stmt_666_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_666_loopback_sample_req] 
          $T[phi_stmt_666_loopback_sample_req_ps] 
          phi_stmt_666_loopback_sample_req <-& (phi_stmt_666_loopback_sample_req_ps)
          phi_stmt_666_loopback_sample_req &-> ($null)
          $T[phi_stmt_666_entry_trigger] 
          phi_stmt_666_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_666_entry_sample_req] 
          $T[phi_stmt_666_entry_sample_req_ps] 
          phi_stmt_666_entry_sample_req <-& (phi_stmt_666_entry_sample_req_ps)
          phi_stmt_666_entry_sample_req &-> ($null)
          phi_stmt_666_update_start_ o<-& (phi_stmt_666_update_completed_ 0)
          phi_stmt_666_sample_start_ o<-& (phi_stmt_666_sample_completed_ 1)
          $T[phi_stmt_666_merged_reqs] 
          $T[phi_stmt_666_phi_mux_ack] 
          $T[phi_stmt_666_phi_mux_ack_ps] 
          phi_stmt_666_phi_mux_ack_ps <-& (phi_stmt_666_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_666_update_completed_)
          $T[R_ZERO_33_668_sample_start__ps] 
          $T[R_ZERO_33_668_sample_completed__ps] 
          $T[R_ZERO_33_668_update_start__ps] 
          $T[R_ZERO_33_668_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_668_sample_start_] 
          $T[R_ZERO_33_668_sample_completed_] 
          R_ZERO_33_668_sample_completed_ <-& (R_ZERO_33_668_sample_start_)
          $T[R_ZERO_33_668_update_start_] 
          $T [R_ZERO_33_668_update_completed_] $delay 
          R_ZERO_33_668_update_completed_ <-& (R_ZERO_33_668_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_668_sample_start_ <-& (R_ZERO_33_668_sample_start__ps)
          R_ZERO_33_668_update_start_ <-& (R_ZERO_33_668_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_668_sample_completed__ps <-& (R_ZERO_33_668_sample_completed_)
          R_ZERO_33_668_update_completed__ps <-& (R_ZERO_33_668_update_completed_)
          $T[RPIPE_noblock_obuf_2_1_670_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_670_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_1_670_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_670_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_1
          $T[RPIPE_noblock_obuf_2_1_670_sample_start_] 
          $T[RPIPE_noblock_obuf_2_1_670_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_1_670_update_start_] 
          $T[RPIPE_noblock_obuf_2_1_670_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_1_670 with guard R_read_from_2_669
          // root phi_stmt_666 not in visited_elements
          // root phi_stmt_671 not in visited_elements
          // root phi_stmt_676 not in visited_elements
          // root phi_stmt_681 not in visited_elements
          // root phi_stmt_685 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_1_670_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_1_670_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_1_670_sample_start_ &-> (RPIPE_noblock_obuf_2_1_670_Sample)
          RPIPE_noblock_obuf_2_1_670_sample_completed_ <-& (RPIPE_noblock_obuf_2_1_670_Sample)
          RPIPE_noblock_obuf_2_1_670_update_start_ <-& (RPIPE_noblock_obuf_2_1_670_sample_completed_)
          RPIPE_noblock_obuf_2_1_670_update_start_ &-> (RPIPE_noblock_obuf_2_1_670_Update)
          RPIPE_noblock_obuf_2_1_670_update_completed_ <-& (RPIPE_noblock_obuf_2_1_670_Update)
          RPIPE_noblock_obuf_2_1_670_sample_start_ o<-& (RPIPE_noblock_obuf_2_1_670_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_1_670_sample_start_ <-& (RPIPE_noblock_obuf_2_1_670_sample_start__ps)
          RPIPE_noblock_obuf_2_1_670_update_start_ <-& (RPIPE_noblock_obuf_2_1_670_update_start__ps)
          // RAW reenables for noblock_obuf_2_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_1_670_sample_completed__ps <-& (RPIPE_noblock_obuf_2_1_670_sample_completed_)
          RPIPE_noblock_obuf_2_1_670_update_completed__ps <-& (RPIPE_noblock_obuf_2_1_670_update_completed_)
          $phisequencer [ phi_stmt_666_phi_seq] : 
          phi_stmt_666_entry_trigger R_ZERO_33_668_sample_start__ps R_ZERO_33_668_sample_completed__ps R_ZERO_33_668_update_start__ps R_ZERO_33_668_update_completed__ps phi_stmt_666_loopback_trigger RPIPE_noblock_obuf_2_1_670_sample_start__ps RPIPE_noblock_obuf_2_1_670_sample_completed__ps RPIPE_noblock_obuf_2_1_670_update_start__ps RPIPE_noblock_obuf_2_1_670_update_completed__ps :
          phi_stmt_666_sample_start__ps phi_stmt_666_sample_completed__ps phi_stmt_666_update_start__ps phi_stmt_666_update_completed__ps :
          phi_stmt_666_entry_sample_req_ps phi_stmt_666_loopback_sample_req_ps : 
          phi_stmt_666_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_666
          // start:  PHI statement phi_stmt_671
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_671_sample_start_] 
          $T[phi_stmt_671_sample_completed_] 
          $T[phi_stmt_671_update_start_] 
          $T[phi_stmt_671_update_completed_] 
          $T[phi_stmt_671_sample_start__ps] 
          phi_stmt_671_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_671_sample_completed__ps] 
          phi_stmt_671_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_671_update_start__ps] 
          phi_stmt_671_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_671_update_completed__ps] 
          phi_stmt_671_update_completed_ <-& (phi_stmt_671_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_671_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_671_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_671_update_start_)
          $T[phi_stmt_671_loopback_trigger] 
          phi_stmt_671_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_671_loopback_sample_req] 
          $T[phi_stmt_671_loopback_sample_req_ps] 
          phi_stmt_671_loopback_sample_req <-& (phi_stmt_671_loopback_sample_req_ps)
          phi_stmt_671_loopback_sample_req &-> ($null)
          $T[phi_stmt_671_entry_trigger] 
          phi_stmt_671_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_671_entry_sample_req] 
          $T[phi_stmt_671_entry_sample_req_ps] 
          phi_stmt_671_entry_sample_req <-& (phi_stmt_671_entry_sample_req_ps)
          phi_stmt_671_entry_sample_req &-> ($null)
          phi_stmt_671_update_start_ o<-& (phi_stmt_671_update_completed_ 0)
          phi_stmt_671_sample_start_ o<-& (phi_stmt_671_sample_completed_ 1)
          $T[phi_stmt_671_merged_reqs] 
          $T[phi_stmt_671_phi_mux_ack] 
          $T[phi_stmt_671_phi_mux_ack_ps] 
          phi_stmt_671_phi_mux_ack_ps <-& (phi_stmt_671_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_671_update_completed_)
          $T[R_ZERO_33_673_sample_start__ps] 
          $T[R_ZERO_33_673_sample_completed__ps] 
          $T[R_ZERO_33_673_update_start__ps] 
          $T[R_ZERO_33_673_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_673_sample_start_] 
          $T[R_ZERO_33_673_sample_completed_] 
          R_ZERO_33_673_sample_completed_ <-& (R_ZERO_33_673_sample_start_)
          $T[R_ZERO_33_673_update_start_] 
          $T [R_ZERO_33_673_update_completed_] $delay 
          R_ZERO_33_673_update_completed_ <-& (R_ZERO_33_673_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_673_sample_start_ <-& (R_ZERO_33_673_sample_start__ps)
          R_ZERO_33_673_update_start_ <-& (R_ZERO_33_673_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_673_sample_completed__ps <-& (R_ZERO_33_673_sample_completed_)
          R_ZERO_33_673_update_completed__ps <-& (R_ZERO_33_673_update_completed_)
          $T[RPIPE_noblock_obuf_3_1_675_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_675_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_1_675_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_675_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_1
          $T[RPIPE_noblock_obuf_3_1_675_sample_start_] 
          $T[RPIPE_noblock_obuf_3_1_675_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_1_675_update_start_] 
          $T[RPIPE_noblock_obuf_3_1_675_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_1_675 with guard R_read_from_3_674
          // root phi_stmt_671 not in visited_elements
          // root phi_stmt_676 not in visited_elements
          // root phi_stmt_681 not in visited_elements
          // root phi_stmt_685 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_1_675_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_1_675_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_1_675_sample_start_ &-> (RPIPE_noblock_obuf_3_1_675_Sample)
          RPIPE_noblock_obuf_3_1_675_sample_completed_ <-& (RPIPE_noblock_obuf_3_1_675_Sample)
          RPIPE_noblock_obuf_3_1_675_update_start_ <-& (RPIPE_noblock_obuf_3_1_675_sample_completed_)
          RPIPE_noblock_obuf_3_1_675_update_start_ &-> (RPIPE_noblock_obuf_3_1_675_Update)
          RPIPE_noblock_obuf_3_1_675_update_completed_ <-& (RPIPE_noblock_obuf_3_1_675_Update)
          RPIPE_noblock_obuf_3_1_675_sample_start_ o<-& (RPIPE_noblock_obuf_3_1_675_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_1_675_sample_start_ <-& (RPIPE_noblock_obuf_3_1_675_sample_start__ps)
          RPIPE_noblock_obuf_3_1_675_update_start_ <-& (RPIPE_noblock_obuf_3_1_675_update_start__ps)
          // RAW reenables for noblock_obuf_3_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_1_675_sample_completed__ps <-& (RPIPE_noblock_obuf_3_1_675_sample_completed_)
          RPIPE_noblock_obuf_3_1_675_update_completed__ps <-& (RPIPE_noblock_obuf_3_1_675_update_completed_)
          $phisequencer [ phi_stmt_671_phi_seq] : 
          phi_stmt_671_entry_trigger R_ZERO_33_673_sample_start__ps R_ZERO_33_673_sample_completed__ps R_ZERO_33_673_update_start__ps R_ZERO_33_673_update_completed__ps phi_stmt_671_loopback_trigger RPIPE_noblock_obuf_3_1_675_sample_start__ps RPIPE_noblock_obuf_3_1_675_sample_completed__ps RPIPE_noblock_obuf_3_1_675_update_start__ps RPIPE_noblock_obuf_3_1_675_update_completed__ps :
          phi_stmt_671_sample_start__ps phi_stmt_671_sample_completed__ps phi_stmt_671_update_start__ps phi_stmt_671_update_completed__ps :
          phi_stmt_671_entry_sample_req_ps phi_stmt_671_loopback_sample_req_ps : 
          phi_stmt_671_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_671
          // start:  PHI statement phi_stmt_676
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_676_sample_start_] 
          $T[phi_stmt_676_sample_completed_] 
          $T[phi_stmt_676_update_start_] 
          $T[phi_stmt_676_update_completed_] 
          $T[phi_stmt_676_sample_start__ps] 
          phi_stmt_676_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_676_sample_completed__ps] 
          phi_stmt_676_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_676_update_start__ps] 
          phi_stmt_676_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_676_update_completed__ps] 
          phi_stmt_676_update_completed_ <-& (phi_stmt_676_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_676_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_676_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_676_update_start_)
          $T[phi_stmt_676_loopback_trigger] 
          phi_stmt_676_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_676_loopback_sample_req] 
          $T[phi_stmt_676_loopback_sample_req_ps] 
          phi_stmt_676_loopback_sample_req <-& (phi_stmt_676_loopback_sample_req_ps)
          phi_stmt_676_loopback_sample_req &-> ($null)
          $T[phi_stmt_676_entry_trigger] 
          phi_stmt_676_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_676_entry_sample_req] 
          $T[phi_stmt_676_entry_sample_req_ps] 
          phi_stmt_676_entry_sample_req <-& (phi_stmt_676_entry_sample_req_ps)
          phi_stmt_676_entry_sample_req &-> ($null)
          phi_stmt_676_update_start_ o<-& (phi_stmt_676_update_completed_ 0)
          phi_stmt_676_sample_start_ o<-& (phi_stmt_676_sample_completed_ 1)
          $T[phi_stmt_676_merged_reqs] 
          $T[phi_stmt_676_phi_mux_ack] 
          $T[phi_stmt_676_phi_mux_ack_ps] 
          phi_stmt_676_phi_mux_ack_ps <-& (phi_stmt_676_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_676_update_completed_)
          $T[R_ZERO_33_678_sample_start__ps] 
          $T[R_ZERO_33_678_sample_completed__ps] 
          $T[R_ZERO_33_678_update_start__ps] 
          $T[R_ZERO_33_678_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_678_sample_start_] 
          $T[R_ZERO_33_678_sample_completed_] 
          R_ZERO_33_678_sample_completed_ <-& (R_ZERO_33_678_sample_start_)
          $T[R_ZERO_33_678_update_start_] 
          $T [R_ZERO_33_678_update_completed_] $delay 
          R_ZERO_33_678_update_completed_ <-& (R_ZERO_33_678_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_678_sample_start_ <-& (R_ZERO_33_678_sample_start__ps)
          R_ZERO_33_678_update_start_ <-& (R_ZERO_33_678_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_678_sample_completed__ps <-& (R_ZERO_33_678_sample_completed_)
          R_ZERO_33_678_update_completed__ps <-& (R_ZERO_33_678_update_completed_)
          $T[RPIPE_noblock_obuf_4_1_680_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_680_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_1_680_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_680_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_1
          $T[RPIPE_noblock_obuf_4_1_680_sample_start_] 
          $T[RPIPE_noblock_obuf_4_1_680_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_1_680_update_start_] 
          $T[RPIPE_noblock_obuf_4_1_680_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_1_680 with guard R_read_from_4_679
          // root phi_stmt_676 not in visited_elements
          // root phi_stmt_681 not in visited_elements
          // root phi_stmt_685 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_1_680_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_1_680_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_1_680_sample_start_ &-> (RPIPE_noblock_obuf_4_1_680_Sample)
          RPIPE_noblock_obuf_4_1_680_sample_completed_ <-& (RPIPE_noblock_obuf_4_1_680_Sample)
          RPIPE_noblock_obuf_4_1_680_update_start_ <-& (RPIPE_noblock_obuf_4_1_680_sample_completed_)
          RPIPE_noblock_obuf_4_1_680_update_start_ &-> (RPIPE_noblock_obuf_4_1_680_Update)
          RPIPE_noblock_obuf_4_1_680_update_completed_ <-& (RPIPE_noblock_obuf_4_1_680_Update)
          RPIPE_noblock_obuf_4_1_680_sample_start_ o<-& (RPIPE_noblock_obuf_4_1_680_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_1_680_sample_start_ <-& (RPIPE_noblock_obuf_4_1_680_sample_start__ps)
          RPIPE_noblock_obuf_4_1_680_update_start_ <-& (RPIPE_noblock_obuf_4_1_680_update_start__ps)
          // RAW reenables for noblock_obuf_4_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_1_680_sample_completed__ps <-& (RPIPE_noblock_obuf_4_1_680_sample_completed_)
          RPIPE_noblock_obuf_4_1_680_update_completed__ps <-& (RPIPE_noblock_obuf_4_1_680_update_completed_)
          $phisequencer [ phi_stmt_676_phi_seq] : 
          phi_stmt_676_entry_trigger R_ZERO_33_678_sample_start__ps R_ZERO_33_678_sample_completed__ps R_ZERO_33_678_update_start__ps R_ZERO_33_678_update_completed__ps phi_stmt_676_loopback_trigger RPIPE_noblock_obuf_4_1_680_sample_start__ps RPIPE_noblock_obuf_4_1_680_sample_completed__ps RPIPE_noblock_obuf_4_1_680_update_start__ps RPIPE_noblock_obuf_4_1_680_update_completed__ps :
          phi_stmt_676_sample_start__ps phi_stmt_676_sample_completed__ps phi_stmt_676_update_start__ps phi_stmt_676_update_completed__ps :
          phi_stmt_676_entry_sample_req_ps phi_stmt_676_loopback_sample_req_ps : 
          phi_stmt_676_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_676
          // start:  PHI statement phi_stmt_681
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_681_sample_start_] 
          $T[phi_stmt_681_sample_completed_] 
          $T[phi_stmt_681_update_start_] 
          $T[phi_stmt_681_update_completed_] 
          $T[phi_stmt_681_sample_start__ps] 
          phi_stmt_681_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_681_sample_completed__ps] 
          phi_stmt_681_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_681_update_start__ps] 
          phi_stmt_681_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_681_update_completed__ps] 
          phi_stmt_681_update_completed_ <-& (phi_stmt_681_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_681_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_681_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_681_update_start_)
          $T[phi_stmt_681_loopback_trigger] 
          phi_stmt_681_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_681_loopback_sample_req] 
          $T[phi_stmt_681_loopback_sample_req_ps] 
          phi_stmt_681_loopback_sample_req <-& (phi_stmt_681_loopback_sample_req_ps)
          phi_stmt_681_loopback_sample_req &-> ($null)
          $T[phi_stmt_681_entry_trigger] 
          phi_stmt_681_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_681_entry_sample_req] 
          $T[phi_stmt_681_entry_sample_req_ps] 
          phi_stmt_681_entry_sample_req <-& (phi_stmt_681_entry_sample_req_ps)
          phi_stmt_681_entry_sample_req &-> ($null)
          phi_stmt_681_update_start_ o<-& (phi_stmt_681_update_completed_ 0)
          phi_stmt_681_sample_start_ o<-& (phi_stmt_681_sample_completed_ 1)
          $T[phi_stmt_681_merged_reqs] 
          $T[phi_stmt_681_phi_mux_ack] 
          $T[phi_stmt_681_phi_mux_ack_ps] 
          phi_stmt_681_phi_mux_ack_ps <-& (phi_stmt_681_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_681_update_completed_)
          $T[R_ZERO_3_683_sample_start__ps] 
          $T[R_ZERO_3_683_sample_completed__ps] 
          $T[R_ZERO_3_683_update_start__ps] 
          $T[R_ZERO_3_683_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_683_sample_start_] 
          $T[R_ZERO_3_683_sample_completed_] 
          R_ZERO_3_683_sample_completed_ <-& (R_ZERO_3_683_sample_start_)
          $T[R_ZERO_3_683_update_start_] 
          $T [R_ZERO_3_683_update_completed_] $delay 
          R_ZERO_3_683_update_completed_ <-& (R_ZERO_3_683_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_683_sample_start_ <-& (R_ZERO_3_683_sample_start__ps)
          R_ZERO_3_683_update_start_ <-& (R_ZERO_3_683_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_683_sample_completed__ps <-& (R_ZERO_3_683_sample_completed_)
          R_ZERO_3_683_update_completed__ps <-& (R_ZERO_3_683_update_completed_)
          $T[R_next_active_packet_684_sample_start__ps] 
          $T[R_next_active_packet_684_sample_completed__ps] 
          $T[R_next_active_packet_684_update_start__ps] 
          $T[R_next_active_packet_684_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_684_sample_start_] 
          $T[R_next_active_packet_684_sample_completed_] 
          $T[R_next_active_packet_684_update_start_] 
          $T[R_next_active_packet_684_update_completed_] 
          ;;[R_next_active_packet_684_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_684_sample_start_ &-> (R_next_active_packet_684_Sample)
          R_next_active_packet_684_sample_completed_ <-& (R_next_active_packet_684_Sample)
          ;;[R_next_active_packet_684_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_684_update_start_ &-> (R_next_active_packet_684_Update)
          R_next_active_packet_684_update_completed_ <-& (R_next_active_packet_684_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_684_sample_start_ <-& (R_next_active_packet_684_sample_start__ps)
          R_next_active_packet_684_update_start_ <-& (R_next_active_packet_684_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_684_sample_completed__ps <-& (R_next_active_packet_684_sample_completed_)
          R_next_active_packet_684_update_completed__ps <-& (R_next_active_packet_684_update_completed_)
          $phisequencer [ phi_stmt_681_phi_seq] : 
          phi_stmt_681_entry_trigger R_ZERO_3_683_sample_start__ps R_ZERO_3_683_sample_completed__ps R_ZERO_3_683_update_start__ps R_ZERO_3_683_update_completed__ps phi_stmt_681_loopback_trigger R_next_active_packet_684_sample_start__ps R_next_active_packet_684_sample_completed__ps R_next_active_packet_684_update_start__ps R_next_active_packet_684_update_completed__ps :
          phi_stmt_681_sample_start__ps phi_stmt_681_sample_completed__ps phi_stmt_681_update_start__ps phi_stmt_681_update_completed__ps :
          phi_stmt_681_entry_sample_req_ps phi_stmt_681_loopback_sample_req_ps : 
          phi_stmt_681_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_681
          // start:  PHI statement phi_stmt_685
          // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_685_sample_start_] 
          $T[phi_stmt_685_sample_completed_] 
          $T[phi_stmt_685_update_start_] 
          $T[phi_stmt_685_update_completed_] 
          $T[phi_stmt_685_sample_start__ps] 
          phi_stmt_685_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_685_sample_completed__ps] 
          phi_stmt_685_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_685_update_start__ps] 
          phi_stmt_685_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_685_update_completed__ps] 
          phi_stmt_685_update_completed_ <-& (phi_stmt_685_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_685_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_685_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_685_update_start_)
          $T[phi_stmt_685_loopback_trigger] 
          phi_stmt_685_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_685_loopback_sample_req] 
          $T[phi_stmt_685_loopback_sample_req_ps] 
          phi_stmt_685_loopback_sample_req <-& (phi_stmt_685_loopback_sample_req_ps)
          phi_stmt_685_loopback_sample_req &-> ($null)
          $T[phi_stmt_685_entry_trigger] 
          phi_stmt_685_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_685_entry_sample_req] 
          $T[phi_stmt_685_entry_sample_req_ps] 
          phi_stmt_685_entry_sample_req <-& (phi_stmt_685_entry_sample_req_ps)
          phi_stmt_685_entry_sample_req &-> ($null)
          phi_stmt_685_update_start_ o<-& (phi_stmt_685_update_completed_ 0)
          phi_stmt_685_sample_start_ o<-& (phi_stmt_685_sample_completed_ 1)
          $T[phi_stmt_685_merged_reqs] 
          $T[phi_stmt_685_phi_mux_ack] 
          $T[phi_stmt_685_phi_mux_ack_ps] 
          phi_stmt_685_phi_mux_ack_ps <-& (phi_stmt_685_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_685_update_completed_)
          $T[R_ZERO_3_687_sample_start__ps] 
          $T[R_ZERO_3_687_sample_completed__ps] 
          $T[R_ZERO_3_687_update_start__ps] 
          $T[R_ZERO_3_687_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_687_sample_start_] 
          $T[R_ZERO_3_687_sample_completed_] 
          R_ZERO_3_687_sample_completed_ <-& (R_ZERO_3_687_sample_start_)
          $T[R_ZERO_3_687_update_start_] 
          $T [R_ZERO_3_687_update_completed_] $delay 
          R_ZERO_3_687_update_completed_ <-& (R_ZERO_3_687_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_687_sample_start_ <-& (R_ZERO_3_687_sample_start__ps)
          R_ZERO_3_687_update_start_ <-& (R_ZERO_3_687_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_687_sample_completed__ps <-& (R_ZERO_3_687_sample_completed_)
          R_ZERO_3_687_update_completed__ps <-& (R_ZERO_3_687_update_completed_)
          $T[R_next_pkt_priority_688_sample_start__ps] 
          $T[R_next_pkt_priority_688_sample_completed__ps] 
          $T[R_next_pkt_priority_688_update_start__ps] 
          $T[R_next_pkt_priority_688_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_688_sample_start_] 
          $T[R_next_pkt_priority_688_sample_completed_] 
          $T[R_next_pkt_priority_688_update_start_] 
          $T[R_next_pkt_priority_688_update_completed_] 
          ;;[R_next_pkt_priority_688_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_688_sample_start_ &-> (R_next_pkt_priority_688_Sample)
          R_next_pkt_priority_688_sample_completed_ <-& (R_next_pkt_priority_688_Sample)
          ;;[R_next_pkt_priority_688_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_688_update_start_ &-> (R_next_pkt_priority_688_Update)
          R_next_pkt_priority_688_update_completed_ <-& (R_next_pkt_priority_688_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_688_sample_start_ <-& (R_next_pkt_priority_688_sample_start__ps)
          R_next_pkt_priority_688_update_start_ <-& (R_next_pkt_priority_688_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_688_sample_completed__ps <-& (R_next_pkt_priority_688_sample_completed_)
          R_next_pkt_priority_688_update_completed__ps <-& (R_next_pkt_priority_688_update_completed_)
          $phisequencer [ phi_stmt_685_phi_seq] : 
          phi_stmt_685_entry_trigger R_ZERO_3_687_sample_start__ps R_ZERO_3_687_sample_completed__ps R_ZERO_3_687_update_start__ps R_ZERO_3_687_update_completed__ps phi_stmt_685_loopback_trigger R_next_pkt_priority_688_sample_start__ps R_next_pkt_priority_688_sample_completed__ps R_next_pkt_priority_688_update_start__ps R_next_pkt_priority_688_update_completed__ps :
          phi_stmt_685_sample_start__ps phi_stmt_685_sample_completed__ps phi_stmt_685_update_start__ps phi_stmt_685_update_completed__ps :
          phi_stmt_685_entry_sample_req_ps phi_stmt_685_loopback_sample_req_ps : 
          phi_stmt_685_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_685
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 240
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 241
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 242
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 243
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 244
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 245
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 246
          // volatile! 
          // Source expression
          // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
          // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
          // (p1_valid | p2_valid)
          // p1_valid
          // p2_valid
          // (p3_valid | p4_valid)
          // p3_valid
          // p4_valid
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 247
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 248
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 249
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 250
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 251
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 252
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 253
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 254
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_1
          $T[WPIPE_out_data_1_868_sample_start_] 
          $T[WPIPE_out_data_1_868_sample_completed_] 
          $T[WPIPE_out_data_1_868_update_start_] 
          $T[WPIPE_out_data_1_868_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_1_868 with guard R_send_flag_867
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_657_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_661_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_666_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_671_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_676_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_681_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_685_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_657_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_661_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_666_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_671_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_676_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_681_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_685_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          ;;[WPIPE_out_data_1_868_Sample] 
          {
            // pipe write sample-start out_data_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_1_868_Update] 
          {
            // pipe write update (complete) out_data_1
            $T [req] $T [ack] 
          }
          WPIPE_out_data_1_868_sample_start_ &-> (WPIPE_out_data_1_868_Sample)
          WPIPE_out_data_1_868_sample_completed_ <-& (WPIPE_out_data_1_868_Sample)
          WPIPE_out_data_1_868_update_start_ <-& (WPIPE_out_data_1_868_sample_completed_)
          WPIPE_out_data_1_868_update_start_ &-> (WPIPE_out_data_1_868_Update)
          WPIPE_out_data_1_868_update_completed_ <-& (WPIPE_out_data_1_868_Update)
          WPIPE_out_data_1_868_sample_start_ o<-& (WPIPE_out_data_1_868_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_1_868_sample_start_
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_657_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_661_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_666_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_671_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_676_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_681_update_completed_)
          WPIPE_out_data_1_868_sample_start_ <-& (phi_stmt_685_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_1_868_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_657_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_661_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_666_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_671_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_676_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_681_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          phi_stmt_685_update_start_ o<-& (WPIPE_out_data_1_868_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe out_data_1
          // read-dependencies for pipe out_data_1
          // write-dependencies for pipe out_data_1
          // signal write dependencies for out_data_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_655__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_655_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_655__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_655_loop_body : condition_evaluated
        $bind do_while_stmt_655__entry__  => do_while_stmt_655_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_655_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_655__exit__)
      }
      do_while_stmt_655__entry__ |-> (do_while_stmt_655)
      do_while_stmt_655__exit__ <-| (do_while_stmt_655)
      do_while_stmt_655__entry__ <-| (branch_block_stmt_654__entry__)
      do_while_stmt_655__exit__ |-> (branch_block_stmt_654__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 224
    // constant-object-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // constant-object-declarations for block %outputPort_1_Daemon
    //  file .Aa/switch2x2.opt.aa, line 215
    // constant-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 222
    // 1 
    $constant $W[konst_872_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 224
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    // ZERO_8
    $constant $W[R_ZERO_8_659_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // ZERO_33
    $constant $W[R_ZERO_33_663_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // ZERO_33
    $constant $W[R_ZERO_33_668_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // ZERO_33
    $constant $W[R_ZERO_33_673_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // ZERO_33
    $constant $W[R_ZERO_33_678_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    // ZERO_3
    $constant $W[R_ZERO_3_683_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    // ZERO_3
    $constant $W[R_ZERO_3_687_wire_constant] : $int<3> := _b000// 0
    // 32 
    $constant $W[konst_692_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_697_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_702_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_707_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_712_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_715_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_718_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_721_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_725_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_728_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_731_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_734_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    // 0 
    $constant $W[konst_758_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_764_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_767_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_777_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_785_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_793_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_801_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_807_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_811_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_814_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_818_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_822_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_826_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_829_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_833_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_840_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_843_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_846_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_849_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_853_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_856_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_859_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_862_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 222
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 224
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    $W[next_down_counter_772_660_buffered] : $int<8>
    // down_counter
    $W[down_counter_657] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // noblock_obuf_1_1
    $W[RPIPE_noblock_obuf_1_1_665_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_661] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // noblock_obuf_2_1
    $W[RPIPE_noblock_obuf_2_1_670_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_666] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // noblock_obuf_3_1
    $W[RPIPE_noblock_obuf_3_1_675_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_671] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // noblock_obuf_4_1
    $W[RPIPE_noblock_obuf_4_1_680_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_676] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    $W[next_active_packet_748_684_buffered] : $int<3>
    // active_packet
    $W[active_packet_681] : $int<3>
    // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    $W[next_pkt_priority_748_688_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_685] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 240
    // p1_valid
    $W[p1_valid_694] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 241
    // p2_valid
    $W[p2_valid_699] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 242
    // p3_valid
    $W[p3_valid_704] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 243
    // p4_valid
    $W[p4_valid_709] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 244
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_713_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_716_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_719_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_722_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_723_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_726_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_729_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_732_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_735_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_736_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_738] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    // next_active_packet
    $W[next_active_packet_748] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_748] : $int<3>
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 246
    // (p1_valid | p2_valid)
    $intermediate $W[OR_u1_u1_752_wire] : $int<1>
    // (p3_valid | p4_valid)
    $intermediate $W[OR_u1_u1_755_wire] : $int<1>
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    $intermediate $W[OR_u1_u1_756_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_759_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_761] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 247
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_768_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_770_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_772] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 248
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_775_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_778_wire] : $int<1>
    // read_from_1
    $W[read_from_1_780] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 249
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_783_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_786_wire] : $int<1>
    // read_from_2
    $W[read_from_2_788] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 250
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_791_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_794_wire] : $int<1>
    // read_from_3
    $W[read_from_3_796] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 251
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_799_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_802_wire] : $int<1>
    // read_from_4
    $W[read_from_4_804] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 252
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_808_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_810_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_812_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_815_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_817_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_819_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_820_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_823_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_825_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_827_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_830_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_832_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_834_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_835_wire] : $int<32>
    // data_to_out
    $W[data_to_out_837] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 253
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_841_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_844_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_847_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_850_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_851_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_854_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_857_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_860_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_863_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_864_wire] : $int<1>
    // send_flag
    $W[send_flag_866] : $int<1>
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 254
    // out_data_1
    // datapath-instances for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 222
    ==0? [do_while_stmt_655_branch] (konst_872_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 224
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    # := [next_down_counter_772_660_buf] (next_down_counter_772) (next_down_counter_772_660_buffered)     $fullrate
    $buffering $out next_down_counter_772_660_buf next_down_counter_772_660_buffered  1
    # $phi [phi_stmt_657] (R_ZERO_8_659_wire_constant next_down_counter_772_660_buffered) ( down_counter_657 ) $fullrate
    // $buffering  $out phi_stmt_657 down_counter_657 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // noblock_obuf_1_1
    $ioport $in [RPIPE_noblock_obuf_1_1_665_inst] (noblock_obuf_1_1) (RPIPE_noblock_obuf_1_1_665_wire) $guard ( read_from_1_780 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_1_665_inst RPIPE_noblock_obuf_1_1_665_wire 1
    # $phi [phi_stmt_661] (R_ZERO_33_663_wire_constant RPIPE_noblock_obuf_1_1_665_wire) ( pkt_1_e_word_661 ) $fullrate
    // $buffering  $out phi_stmt_661 pkt_1_e_word_661 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // noblock_obuf_2_1
    $ioport $in [RPIPE_noblock_obuf_2_1_670_inst] (noblock_obuf_2_1) (RPIPE_noblock_obuf_2_1_670_wire) $guard ( read_from_2_788 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_1_670_inst RPIPE_noblock_obuf_2_1_670_wire 1
    # $phi [phi_stmt_666] (R_ZERO_33_668_wire_constant RPIPE_noblock_obuf_2_1_670_wire) ( pkt_2_e_word_666 ) $fullrate
    // $buffering  $out phi_stmt_666 pkt_2_e_word_666 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // noblock_obuf_3_1
    $ioport $in [RPIPE_noblock_obuf_3_1_675_inst] (noblock_obuf_3_1) (RPIPE_noblock_obuf_3_1_675_wire) $guard ( read_from_3_796 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_1_675_inst RPIPE_noblock_obuf_3_1_675_wire 1
    # $phi [phi_stmt_671] (R_ZERO_33_673_wire_constant RPIPE_noblock_obuf_3_1_675_wire) ( pkt_3_e_word_671 ) $fullrate
    // $buffering  $out phi_stmt_671 pkt_3_e_word_671 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // noblock_obuf_4_1
    $ioport $in [RPIPE_noblock_obuf_4_1_680_inst] (noblock_obuf_4_1) (RPIPE_noblock_obuf_4_1_680_wire) $guard ( read_from_4_804 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_1_680_inst RPIPE_noblock_obuf_4_1_680_wire 1
    # $phi [phi_stmt_676] (R_ZERO_33_678_wire_constant RPIPE_noblock_obuf_4_1_680_wire) ( pkt_4_e_word_676 ) $fullrate
    // $buffering  $out phi_stmt_676 pkt_4_e_word_676 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    # := [next_active_packet_748_684_buf] (next_active_packet_748) (next_active_packet_748_684_buffered)     $fullrate
    $buffering $out next_active_packet_748_684_buf next_active_packet_748_684_buffered  1
    # $phi [phi_stmt_681] (R_ZERO_3_683_wire_constant next_active_packet_748_684_buffered) ( active_packet_681 ) $fullrate
    // $buffering  $out phi_stmt_681 active_packet_681 2
    // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    # := [next_pkt_priority_748_688_buf] (next_pkt_priority_748) (next_pkt_priority_748_688_buffered)     $fullrate
    $buffering $out next_pkt_priority_748_688_buf next_pkt_priority_748_688_buffered  1
    # $phi [phi_stmt_685] (R_ZERO_3_687_wire_constant next_pkt_priority_748_688_buffered) ( pkt_priority_685 ) $fullrate
    // $buffering  $out phi_stmt_685 pkt_priority_685 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 240
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_693_inst] (pkt_1_e_word_661 konst_692_wire_constant) (p1_valid_694)   $flowthrough 
    $delay BITSEL_u33_u1_693_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 241
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_698_inst] (pkt_2_e_word_666 konst_697_wire_constant) (p2_valid_699)   $flowthrough 
    $delay BITSEL_u33_u1_698_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 242
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_703_inst] (pkt_3_e_word_671 konst_702_wire_constant) (p3_valid_704)   $flowthrough 
    $delay BITSEL_u33_u1_703_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 243
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_708_inst] (pkt_4_e_word_676 konst_707_wire_constant) (p4_valid_709)   $flowthrough 
    $delay BITSEL_u33_u1_708_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 244
    // (active_packet == 1 )
    ==[EQ_u3_u1_713_inst] (active_packet_681 konst_712_wire_constant) (EQ_u3_u1_713_wire)   $flowthrough 
    $delay EQ_u3_u1_713_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_716_inst] (EQ_u3_u1_713_wire p1_valid_694 konst_715_wire_constant) (MUX_716_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_719_inst] (active_packet_681 konst_718_wire_constant) (EQ_u3_u1_719_wire)   $flowthrough 
    $delay EQ_u3_u1_719_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_722_inst] (EQ_u3_u1_719_wire p2_valid_699 konst_721_wire_constant) (MUX_722_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_723_inst] (MUX_716_wire MUX_722_wire) (OR_u1_u1_723_wire)   $flowthrough 
    $delay OR_u1_u1_723_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_726_inst] (active_packet_681 konst_725_wire_constant) (EQ_u3_u1_726_wire)   $flowthrough 
    $delay EQ_u3_u1_726_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_729_inst] (EQ_u3_u1_726_wire p3_valid_704 konst_728_wire_constant) (MUX_729_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_732_inst] (active_packet_681 konst_731_wire_constant) (EQ_u3_u1_732_wire)   $flowthrough 
    $delay EQ_u3_u1_732_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_735_inst] (EQ_u3_u1_732_wire p4_valid_709 konst_734_wire_constant) (MUX_735_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_736_inst] (MUX_729_wire MUX_735_wire) (OR_u1_u1_736_wire)   $flowthrough 
    $delay OR_u1_u1_736_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_737_inst] (OR_u1_u1_723_wire OR_u1_u1_736_wire) (valid_active_pkt_word_read_738)   $flowthrough 
    $delay OR_u1_u1_737_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    $call [call_stmt_748_call] $module prioritySelect(down_counter_657 active_packet_681 pkt_priority_685 p1_valid_694 p2_valid_699 p3_valid_704 p4_valid_709) (next_active_packet_748 next_pkt_priority_748)   $flowthrough $fullrate
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 246
    // (p1_valid | p2_valid)
    |[OR_u1_u1_752_inst] (p1_valid_694 p2_valid_699) (OR_u1_u1_752_wire)   $flowthrough 
    $delay OR_u1_u1_752_inst 0
    // (p3_valid | p4_valid)
    |[OR_u1_u1_755_inst] (p3_valid_704 p4_valid_709) (OR_u1_u1_755_wire)   $flowthrough 
    $delay OR_u1_u1_755_inst 0
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    |[OR_u1_u1_756_inst] (OR_u1_u1_752_wire OR_u1_u1_755_wire) (OR_u1_u1_756_wire)   $flowthrough 
    $delay OR_u1_u1_756_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_759_inst] (down_counter_657 konst_758_wire_constant) (EQ_u8_u1_759_wire)   $flowthrough 
    $delay EQ_u8_u1_759_inst 0
    // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
    &[AND_u1_u1_760_inst] (OR_u1_u1_756_wire EQ_u8_u1_759_wire) (started_new_packet_761)   $flowthrough 
    $delay AND_u1_u1_760_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 247
    // (down_counter - 1 )
    -[SUB_u8_u8_768_inst] (down_counter_657 konst_767_wire_constant) (SUB_u8_u8_768_wire)   $flowthrough 
    $delay SUB_u8_u8_768_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_770_inst] (valid_active_pkt_word_read_738 SUB_u8_u8_768_wire down_counter_657) (MUX_770_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_771_inst] (started_new_packet_761 konst_764_wire_constant MUX_770_wire) (next_down_counter_772)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 248
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_775_inst] (p1_valid_694) (NOT_u1_u1_775_wire)   $flowthrough
    $delay NOT_u1_u1_775_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_778_inst] (next_active_packet_748 konst_777_wire_constant) (EQ_u3_u1_778_wire)   $flowthrough 
    $delay EQ_u3_u1_778_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_779_inst] (NOT_u1_u1_775_wire EQ_u3_u1_778_wire) (read_from_1_780)   $flowthrough 
    $delay OR_u1_u1_779_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 249
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_783_inst] (p2_valid_699) (NOT_u1_u1_783_wire)   $flowthrough
    $delay NOT_u1_u1_783_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_786_inst] (next_active_packet_748 konst_785_wire_constant) (EQ_u3_u1_786_wire)   $flowthrough 
    $delay EQ_u3_u1_786_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_787_inst] (NOT_u1_u1_783_wire EQ_u3_u1_786_wire) (read_from_2_788)   $flowthrough 
    $delay OR_u1_u1_787_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 250
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_791_inst] (p3_valid_704) (NOT_u1_u1_791_wire)   $flowthrough
    $delay NOT_u1_u1_791_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_794_inst] (next_active_packet_748 konst_793_wire_constant) (EQ_u3_u1_794_wire)   $flowthrough 
    $delay EQ_u3_u1_794_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_795_inst] (NOT_u1_u1_791_wire EQ_u3_u1_794_wire) (read_from_3_796)   $flowthrough 
    $delay OR_u1_u1_795_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 251
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_799_inst] (p4_valid_709) (NOT_u1_u1_799_wire)   $flowthrough
    $delay NOT_u1_u1_799_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_802_inst] (next_active_packet_748 konst_801_wire_constant) (EQ_u3_u1_802_wire)   $flowthrough 
    $delay EQ_u3_u1_802_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_803_inst] (NOT_u1_u1_799_wire EQ_u3_u1_802_wire) (read_from_4_804)   $flowthrough 
    $delay OR_u1_u1_803_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 252
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_808_inst] (next_active_packet_748 konst_807_wire_constant) (EQ_u3_u1_808_wire)   $flowthrough 
    $delay EQ_u3_u1_808_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_810_inst] (pkt_1_e_word_661 31 0) (slice_810_wire)  $flowthrough
    $delay slice_810_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_812_inst] (EQ_u3_u1_808_wire slice_810_wire konst_811_wire_constant) (MUX_812_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_815_inst] (next_active_packet_748 konst_814_wire_constant) (EQ_u3_u1_815_wire)   $flowthrough 
    $delay EQ_u3_u1_815_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_817_inst] (pkt_2_e_word_666 31 0) (slice_817_wire)  $flowthrough
    $delay slice_817_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_819_inst] (EQ_u3_u1_815_wire slice_817_wire konst_818_wire_constant) (MUX_819_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_820_inst] (MUX_812_wire MUX_819_wire) (OR_u32_u32_820_wire)   $flowthrough 
    $delay OR_u32_u32_820_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_823_inst] (next_active_packet_748 konst_822_wire_constant) (EQ_u3_u1_823_wire)   $flowthrough 
    $delay EQ_u3_u1_823_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_825_inst] (pkt_3_e_word_671 31 0) (slice_825_wire)  $flowthrough
    $delay slice_825_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_827_inst] (EQ_u3_u1_823_wire slice_825_wire konst_826_wire_constant) (MUX_827_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_830_inst] (next_active_packet_748 konst_829_wire_constant) (EQ_u3_u1_830_wire)   $flowthrough 
    $delay EQ_u3_u1_830_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_832_inst] (pkt_4_e_word_676 31 0) (slice_832_wire)  $flowthrough
    $delay slice_832_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_834_inst] (EQ_u3_u1_830_wire slice_832_wire konst_833_wire_constant) (MUX_834_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_835_inst] (MUX_827_wire MUX_834_wire) (OR_u32_u32_835_wire)   $flowthrough 
    $delay OR_u32_u32_835_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_836_inst] (OR_u32_u32_820_wire OR_u32_u32_835_wire) (data_to_out_837)   $flowthrough 
    $delay OR_u32_u32_836_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 253
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_841_inst] (next_active_packet_748 konst_840_wire_constant) (EQ_u3_u1_841_wire)   $flowthrough 
    $delay EQ_u3_u1_841_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_844_inst] (EQ_u3_u1_841_wire p1_valid_694 konst_843_wire_constant) (MUX_844_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_847_inst] (next_active_packet_748 konst_846_wire_constant) (EQ_u3_u1_847_wire)   $flowthrough 
    $delay EQ_u3_u1_847_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_850_inst] (EQ_u3_u1_847_wire p2_valid_699 konst_849_wire_constant) (MUX_850_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_851_inst] (MUX_844_wire MUX_850_wire) (OR_u1_u1_851_wire)   $flowthrough 
    $delay OR_u1_u1_851_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_854_inst] (next_active_packet_748 konst_853_wire_constant) (EQ_u3_u1_854_wire)   $flowthrough 
    $delay EQ_u3_u1_854_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_857_inst] (EQ_u3_u1_854_wire p3_valid_704 konst_856_wire_constant) (MUX_857_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_860_inst] (next_active_packet_748 konst_859_wire_constant) (EQ_u3_u1_860_wire)   $flowthrough 
    $delay EQ_u3_u1_860_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_863_inst] (EQ_u3_u1_860_wire p4_valid_709 konst_862_wire_constant) (MUX_863_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_864_inst] (MUX_857_wire MUX_863_wire) (OR_u1_u1_864_wire)   $flowthrough 
    $delay OR_u1_u1_864_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_865_inst] (OR_u1_u1_851_wire OR_u1_u1_864_wire) (send_flag_866)   $flowthrough 
    $delay OR_u1_u1_865_inst 0
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 254
    // out_data_1
    $ioport $out [WPIPE_out_data_1_868_inst]  (data_to_out_837) (out_data_1) $guard ( send_flag_866 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_655
  //  file .Aa/switch2x2.opt.aa, line 222
  phi_stmt_657 <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_657_entry_sample_req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_657_loopback_sample_req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_657_phi_mux_ack)
  next_down_counter_772_660_buf <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_down_counter_660_Sample/req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_down_counter_660_Update/req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_down_counter_660_Sample/ack branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_down_counter_660_Update/ack)
  phi_stmt_661 <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_661_entry_sample_req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_661_loopback_sample_req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_661_phi_mux_ack)
  // noblock_obuf_1_1
  RPIPE_noblock_obuf_1_1_665_inst <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_1_1_665_Sample/rr branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_1_1_665_Update/cr) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_1_1_665_Sample/ra branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_1_1_665_Update/ca)
  phi_stmt_666 <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_666_entry_sample_req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_666_loopback_sample_req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_666_phi_mux_ack)
  // noblock_obuf_2_1
  RPIPE_noblock_obuf_2_1_670_inst <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_2_1_670_Sample/rr branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_2_1_670_Update/cr) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_2_1_670_Sample/ra branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_2_1_670_Update/ca)
  phi_stmt_671 <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_671_entry_sample_req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_671_loopback_sample_req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_671_phi_mux_ack)
  // noblock_obuf_3_1
  RPIPE_noblock_obuf_3_1_675_inst <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_3_1_675_Sample/rr branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_3_1_675_Update/cr) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_3_1_675_Sample/ra branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_3_1_675_Update/ca)
  phi_stmt_676 <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_676_entry_sample_req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_676_loopback_sample_req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_676_phi_mux_ack)
  // noblock_obuf_4_1
  RPIPE_noblock_obuf_4_1_680_inst <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_4_1_680_Sample/rr branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_4_1_680_Update/cr) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_4_1_680_Sample/ra branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/RPIPE_noblock_obuf_4_1_680_Update/ca)
  phi_stmt_681 <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_681_entry_sample_req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_681_loopback_sample_req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_681_phi_mux_ack)
  next_active_packet_748_684_buf <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_active_packet_684_Sample/req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_active_packet_684_Update/req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_active_packet_684_Sample/ack branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_active_packet_684_Update/ack)
  phi_stmt_685 <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_685_entry_sample_req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_685_loopback_sample_req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/phi_stmt_685_phi_mux_ack)
  next_pkt_priority_748_688_buf <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_pkt_priority_688_Sample/req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_pkt_priority_688_Update/req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_pkt_priority_688_Sample/ack branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/R_next_pkt_priority_688_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 240
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 241
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 242
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 243
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 244
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 245
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 246
  // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
  // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
  // (p1_valid | p2_valid)
  // p1_valid
  // p2_valid
  // (p3_valid | p4_valid)
  // p3_valid
  // p4_valid
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 247
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 248
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 249
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 250
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 251
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 252
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 253
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 254
  // data_to_out
  // out_data_1
  WPIPE_out_data_1_868_inst <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/WPIPE_out_data_1_868_Sample/req branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/WPIPE_out_data_1_868_Update/req) (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/WPIPE_out_data_1_868_Sample/ack branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/WPIPE_out_data_1_868_Update/ack)
  do_while_stmt_655_branch <=> (branch_block_stmt_654/do_while_stmt_655/do_while_stmt_655_loop_body/condition_evaluated) (branch_block_stmt_654/do_while_stmt_655/loop_exit/ack branch_block_stmt_654/do_while_stmt_655/loop_taken/ack)
}
$module [outputPort_2_Daemon] 
{
  // pipe-declarations for block %outputPort_2_Daemon
  //  file .Aa/switch2x2.opt.aa, line 258
  // pipe-declarations for block %outputPort_2_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 263
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_876] // Branch Block  file .Aa/switch2x2.opt.aa, line 263
    {
      $P [branch_block_stmt_876__entry__]
      branch_block_stmt_876__entry__ <-| ($entry)
      $P [branch_block_stmt_876__exit__]
      branch_block_stmt_876__exit__ |-> ($exit)
      $P [do_while_stmt_877__entry__] 
      $P [do_while_stmt_877__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 265
      <o> [do_while_stmt_877]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_877__entry__] 
        $P[do_while_stmt_877__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_877_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_879
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_879_sample_start_] 
          $T[phi_stmt_879_sample_completed_] 
          $T[phi_stmt_879_update_start_] 
          $T[phi_stmt_879_update_completed_] 
          $T[phi_stmt_879_sample_start__ps] 
          phi_stmt_879_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_879_sample_completed__ps] 
          phi_stmt_879_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_879_update_start__ps] 
          phi_stmt_879_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_879_update_completed__ps] 
          phi_stmt_879_update_completed_ <-& (phi_stmt_879_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_879_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_879_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_879_update_start_)
          $T[phi_stmt_879_loopback_trigger] 
          phi_stmt_879_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_879_loopback_sample_req] 
          $T[phi_stmt_879_loopback_sample_req_ps] 
          phi_stmt_879_loopback_sample_req <-& (phi_stmt_879_loopback_sample_req_ps)
          phi_stmt_879_loopback_sample_req &-> ($null)
          $T[phi_stmt_879_entry_trigger] 
          phi_stmt_879_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_879_entry_sample_req] 
          $T[phi_stmt_879_entry_sample_req_ps] 
          phi_stmt_879_entry_sample_req <-& (phi_stmt_879_entry_sample_req_ps)
          phi_stmt_879_entry_sample_req &-> ($null)
          phi_stmt_879_update_start_ o<-& (phi_stmt_879_update_completed_ 0)
          phi_stmt_879_sample_start_ o<-& (phi_stmt_879_sample_completed_ 1)
          $T[phi_stmt_879_merged_reqs] 
          $T[phi_stmt_879_phi_mux_ack] 
          $T[phi_stmt_879_phi_mux_ack_ps] 
          phi_stmt_879_phi_mux_ack_ps <-& (phi_stmt_879_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_879_update_completed_)
          $T[R_ZERO_8_881_sample_start__ps] 
          $T[R_ZERO_8_881_sample_completed__ps] 
          $T[R_ZERO_8_881_update_start__ps] 
          $T[R_ZERO_8_881_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_881_sample_start_] 
          $T[R_ZERO_8_881_sample_completed_] 
          R_ZERO_8_881_sample_completed_ <-& (R_ZERO_8_881_sample_start_)
          $T[R_ZERO_8_881_update_start_] 
          $T [R_ZERO_8_881_update_completed_] $delay 
          R_ZERO_8_881_update_completed_ <-& (R_ZERO_8_881_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_881_sample_start_ <-& (R_ZERO_8_881_sample_start__ps)
          R_ZERO_8_881_update_start_ <-& (R_ZERO_8_881_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_881_sample_completed__ps <-& (R_ZERO_8_881_sample_completed_)
          R_ZERO_8_881_update_completed__ps <-& (R_ZERO_8_881_update_completed_)
          $T[R_next_down_counter_882_sample_start__ps] 
          $T[R_next_down_counter_882_sample_completed__ps] 
          $T[R_next_down_counter_882_update_start__ps] 
          $T[R_next_down_counter_882_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_882_sample_start_] 
          $T[R_next_down_counter_882_sample_completed_] 
          $T[R_next_down_counter_882_update_start_] 
          $T[R_next_down_counter_882_update_completed_] 
          ;;[R_next_down_counter_882_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_882_sample_start_ &-> (R_next_down_counter_882_Sample)
          R_next_down_counter_882_sample_completed_ <-& (R_next_down_counter_882_Sample)
          ;;[R_next_down_counter_882_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_882_update_start_ &-> (R_next_down_counter_882_Update)
          R_next_down_counter_882_update_completed_ <-& (R_next_down_counter_882_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_882_sample_start_ <-& (R_next_down_counter_882_sample_start__ps)
          R_next_down_counter_882_update_start_ <-& (R_next_down_counter_882_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_882_sample_completed__ps <-& (R_next_down_counter_882_sample_completed_)
          R_next_down_counter_882_update_completed__ps <-& (R_next_down_counter_882_update_completed_)
          $phisequencer [ phi_stmt_879_phi_seq] : 
          phi_stmt_879_entry_trigger R_ZERO_8_881_sample_start__ps R_ZERO_8_881_sample_completed__ps R_ZERO_8_881_update_start__ps R_ZERO_8_881_update_completed__ps phi_stmt_879_loopback_trigger R_next_down_counter_882_sample_start__ps R_next_down_counter_882_sample_completed__ps R_next_down_counter_882_update_start__ps R_next_down_counter_882_update_completed__ps :
          phi_stmt_879_sample_start__ps phi_stmt_879_sample_completed__ps phi_stmt_879_update_start__ps phi_stmt_879_update_completed__ps :
          phi_stmt_879_entry_sample_req_ps phi_stmt_879_loopback_sample_req_ps : 
          phi_stmt_879_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_879
          // start:  PHI statement phi_stmt_883
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_883_sample_start_] 
          $T[phi_stmt_883_sample_completed_] 
          $T[phi_stmt_883_update_start_] 
          $T[phi_stmt_883_update_completed_] 
          $T[phi_stmt_883_sample_start__ps] 
          phi_stmt_883_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_883_sample_completed__ps] 
          phi_stmt_883_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_883_update_start__ps] 
          phi_stmt_883_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_883_update_completed__ps] 
          phi_stmt_883_update_completed_ <-& (phi_stmt_883_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_883_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_883_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_883_update_start_)
          $T[phi_stmt_883_loopback_trigger] 
          phi_stmt_883_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_883_loopback_sample_req] 
          $T[phi_stmt_883_loopback_sample_req_ps] 
          phi_stmt_883_loopback_sample_req <-& (phi_stmt_883_loopback_sample_req_ps)
          phi_stmt_883_loopback_sample_req &-> ($null)
          $T[phi_stmt_883_entry_trigger] 
          phi_stmt_883_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_883_entry_sample_req] 
          $T[phi_stmt_883_entry_sample_req_ps] 
          phi_stmt_883_entry_sample_req <-& (phi_stmt_883_entry_sample_req_ps)
          phi_stmt_883_entry_sample_req &-> ($null)
          phi_stmt_883_update_start_ o<-& (phi_stmt_883_update_completed_ 0)
          phi_stmt_883_sample_start_ o<-& (phi_stmt_883_sample_completed_ 1)
          $T[phi_stmt_883_merged_reqs] 
          $T[phi_stmt_883_phi_mux_ack] 
          $T[phi_stmt_883_phi_mux_ack_ps] 
          phi_stmt_883_phi_mux_ack_ps <-& (phi_stmt_883_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_883_update_completed_)
          $T[R_ZERO_33_885_sample_start__ps] 
          $T[R_ZERO_33_885_sample_completed__ps] 
          $T[R_ZERO_33_885_update_start__ps] 
          $T[R_ZERO_33_885_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_885_sample_start_] 
          $T[R_ZERO_33_885_sample_completed_] 
          R_ZERO_33_885_sample_completed_ <-& (R_ZERO_33_885_sample_start_)
          $T[R_ZERO_33_885_update_start_] 
          $T [R_ZERO_33_885_update_completed_] $delay 
          R_ZERO_33_885_update_completed_ <-& (R_ZERO_33_885_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_885_sample_start_ <-& (R_ZERO_33_885_sample_start__ps)
          R_ZERO_33_885_update_start_ <-& (R_ZERO_33_885_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_885_sample_completed__ps <-& (R_ZERO_33_885_sample_completed_)
          R_ZERO_33_885_update_completed__ps <-& (R_ZERO_33_885_update_completed_)
          $T[RPIPE_noblock_obuf_1_2_887_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_887_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_2_887_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_887_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_2
          $T[RPIPE_noblock_obuf_1_2_887_sample_start_] 
          $T[RPIPE_noblock_obuf_1_2_887_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_2_887_update_start_] 
          $T[RPIPE_noblock_obuf_1_2_887_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_2_887 with guard R_read_from_1_886
          // root phi_stmt_883 not in visited_elements
          // root phi_stmt_888 not in visited_elements
          // root phi_stmt_893 not in visited_elements
          // root phi_stmt_898 not in visited_elements
          // root phi_stmt_903 not in visited_elements
          // root phi_stmt_907 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_2_887_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_2_887_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_2_887_sample_start_ &-> (RPIPE_noblock_obuf_1_2_887_Sample)
          RPIPE_noblock_obuf_1_2_887_sample_completed_ <-& (RPIPE_noblock_obuf_1_2_887_Sample)
          RPIPE_noblock_obuf_1_2_887_update_start_ <-& (RPIPE_noblock_obuf_1_2_887_sample_completed_)
          RPIPE_noblock_obuf_1_2_887_update_start_ &-> (RPIPE_noblock_obuf_1_2_887_Update)
          RPIPE_noblock_obuf_1_2_887_update_completed_ <-& (RPIPE_noblock_obuf_1_2_887_Update)
          RPIPE_noblock_obuf_1_2_887_sample_start_ o<-& (RPIPE_noblock_obuf_1_2_887_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_2_887_sample_start_ <-& (RPIPE_noblock_obuf_1_2_887_sample_start__ps)
          RPIPE_noblock_obuf_1_2_887_update_start_ <-& (RPIPE_noblock_obuf_1_2_887_update_start__ps)
          // RAW reenables for noblock_obuf_1_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_2_887_sample_completed__ps <-& (RPIPE_noblock_obuf_1_2_887_sample_completed_)
          RPIPE_noblock_obuf_1_2_887_update_completed__ps <-& (RPIPE_noblock_obuf_1_2_887_update_completed_)
          $phisequencer [ phi_stmt_883_phi_seq] : 
          phi_stmt_883_entry_trigger R_ZERO_33_885_sample_start__ps R_ZERO_33_885_sample_completed__ps R_ZERO_33_885_update_start__ps R_ZERO_33_885_update_completed__ps phi_stmt_883_loopback_trigger RPIPE_noblock_obuf_1_2_887_sample_start__ps RPIPE_noblock_obuf_1_2_887_sample_completed__ps RPIPE_noblock_obuf_1_2_887_update_start__ps RPIPE_noblock_obuf_1_2_887_update_completed__ps :
          phi_stmt_883_sample_start__ps phi_stmt_883_sample_completed__ps phi_stmt_883_update_start__ps phi_stmt_883_update_completed__ps :
          phi_stmt_883_entry_sample_req_ps phi_stmt_883_loopback_sample_req_ps : 
          phi_stmt_883_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_883
          // start:  PHI statement phi_stmt_888
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_888_sample_start_] 
          $T[phi_stmt_888_sample_completed_] 
          $T[phi_stmt_888_update_start_] 
          $T[phi_stmt_888_update_completed_] 
          $T[phi_stmt_888_sample_start__ps] 
          phi_stmt_888_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_888_sample_completed__ps] 
          phi_stmt_888_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_888_update_start__ps] 
          phi_stmt_888_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_888_update_completed__ps] 
          phi_stmt_888_update_completed_ <-& (phi_stmt_888_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_888_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_888_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_888_update_start_)
          $T[phi_stmt_888_loopback_trigger] 
          phi_stmt_888_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_888_loopback_sample_req] 
          $T[phi_stmt_888_loopback_sample_req_ps] 
          phi_stmt_888_loopback_sample_req <-& (phi_stmt_888_loopback_sample_req_ps)
          phi_stmt_888_loopback_sample_req &-> ($null)
          $T[phi_stmt_888_entry_trigger] 
          phi_stmt_888_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_888_entry_sample_req] 
          $T[phi_stmt_888_entry_sample_req_ps] 
          phi_stmt_888_entry_sample_req <-& (phi_stmt_888_entry_sample_req_ps)
          phi_stmt_888_entry_sample_req &-> ($null)
          phi_stmt_888_update_start_ o<-& (phi_stmt_888_update_completed_ 0)
          phi_stmt_888_sample_start_ o<-& (phi_stmt_888_sample_completed_ 1)
          $T[phi_stmt_888_merged_reqs] 
          $T[phi_stmt_888_phi_mux_ack] 
          $T[phi_stmt_888_phi_mux_ack_ps] 
          phi_stmt_888_phi_mux_ack_ps <-& (phi_stmt_888_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_888_update_completed_)
          $T[R_ZERO_33_890_sample_start__ps] 
          $T[R_ZERO_33_890_sample_completed__ps] 
          $T[R_ZERO_33_890_update_start__ps] 
          $T[R_ZERO_33_890_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_890_sample_start_] 
          $T[R_ZERO_33_890_sample_completed_] 
          R_ZERO_33_890_sample_completed_ <-& (R_ZERO_33_890_sample_start_)
          $T[R_ZERO_33_890_update_start_] 
          $T [R_ZERO_33_890_update_completed_] $delay 
          R_ZERO_33_890_update_completed_ <-& (R_ZERO_33_890_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_890_sample_start_ <-& (R_ZERO_33_890_sample_start__ps)
          R_ZERO_33_890_update_start_ <-& (R_ZERO_33_890_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_890_sample_completed__ps <-& (R_ZERO_33_890_sample_completed_)
          R_ZERO_33_890_update_completed__ps <-& (R_ZERO_33_890_update_completed_)
          $T[RPIPE_noblock_obuf_2_2_892_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_892_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_2_892_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_892_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_2
          $T[RPIPE_noblock_obuf_2_2_892_sample_start_] 
          $T[RPIPE_noblock_obuf_2_2_892_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_2_892_update_start_] 
          $T[RPIPE_noblock_obuf_2_2_892_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_2_892 with guard R_read_from_2_891
          // root phi_stmt_888 not in visited_elements
          // root phi_stmt_893 not in visited_elements
          // root phi_stmt_898 not in visited_elements
          // root phi_stmt_903 not in visited_elements
          // root phi_stmt_907 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_2_892_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_2_892_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_2_892_sample_start_ &-> (RPIPE_noblock_obuf_2_2_892_Sample)
          RPIPE_noblock_obuf_2_2_892_sample_completed_ <-& (RPIPE_noblock_obuf_2_2_892_Sample)
          RPIPE_noblock_obuf_2_2_892_update_start_ <-& (RPIPE_noblock_obuf_2_2_892_sample_completed_)
          RPIPE_noblock_obuf_2_2_892_update_start_ &-> (RPIPE_noblock_obuf_2_2_892_Update)
          RPIPE_noblock_obuf_2_2_892_update_completed_ <-& (RPIPE_noblock_obuf_2_2_892_Update)
          RPIPE_noblock_obuf_2_2_892_sample_start_ o<-& (RPIPE_noblock_obuf_2_2_892_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_2_892_sample_start_ <-& (RPIPE_noblock_obuf_2_2_892_sample_start__ps)
          RPIPE_noblock_obuf_2_2_892_update_start_ <-& (RPIPE_noblock_obuf_2_2_892_update_start__ps)
          // RAW reenables for noblock_obuf_2_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_2_892_sample_completed__ps <-& (RPIPE_noblock_obuf_2_2_892_sample_completed_)
          RPIPE_noblock_obuf_2_2_892_update_completed__ps <-& (RPIPE_noblock_obuf_2_2_892_update_completed_)
          $phisequencer [ phi_stmt_888_phi_seq] : 
          phi_stmt_888_entry_trigger R_ZERO_33_890_sample_start__ps R_ZERO_33_890_sample_completed__ps R_ZERO_33_890_update_start__ps R_ZERO_33_890_update_completed__ps phi_stmt_888_loopback_trigger RPIPE_noblock_obuf_2_2_892_sample_start__ps RPIPE_noblock_obuf_2_2_892_sample_completed__ps RPIPE_noblock_obuf_2_2_892_update_start__ps RPIPE_noblock_obuf_2_2_892_update_completed__ps :
          phi_stmt_888_sample_start__ps phi_stmt_888_sample_completed__ps phi_stmt_888_update_start__ps phi_stmt_888_update_completed__ps :
          phi_stmt_888_entry_sample_req_ps phi_stmt_888_loopback_sample_req_ps : 
          phi_stmt_888_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_888
          // start:  PHI statement phi_stmt_893
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_893_sample_start_] 
          $T[phi_stmt_893_sample_completed_] 
          $T[phi_stmt_893_update_start_] 
          $T[phi_stmt_893_update_completed_] 
          $T[phi_stmt_893_sample_start__ps] 
          phi_stmt_893_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_893_sample_completed__ps] 
          phi_stmt_893_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_893_update_start__ps] 
          phi_stmt_893_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_893_update_completed__ps] 
          phi_stmt_893_update_completed_ <-& (phi_stmt_893_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_893_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_893_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_893_update_start_)
          $T[phi_stmt_893_loopback_trigger] 
          phi_stmt_893_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_893_loopback_sample_req] 
          $T[phi_stmt_893_loopback_sample_req_ps] 
          phi_stmt_893_loopback_sample_req <-& (phi_stmt_893_loopback_sample_req_ps)
          phi_stmt_893_loopback_sample_req &-> ($null)
          $T[phi_stmt_893_entry_trigger] 
          phi_stmt_893_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_893_entry_sample_req] 
          $T[phi_stmt_893_entry_sample_req_ps] 
          phi_stmt_893_entry_sample_req <-& (phi_stmt_893_entry_sample_req_ps)
          phi_stmt_893_entry_sample_req &-> ($null)
          phi_stmt_893_update_start_ o<-& (phi_stmt_893_update_completed_ 0)
          phi_stmt_893_sample_start_ o<-& (phi_stmt_893_sample_completed_ 1)
          $T[phi_stmt_893_merged_reqs] 
          $T[phi_stmt_893_phi_mux_ack] 
          $T[phi_stmt_893_phi_mux_ack_ps] 
          phi_stmt_893_phi_mux_ack_ps <-& (phi_stmt_893_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_893_update_completed_)
          $T[R_ZERO_33_895_sample_start__ps] 
          $T[R_ZERO_33_895_sample_completed__ps] 
          $T[R_ZERO_33_895_update_start__ps] 
          $T[R_ZERO_33_895_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_895_sample_start_] 
          $T[R_ZERO_33_895_sample_completed_] 
          R_ZERO_33_895_sample_completed_ <-& (R_ZERO_33_895_sample_start_)
          $T[R_ZERO_33_895_update_start_] 
          $T [R_ZERO_33_895_update_completed_] $delay 
          R_ZERO_33_895_update_completed_ <-& (R_ZERO_33_895_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_895_sample_start_ <-& (R_ZERO_33_895_sample_start__ps)
          R_ZERO_33_895_update_start_ <-& (R_ZERO_33_895_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_895_sample_completed__ps <-& (R_ZERO_33_895_sample_completed_)
          R_ZERO_33_895_update_completed__ps <-& (R_ZERO_33_895_update_completed_)
          $T[RPIPE_noblock_obuf_3_2_897_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_897_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_2_897_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_897_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_2
          $T[RPIPE_noblock_obuf_3_2_897_sample_start_] 
          $T[RPIPE_noblock_obuf_3_2_897_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_2_897_update_start_] 
          $T[RPIPE_noblock_obuf_3_2_897_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_2_897 with guard R_read_from_3_896
          // root phi_stmt_893 not in visited_elements
          // root phi_stmt_898 not in visited_elements
          // root phi_stmt_903 not in visited_elements
          // root phi_stmt_907 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_2_897_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_2_897_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_2_897_sample_start_ &-> (RPIPE_noblock_obuf_3_2_897_Sample)
          RPIPE_noblock_obuf_3_2_897_sample_completed_ <-& (RPIPE_noblock_obuf_3_2_897_Sample)
          RPIPE_noblock_obuf_3_2_897_update_start_ <-& (RPIPE_noblock_obuf_3_2_897_sample_completed_)
          RPIPE_noblock_obuf_3_2_897_update_start_ &-> (RPIPE_noblock_obuf_3_2_897_Update)
          RPIPE_noblock_obuf_3_2_897_update_completed_ <-& (RPIPE_noblock_obuf_3_2_897_Update)
          RPIPE_noblock_obuf_3_2_897_sample_start_ o<-& (RPIPE_noblock_obuf_3_2_897_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_2_897_sample_start_ <-& (RPIPE_noblock_obuf_3_2_897_sample_start__ps)
          RPIPE_noblock_obuf_3_2_897_update_start_ <-& (RPIPE_noblock_obuf_3_2_897_update_start__ps)
          // RAW reenables for noblock_obuf_3_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_2_897_sample_completed__ps <-& (RPIPE_noblock_obuf_3_2_897_sample_completed_)
          RPIPE_noblock_obuf_3_2_897_update_completed__ps <-& (RPIPE_noblock_obuf_3_2_897_update_completed_)
          $phisequencer [ phi_stmt_893_phi_seq] : 
          phi_stmt_893_entry_trigger R_ZERO_33_895_sample_start__ps R_ZERO_33_895_sample_completed__ps R_ZERO_33_895_update_start__ps R_ZERO_33_895_update_completed__ps phi_stmt_893_loopback_trigger RPIPE_noblock_obuf_3_2_897_sample_start__ps RPIPE_noblock_obuf_3_2_897_sample_completed__ps RPIPE_noblock_obuf_3_2_897_update_start__ps RPIPE_noblock_obuf_3_2_897_update_completed__ps :
          phi_stmt_893_sample_start__ps phi_stmt_893_sample_completed__ps phi_stmt_893_update_start__ps phi_stmt_893_update_completed__ps :
          phi_stmt_893_entry_sample_req_ps phi_stmt_893_loopback_sample_req_ps : 
          phi_stmt_893_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_893
          // start:  PHI statement phi_stmt_898
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_898_sample_start_] 
          $T[phi_stmt_898_sample_completed_] 
          $T[phi_stmt_898_update_start_] 
          $T[phi_stmt_898_update_completed_] 
          $T[phi_stmt_898_sample_start__ps] 
          phi_stmt_898_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_898_sample_completed__ps] 
          phi_stmt_898_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_898_update_start__ps] 
          phi_stmt_898_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_898_update_completed__ps] 
          phi_stmt_898_update_completed_ <-& (phi_stmt_898_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_898_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_898_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_898_update_start_)
          $T[phi_stmt_898_loopback_trigger] 
          phi_stmt_898_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_898_loopback_sample_req] 
          $T[phi_stmt_898_loopback_sample_req_ps] 
          phi_stmt_898_loopback_sample_req <-& (phi_stmt_898_loopback_sample_req_ps)
          phi_stmt_898_loopback_sample_req &-> ($null)
          $T[phi_stmt_898_entry_trigger] 
          phi_stmt_898_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_898_entry_sample_req] 
          $T[phi_stmt_898_entry_sample_req_ps] 
          phi_stmt_898_entry_sample_req <-& (phi_stmt_898_entry_sample_req_ps)
          phi_stmt_898_entry_sample_req &-> ($null)
          phi_stmt_898_update_start_ o<-& (phi_stmt_898_update_completed_ 0)
          phi_stmt_898_sample_start_ o<-& (phi_stmt_898_sample_completed_ 1)
          $T[phi_stmt_898_merged_reqs] 
          $T[phi_stmt_898_phi_mux_ack] 
          $T[phi_stmt_898_phi_mux_ack_ps] 
          phi_stmt_898_phi_mux_ack_ps <-& (phi_stmt_898_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_898_update_completed_)
          $T[R_ZERO_33_900_sample_start__ps] 
          $T[R_ZERO_33_900_sample_completed__ps] 
          $T[R_ZERO_33_900_update_start__ps] 
          $T[R_ZERO_33_900_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_900_sample_start_] 
          $T[R_ZERO_33_900_sample_completed_] 
          R_ZERO_33_900_sample_completed_ <-& (R_ZERO_33_900_sample_start_)
          $T[R_ZERO_33_900_update_start_] 
          $T [R_ZERO_33_900_update_completed_] $delay 
          R_ZERO_33_900_update_completed_ <-& (R_ZERO_33_900_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_900_sample_start_ <-& (R_ZERO_33_900_sample_start__ps)
          R_ZERO_33_900_update_start_ <-& (R_ZERO_33_900_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_900_sample_completed__ps <-& (R_ZERO_33_900_sample_completed_)
          R_ZERO_33_900_update_completed__ps <-& (R_ZERO_33_900_update_completed_)
          $T[RPIPE_noblock_obuf_4_2_902_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_902_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_2_902_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_902_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_2
          $T[RPIPE_noblock_obuf_4_2_902_sample_start_] 
          $T[RPIPE_noblock_obuf_4_2_902_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_2_902_update_start_] 
          $T[RPIPE_noblock_obuf_4_2_902_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_2_902 with guard R_read_from_4_901
          // root phi_stmt_898 not in visited_elements
          // root phi_stmt_903 not in visited_elements
          // root phi_stmt_907 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_2_902_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_2_902_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_2_902_sample_start_ &-> (RPIPE_noblock_obuf_4_2_902_Sample)
          RPIPE_noblock_obuf_4_2_902_sample_completed_ <-& (RPIPE_noblock_obuf_4_2_902_Sample)
          RPIPE_noblock_obuf_4_2_902_update_start_ <-& (RPIPE_noblock_obuf_4_2_902_sample_completed_)
          RPIPE_noblock_obuf_4_2_902_update_start_ &-> (RPIPE_noblock_obuf_4_2_902_Update)
          RPIPE_noblock_obuf_4_2_902_update_completed_ <-& (RPIPE_noblock_obuf_4_2_902_Update)
          RPIPE_noblock_obuf_4_2_902_sample_start_ o<-& (RPIPE_noblock_obuf_4_2_902_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_2_902_sample_start_ <-& (RPIPE_noblock_obuf_4_2_902_sample_start__ps)
          RPIPE_noblock_obuf_4_2_902_update_start_ <-& (RPIPE_noblock_obuf_4_2_902_update_start__ps)
          // RAW reenables for noblock_obuf_4_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_2_902_sample_completed__ps <-& (RPIPE_noblock_obuf_4_2_902_sample_completed_)
          RPIPE_noblock_obuf_4_2_902_update_completed__ps <-& (RPIPE_noblock_obuf_4_2_902_update_completed_)
          $phisequencer [ phi_stmt_898_phi_seq] : 
          phi_stmt_898_entry_trigger R_ZERO_33_900_sample_start__ps R_ZERO_33_900_sample_completed__ps R_ZERO_33_900_update_start__ps R_ZERO_33_900_update_completed__ps phi_stmt_898_loopback_trigger RPIPE_noblock_obuf_4_2_902_sample_start__ps RPIPE_noblock_obuf_4_2_902_sample_completed__ps RPIPE_noblock_obuf_4_2_902_update_start__ps RPIPE_noblock_obuf_4_2_902_update_completed__ps :
          phi_stmt_898_sample_start__ps phi_stmt_898_sample_completed__ps phi_stmt_898_update_start__ps phi_stmt_898_update_completed__ps :
          phi_stmt_898_entry_sample_req_ps phi_stmt_898_loopback_sample_req_ps : 
          phi_stmt_898_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_898
          // start:  PHI statement phi_stmt_903
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_903_sample_start_] 
          $T[phi_stmt_903_sample_completed_] 
          $T[phi_stmt_903_update_start_] 
          $T[phi_stmt_903_update_completed_] 
          $T[phi_stmt_903_sample_start__ps] 
          phi_stmt_903_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_903_sample_completed__ps] 
          phi_stmt_903_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_903_update_start__ps] 
          phi_stmt_903_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_903_update_completed__ps] 
          phi_stmt_903_update_completed_ <-& (phi_stmt_903_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_903_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_903_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_903_update_start_)
          $T[phi_stmt_903_loopback_trigger] 
          phi_stmt_903_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_903_loopback_sample_req] 
          $T[phi_stmt_903_loopback_sample_req_ps] 
          phi_stmt_903_loopback_sample_req <-& (phi_stmt_903_loopback_sample_req_ps)
          phi_stmt_903_loopback_sample_req &-> ($null)
          $T[phi_stmt_903_entry_trigger] 
          phi_stmt_903_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_903_entry_sample_req] 
          $T[phi_stmt_903_entry_sample_req_ps] 
          phi_stmt_903_entry_sample_req <-& (phi_stmt_903_entry_sample_req_ps)
          phi_stmt_903_entry_sample_req &-> ($null)
          phi_stmt_903_update_start_ o<-& (phi_stmt_903_update_completed_ 0)
          phi_stmt_903_sample_start_ o<-& (phi_stmt_903_sample_completed_ 1)
          $T[phi_stmt_903_merged_reqs] 
          $T[phi_stmt_903_phi_mux_ack] 
          $T[phi_stmt_903_phi_mux_ack_ps] 
          phi_stmt_903_phi_mux_ack_ps <-& (phi_stmt_903_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_903_update_completed_)
          $T[R_ZERO_3_905_sample_start__ps] 
          $T[R_ZERO_3_905_sample_completed__ps] 
          $T[R_ZERO_3_905_update_start__ps] 
          $T[R_ZERO_3_905_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_905_sample_start_] 
          $T[R_ZERO_3_905_sample_completed_] 
          R_ZERO_3_905_sample_completed_ <-& (R_ZERO_3_905_sample_start_)
          $T[R_ZERO_3_905_update_start_] 
          $T [R_ZERO_3_905_update_completed_] $delay 
          R_ZERO_3_905_update_completed_ <-& (R_ZERO_3_905_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_905_sample_start_ <-& (R_ZERO_3_905_sample_start__ps)
          R_ZERO_3_905_update_start_ <-& (R_ZERO_3_905_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_905_sample_completed__ps <-& (R_ZERO_3_905_sample_completed_)
          R_ZERO_3_905_update_completed__ps <-& (R_ZERO_3_905_update_completed_)
          $T[R_next_active_packet_906_sample_start__ps] 
          $T[R_next_active_packet_906_sample_completed__ps] 
          $T[R_next_active_packet_906_update_start__ps] 
          $T[R_next_active_packet_906_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_906_sample_start_] 
          $T[R_next_active_packet_906_sample_completed_] 
          $T[R_next_active_packet_906_update_start_] 
          $T[R_next_active_packet_906_update_completed_] 
          ;;[R_next_active_packet_906_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_906_sample_start_ &-> (R_next_active_packet_906_Sample)
          R_next_active_packet_906_sample_completed_ <-& (R_next_active_packet_906_Sample)
          ;;[R_next_active_packet_906_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_906_update_start_ &-> (R_next_active_packet_906_Update)
          R_next_active_packet_906_update_completed_ <-& (R_next_active_packet_906_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_906_sample_start_ <-& (R_next_active_packet_906_sample_start__ps)
          R_next_active_packet_906_update_start_ <-& (R_next_active_packet_906_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_906_sample_completed__ps <-& (R_next_active_packet_906_sample_completed_)
          R_next_active_packet_906_update_completed__ps <-& (R_next_active_packet_906_update_completed_)
          $phisequencer [ phi_stmt_903_phi_seq] : 
          phi_stmt_903_entry_trigger R_ZERO_3_905_sample_start__ps R_ZERO_3_905_sample_completed__ps R_ZERO_3_905_update_start__ps R_ZERO_3_905_update_completed__ps phi_stmt_903_loopback_trigger R_next_active_packet_906_sample_start__ps R_next_active_packet_906_sample_completed__ps R_next_active_packet_906_update_start__ps R_next_active_packet_906_update_completed__ps :
          phi_stmt_903_sample_start__ps phi_stmt_903_sample_completed__ps phi_stmt_903_update_start__ps phi_stmt_903_update_completed__ps :
          phi_stmt_903_entry_sample_req_ps phi_stmt_903_loopback_sample_req_ps : 
          phi_stmt_903_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_903
          // start:  PHI statement phi_stmt_907
          // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_907_sample_start_] 
          $T[phi_stmt_907_sample_completed_] 
          $T[phi_stmt_907_update_start_] 
          $T[phi_stmt_907_update_completed_] 
          $T[phi_stmt_907_sample_start__ps] 
          phi_stmt_907_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_907_sample_completed__ps] 
          phi_stmt_907_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_907_update_start__ps] 
          phi_stmt_907_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_907_update_completed__ps] 
          phi_stmt_907_update_completed_ <-& (phi_stmt_907_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_907_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_907_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_907_update_start_)
          $T[phi_stmt_907_loopback_trigger] 
          phi_stmt_907_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_907_loopback_sample_req] 
          $T[phi_stmt_907_loopback_sample_req_ps] 
          phi_stmt_907_loopback_sample_req <-& (phi_stmt_907_loopback_sample_req_ps)
          phi_stmt_907_loopback_sample_req &-> ($null)
          $T[phi_stmt_907_entry_trigger] 
          phi_stmt_907_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_907_entry_sample_req] 
          $T[phi_stmt_907_entry_sample_req_ps] 
          phi_stmt_907_entry_sample_req <-& (phi_stmt_907_entry_sample_req_ps)
          phi_stmt_907_entry_sample_req &-> ($null)
          phi_stmt_907_update_start_ o<-& (phi_stmt_907_update_completed_ 0)
          phi_stmt_907_sample_start_ o<-& (phi_stmt_907_sample_completed_ 1)
          $T[phi_stmt_907_merged_reqs] 
          $T[phi_stmt_907_phi_mux_ack] 
          $T[phi_stmt_907_phi_mux_ack_ps] 
          phi_stmt_907_phi_mux_ack_ps <-& (phi_stmt_907_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_907_update_completed_)
          $T[R_ZERO_3_909_sample_start__ps] 
          $T[R_ZERO_3_909_sample_completed__ps] 
          $T[R_ZERO_3_909_update_start__ps] 
          $T[R_ZERO_3_909_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_909_sample_start_] 
          $T[R_ZERO_3_909_sample_completed_] 
          R_ZERO_3_909_sample_completed_ <-& (R_ZERO_3_909_sample_start_)
          $T[R_ZERO_3_909_update_start_] 
          $T [R_ZERO_3_909_update_completed_] $delay 
          R_ZERO_3_909_update_completed_ <-& (R_ZERO_3_909_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_909_sample_start_ <-& (R_ZERO_3_909_sample_start__ps)
          R_ZERO_3_909_update_start_ <-& (R_ZERO_3_909_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_909_sample_completed__ps <-& (R_ZERO_3_909_sample_completed_)
          R_ZERO_3_909_update_completed__ps <-& (R_ZERO_3_909_update_completed_)
          $T[R_next_pkt_priority_910_sample_start__ps] 
          $T[R_next_pkt_priority_910_sample_completed__ps] 
          $T[R_next_pkt_priority_910_update_start__ps] 
          $T[R_next_pkt_priority_910_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_910_sample_start_] 
          $T[R_next_pkt_priority_910_sample_completed_] 
          $T[R_next_pkt_priority_910_update_start_] 
          $T[R_next_pkt_priority_910_update_completed_] 
          ;;[R_next_pkt_priority_910_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_910_sample_start_ &-> (R_next_pkt_priority_910_Sample)
          R_next_pkt_priority_910_sample_completed_ <-& (R_next_pkt_priority_910_Sample)
          ;;[R_next_pkt_priority_910_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_910_update_start_ &-> (R_next_pkt_priority_910_Update)
          R_next_pkt_priority_910_update_completed_ <-& (R_next_pkt_priority_910_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_910_sample_start_ <-& (R_next_pkt_priority_910_sample_start__ps)
          R_next_pkt_priority_910_update_start_ <-& (R_next_pkt_priority_910_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_910_sample_completed__ps <-& (R_next_pkt_priority_910_sample_completed_)
          R_next_pkt_priority_910_update_completed__ps <-& (R_next_pkt_priority_910_update_completed_)
          $phisequencer [ phi_stmt_907_phi_seq] : 
          phi_stmt_907_entry_trigger R_ZERO_3_909_sample_start__ps R_ZERO_3_909_sample_completed__ps R_ZERO_3_909_update_start__ps R_ZERO_3_909_update_completed__ps phi_stmt_907_loopback_trigger R_next_pkt_priority_910_sample_start__ps R_next_pkt_priority_910_sample_completed__ps R_next_pkt_priority_910_update_start__ps R_next_pkt_priority_910_update_completed__ps :
          phi_stmt_907_sample_start__ps phi_stmt_907_sample_completed__ps phi_stmt_907_update_start__ps phi_stmt_907_update_completed__ps :
          phi_stmt_907_entry_sample_req_ps phi_stmt_907_loopback_sample_req_ps : 
          phi_stmt_907_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_907
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 283
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 284
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 285
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 286
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 287
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 288
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 289
          // volatile! 
          // Source expression
          // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
          // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
          // (p1_valid | p2_valid)
          // p1_valid
          // p2_valid
          // (p3_valid | p4_valid)
          // p3_valid
          // p4_valid
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 290
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 291
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 292
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 293
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 294
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 295
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 296
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 297
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_2
          $T[WPIPE_out_data_2_1090_sample_start_] 
          $T[WPIPE_out_data_2_1090_sample_completed_] 
          $T[WPIPE_out_data_2_1090_update_start_] 
          $T[WPIPE_out_data_2_1090_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_2_1090 with guard R_send_flag_1089
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_879_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_883_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_888_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_893_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_898_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_903_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_907_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_879_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_883_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_888_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_893_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_898_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_903_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_907_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          ;;[WPIPE_out_data_2_1090_Sample] 
          {
            // pipe write sample-start out_data_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_2_1090_Update] 
          {
            // pipe write update (complete) out_data_2
            $T [req] $T [ack] 
          }
          WPIPE_out_data_2_1090_sample_start_ &-> (WPIPE_out_data_2_1090_Sample)
          WPIPE_out_data_2_1090_sample_completed_ <-& (WPIPE_out_data_2_1090_Sample)
          WPIPE_out_data_2_1090_update_start_ <-& (WPIPE_out_data_2_1090_sample_completed_)
          WPIPE_out_data_2_1090_update_start_ &-> (WPIPE_out_data_2_1090_Update)
          WPIPE_out_data_2_1090_update_completed_ <-& (WPIPE_out_data_2_1090_Update)
          WPIPE_out_data_2_1090_sample_start_ o<-& (WPIPE_out_data_2_1090_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1090_sample_start_
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_879_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_883_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_888_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_893_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_898_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_903_update_completed_)
          WPIPE_out_data_2_1090_sample_start_ <-& (phi_stmt_907_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1090_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_879_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_883_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_888_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_893_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_898_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_903_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          phi_stmt_907_update_start_ o<-& (WPIPE_out_data_2_1090_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe out_data_2
          // read-dependencies for pipe out_data_2
          // write-dependencies for pipe out_data_2
          // signal write dependencies for out_data_2
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_877__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_877_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_877__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_877_loop_body : condition_evaluated
        $bind do_while_stmt_877__entry__  => do_while_stmt_877_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_877_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_877__exit__)
      }
      do_while_stmt_877__entry__ |-> (do_while_stmt_877)
      do_while_stmt_877__exit__ <-| (do_while_stmt_877)
      do_while_stmt_877__entry__ <-| (branch_block_stmt_876__entry__)
      do_while_stmt_877__exit__ |-> (branch_block_stmt_876__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 267
    // constant-object-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 263
    // constant-object-declarations for block %outputPort_2_Daemon
    //  file .Aa/switch2x2.opt.aa, line 258
    // constant-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 263
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 265
    // 1 
    $constant $W[konst_1094_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 267
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 268
    // ZERO_8
    $constant $W[R_ZERO_8_881_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 270
    // ZERO_33
    $constant $W[R_ZERO_33_885_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 272
    // ZERO_33
    $constant $W[R_ZERO_33_890_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 274
    // ZERO_33
    $constant $W[R_ZERO_33_895_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 276
    // ZERO_33
    $constant $W[R_ZERO_33_900_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 278
    // ZERO_3
    $constant $W[R_ZERO_3_905_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 280
    // ZERO_3
    $constant $W[R_ZERO_3_909_wire_constant] : $int<3> := _b000// 0
    // 32 
    $constant $W[konst_914_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_919_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_924_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_929_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_934_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_937_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_940_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_943_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_947_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_950_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_953_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_956_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 288
    // 0 
    $constant $W[konst_980_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_986_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_989_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_999_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1007_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1015_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1023_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1029_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1033_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1036_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1040_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1044_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1048_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1051_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1055_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1062_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1065_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1068_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1071_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1075_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1078_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1081_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1084_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 263
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 265
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 267
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 268
    $W[next_down_counter_994_882_buffered] : $int<8>
    // down_counter
    $W[down_counter_879] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 270
    // noblock_obuf_1_2
    $W[RPIPE_noblock_obuf_1_2_887_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_883] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 272
    // noblock_obuf_2_2
    $W[RPIPE_noblock_obuf_2_2_892_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_888] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 274
    // noblock_obuf_3_2
    $W[RPIPE_noblock_obuf_3_2_897_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_893] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 276
    // noblock_obuf_4_2
    $W[RPIPE_noblock_obuf_4_2_902_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_898] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 278
    $W[next_active_packet_970_906_buffered] : $int<3>
    // active_packet
    $W[active_packet_903] : $int<3>
    // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 280
    $W[next_pkt_priority_970_910_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_907] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 283
    // p1_valid
    $W[p1_valid_916] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 284
    // p2_valid
    $W[p2_valid_921] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 285
    // p3_valid
    $W[p3_valid_926] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 286
    // p4_valid
    $W[p4_valid_931] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 287
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_935_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_938_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_941_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_944_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_945_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_948_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_951_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_954_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_957_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_958_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_960] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 288
    // next_active_packet
    $W[next_active_packet_970] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_970] : $int<3>
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 289
    // (p1_valid | p2_valid)
    $intermediate $W[OR_u1_u1_974_wire] : $int<1>
    // (p3_valid | p4_valid)
    $intermediate $W[OR_u1_u1_977_wire] : $int<1>
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    $intermediate $W[OR_u1_u1_978_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_981_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_983] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 290
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_990_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_992_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_994] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 291
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_997_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1000_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1002] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 292
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1005_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1008_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1010] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 293
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1013_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1016_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1018] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 294
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1021_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1024_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1026] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 295
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1030_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1032_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1034_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1037_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1039_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1041_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1042_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1045_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1047_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1049_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1052_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1054_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1056_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1057_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1059] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 296
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1063_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1066_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1069_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1072_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1073_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1076_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1079_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1082_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1085_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1086_wire] : $int<1>
    // send_flag
    $W[send_flag_1088] : $int<1>
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 297
    // out_data_2
    // datapath-instances for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 263
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 265
    ==0? [do_while_stmt_877_branch] (konst_1094_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 267
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 268
    # := [next_down_counter_994_882_buf] (next_down_counter_994) (next_down_counter_994_882_buffered)     $fullrate
    $buffering $out next_down_counter_994_882_buf next_down_counter_994_882_buffered  1
    # $phi [phi_stmt_879] (R_ZERO_8_881_wire_constant next_down_counter_994_882_buffered) ( down_counter_879 ) $fullrate
    // $buffering  $out phi_stmt_879 down_counter_879 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 270
    // noblock_obuf_1_2
    $ioport $in [RPIPE_noblock_obuf_1_2_887_inst] (noblock_obuf_1_2) (RPIPE_noblock_obuf_1_2_887_wire) $guard ( read_from_1_1002 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_2_887_inst RPIPE_noblock_obuf_1_2_887_wire 1
    # $phi [phi_stmt_883] (R_ZERO_33_885_wire_constant RPIPE_noblock_obuf_1_2_887_wire) ( pkt_1_e_word_883 ) $fullrate
    // $buffering  $out phi_stmt_883 pkt_1_e_word_883 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 272
    // noblock_obuf_2_2
    $ioport $in [RPIPE_noblock_obuf_2_2_892_inst] (noblock_obuf_2_2) (RPIPE_noblock_obuf_2_2_892_wire) $guard ( read_from_2_1010 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_2_892_inst RPIPE_noblock_obuf_2_2_892_wire 1
    # $phi [phi_stmt_888] (R_ZERO_33_890_wire_constant RPIPE_noblock_obuf_2_2_892_wire) ( pkt_2_e_word_888 ) $fullrate
    // $buffering  $out phi_stmt_888 pkt_2_e_word_888 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 274
    // noblock_obuf_3_2
    $ioport $in [RPIPE_noblock_obuf_3_2_897_inst] (noblock_obuf_3_2) (RPIPE_noblock_obuf_3_2_897_wire) $guard ( read_from_3_1018 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_2_897_inst RPIPE_noblock_obuf_3_2_897_wire 1
    # $phi [phi_stmt_893] (R_ZERO_33_895_wire_constant RPIPE_noblock_obuf_3_2_897_wire) ( pkt_3_e_word_893 ) $fullrate
    // $buffering  $out phi_stmt_893 pkt_3_e_word_893 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 276
    // noblock_obuf_4_2
    $ioport $in [RPIPE_noblock_obuf_4_2_902_inst] (noblock_obuf_4_2) (RPIPE_noblock_obuf_4_2_902_wire) $guard ( read_from_4_1026 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_2_902_inst RPIPE_noblock_obuf_4_2_902_wire 1
    # $phi [phi_stmt_898] (R_ZERO_33_900_wire_constant RPIPE_noblock_obuf_4_2_902_wire) ( pkt_4_e_word_898 ) $fullrate
    // $buffering  $out phi_stmt_898 pkt_4_e_word_898 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 278
    # := [next_active_packet_970_906_buf] (next_active_packet_970) (next_active_packet_970_906_buffered)     $fullrate
    $buffering $out next_active_packet_970_906_buf next_active_packet_970_906_buffered  1
    # $phi [phi_stmt_903] (R_ZERO_3_905_wire_constant next_active_packet_970_906_buffered) ( active_packet_903 ) $fullrate
    // $buffering  $out phi_stmt_903 active_packet_903 2
    // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 280
    # := [next_pkt_priority_970_910_buf] (next_pkt_priority_970) (next_pkt_priority_970_910_buffered)     $fullrate
    $buffering $out next_pkt_priority_970_910_buf next_pkt_priority_970_910_buffered  1
    # $phi [phi_stmt_907] (R_ZERO_3_909_wire_constant next_pkt_priority_970_910_buffered) ( pkt_priority_907 ) $fullrate
    // $buffering  $out phi_stmt_907 pkt_priority_907 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 283
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_915_inst] (pkt_1_e_word_883 konst_914_wire_constant) (p1_valid_916)   $flowthrough 
    $delay BITSEL_u33_u1_915_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 284
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_920_inst] (pkt_2_e_word_888 konst_919_wire_constant) (p2_valid_921)   $flowthrough 
    $delay BITSEL_u33_u1_920_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 285
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_925_inst] (pkt_3_e_word_893 konst_924_wire_constant) (p3_valid_926)   $flowthrough 
    $delay BITSEL_u33_u1_925_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 286
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_930_inst] (pkt_4_e_word_898 konst_929_wire_constant) (p4_valid_931)   $flowthrough 
    $delay BITSEL_u33_u1_930_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 287
    // (active_packet == 1 )
    ==[EQ_u3_u1_935_inst] (active_packet_903 konst_934_wire_constant) (EQ_u3_u1_935_wire)   $flowthrough 
    $delay EQ_u3_u1_935_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_938_inst] (EQ_u3_u1_935_wire p1_valid_916 konst_937_wire_constant) (MUX_938_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_941_inst] (active_packet_903 konst_940_wire_constant) (EQ_u3_u1_941_wire)   $flowthrough 
    $delay EQ_u3_u1_941_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_944_inst] (EQ_u3_u1_941_wire p2_valid_921 konst_943_wire_constant) (MUX_944_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_945_inst] (MUX_938_wire MUX_944_wire) (OR_u1_u1_945_wire)   $flowthrough 
    $delay OR_u1_u1_945_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_948_inst] (active_packet_903 konst_947_wire_constant) (EQ_u3_u1_948_wire)   $flowthrough 
    $delay EQ_u3_u1_948_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_951_inst] (EQ_u3_u1_948_wire p3_valid_926 konst_950_wire_constant) (MUX_951_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_954_inst] (active_packet_903 konst_953_wire_constant) (EQ_u3_u1_954_wire)   $flowthrough 
    $delay EQ_u3_u1_954_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_957_inst] (EQ_u3_u1_954_wire p4_valid_931 konst_956_wire_constant) (MUX_957_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_958_inst] (MUX_951_wire MUX_957_wire) (OR_u1_u1_958_wire)   $flowthrough 
    $delay OR_u1_u1_958_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_959_inst] (OR_u1_u1_945_wire OR_u1_u1_958_wire) (valid_active_pkt_word_read_960)   $flowthrough 
    $delay OR_u1_u1_959_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 288
    $call [call_stmt_970_call] $module prioritySelect(down_counter_879 active_packet_903 pkt_priority_907 p1_valid_916 p2_valid_921 p3_valid_926 p4_valid_931) (next_active_packet_970 next_pkt_priority_970)   $flowthrough $fullrate
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 289
    // (p1_valid | p2_valid)
    |[OR_u1_u1_974_inst] (p1_valid_916 p2_valid_921) (OR_u1_u1_974_wire)   $flowthrough 
    $delay OR_u1_u1_974_inst 0
    // (p3_valid | p4_valid)
    |[OR_u1_u1_977_inst] (p3_valid_926 p4_valid_931) (OR_u1_u1_977_wire)   $flowthrough 
    $delay OR_u1_u1_977_inst 0
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    |[OR_u1_u1_978_inst] (OR_u1_u1_974_wire OR_u1_u1_977_wire) (OR_u1_u1_978_wire)   $flowthrough 
    $delay OR_u1_u1_978_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_981_inst] (down_counter_879 konst_980_wire_constant) (EQ_u8_u1_981_wire)   $flowthrough 
    $delay EQ_u8_u1_981_inst 0
    // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
    &[AND_u1_u1_982_inst] (OR_u1_u1_978_wire EQ_u8_u1_981_wire) (started_new_packet_983)   $flowthrough 
    $delay AND_u1_u1_982_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 290
    // (down_counter - 1 )
    -[SUB_u8_u8_990_inst] (down_counter_879 konst_989_wire_constant) (SUB_u8_u8_990_wire)   $flowthrough 
    $delay SUB_u8_u8_990_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_992_inst] (valid_active_pkt_word_read_960 SUB_u8_u8_990_wire down_counter_879) (MUX_992_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_993_inst] (started_new_packet_983 konst_986_wire_constant MUX_992_wire) (next_down_counter_994)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 291
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_997_inst] (p1_valid_916) (NOT_u1_u1_997_wire)   $flowthrough
    $delay NOT_u1_u1_997_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1000_inst] (next_active_packet_970 konst_999_wire_constant) (EQ_u3_u1_1000_wire)   $flowthrough 
    $delay EQ_u3_u1_1000_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1001_inst] (NOT_u1_u1_997_wire EQ_u3_u1_1000_wire) (read_from_1_1002)   $flowthrough 
    $delay OR_u1_u1_1001_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 292
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1005_inst] (p2_valid_921) (NOT_u1_u1_1005_wire)   $flowthrough
    $delay NOT_u1_u1_1005_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1008_inst] (next_active_packet_970 konst_1007_wire_constant) (EQ_u3_u1_1008_wire)   $flowthrough 
    $delay EQ_u3_u1_1008_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1009_inst] (NOT_u1_u1_1005_wire EQ_u3_u1_1008_wire) (read_from_2_1010)   $flowthrough 
    $delay OR_u1_u1_1009_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 293
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1013_inst] (p3_valid_926) (NOT_u1_u1_1013_wire)   $flowthrough
    $delay NOT_u1_u1_1013_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1016_inst] (next_active_packet_970 konst_1015_wire_constant) (EQ_u3_u1_1016_wire)   $flowthrough 
    $delay EQ_u3_u1_1016_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1017_inst] (NOT_u1_u1_1013_wire EQ_u3_u1_1016_wire) (read_from_3_1018)   $flowthrough 
    $delay OR_u1_u1_1017_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 294
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1021_inst] (p4_valid_931) (NOT_u1_u1_1021_wire)   $flowthrough
    $delay NOT_u1_u1_1021_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1024_inst] (next_active_packet_970 konst_1023_wire_constant) (EQ_u3_u1_1024_wire)   $flowthrough 
    $delay EQ_u3_u1_1024_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1025_inst] (NOT_u1_u1_1021_wire EQ_u3_u1_1024_wire) (read_from_4_1026)   $flowthrough 
    $delay OR_u1_u1_1025_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 295
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1030_inst] (next_active_packet_970 konst_1029_wire_constant) (EQ_u3_u1_1030_wire)   $flowthrough 
    $delay EQ_u3_u1_1030_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1032_inst] (pkt_1_e_word_883 31 0) (slice_1032_wire)  $flowthrough
    $delay slice_1032_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1034_inst] (EQ_u3_u1_1030_wire slice_1032_wire konst_1033_wire_constant) (MUX_1034_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1037_inst] (next_active_packet_970 konst_1036_wire_constant) (EQ_u3_u1_1037_wire)   $flowthrough 
    $delay EQ_u3_u1_1037_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1039_inst] (pkt_2_e_word_888 31 0) (slice_1039_wire)  $flowthrough
    $delay slice_1039_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1041_inst] (EQ_u3_u1_1037_wire slice_1039_wire konst_1040_wire_constant) (MUX_1041_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1042_inst] (MUX_1034_wire MUX_1041_wire) (OR_u32_u32_1042_wire)   $flowthrough 
    $delay OR_u32_u32_1042_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1045_inst] (next_active_packet_970 konst_1044_wire_constant) (EQ_u3_u1_1045_wire)   $flowthrough 
    $delay EQ_u3_u1_1045_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1047_inst] (pkt_3_e_word_893 31 0) (slice_1047_wire)  $flowthrough
    $delay slice_1047_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1049_inst] (EQ_u3_u1_1045_wire slice_1047_wire konst_1048_wire_constant) (MUX_1049_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1052_inst] (next_active_packet_970 konst_1051_wire_constant) (EQ_u3_u1_1052_wire)   $flowthrough 
    $delay EQ_u3_u1_1052_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1054_inst] (pkt_4_e_word_898 31 0) (slice_1054_wire)  $flowthrough
    $delay slice_1054_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1056_inst] (EQ_u3_u1_1052_wire slice_1054_wire konst_1055_wire_constant) (MUX_1056_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1057_inst] (MUX_1049_wire MUX_1056_wire) (OR_u32_u32_1057_wire)   $flowthrough 
    $delay OR_u32_u32_1057_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1058_inst] (OR_u32_u32_1042_wire OR_u32_u32_1057_wire) (data_to_out_1059)   $flowthrough 
    $delay OR_u32_u32_1058_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 296
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1063_inst] (next_active_packet_970 konst_1062_wire_constant) (EQ_u3_u1_1063_wire)   $flowthrough 
    $delay EQ_u3_u1_1063_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1066_inst] (EQ_u3_u1_1063_wire p1_valid_916 konst_1065_wire_constant) (MUX_1066_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1069_inst] (next_active_packet_970 konst_1068_wire_constant) (EQ_u3_u1_1069_wire)   $flowthrough 
    $delay EQ_u3_u1_1069_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1072_inst] (EQ_u3_u1_1069_wire p2_valid_921 konst_1071_wire_constant) (MUX_1072_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1073_inst] (MUX_1066_wire MUX_1072_wire) (OR_u1_u1_1073_wire)   $flowthrough 
    $delay OR_u1_u1_1073_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1076_inst] (next_active_packet_970 konst_1075_wire_constant) (EQ_u3_u1_1076_wire)   $flowthrough 
    $delay EQ_u3_u1_1076_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1079_inst] (EQ_u3_u1_1076_wire p3_valid_926 konst_1078_wire_constant) (MUX_1079_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1082_inst] (next_active_packet_970 konst_1081_wire_constant) (EQ_u3_u1_1082_wire)   $flowthrough 
    $delay EQ_u3_u1_1082_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1085_inst] (EQ_u3_u1_1082_wire p4_valid_931 konst_1084_wire_constant) (MUX_1085_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1086_inst] (MUX_1079_wire MUX_1085_wire) (OR_u1_u1_1086_wire)   $flowthrough 
    $delay OR_u1_u1_1086_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1087_inst] (OR_u1_u1_1073_wire OR_u1_u1_1086_wire) (send_flag_1088)   $flowthrough 
    $delay OR_u1_u1_1087_inst 0
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 297
    // out_data_2
    $ioport $out [WPIPE_out_data_2_1090_inst]  (data_to_out_1059) (out_data_2) $guard ( send_flag_1088 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_877
  //  file .Aa/switch2x2.opt.aa, line 265
  phi_stmt_879 <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_879_entry_sample_req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_879_loopback_sample_req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_879_phi_mux_ack)
  next_down_counter_994_882_buf <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_down_counter_882_Sample/req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_down_counter_882_Update/req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_down_counter_882_Sample/ack branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_down_counter_882_Update/ack)
  phi_stmt_883 <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_883_entry_sample_req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_883_loopback_sample_req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_883_phi_mux_ack)
  // noblock_obuf_1_2
  RPIPE_noblock_obuf_1_2_887_inst <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_1_2_887_Sample/rr branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_1_2_887_Update/cr) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_1_2_887_Sample/ra branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_1_2_887_Update/ca)
  phi_stmt_888 <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_888_entry_sample_req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_888_loopback_sample_req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_888_phi_mux_ack)
  // noblock_obuf_2_2
  RPIPE_noblock_obuf_2_2_892_inst <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_2_2_892_Sample/rr branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_2_2_892_Update/cr) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_2_2_892_Sample/ra branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_2_2_892_Update/ca)
  phi_stmt_893 <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_893_entry_sample_req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_893_loopback_sample_req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_893_phi_mux_ack)
  // noblock_obuf_3_2
  RPIPE_noblock_obuf_3_2_897_inst <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_3_2_897_Sample/rr branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_3_2_897_Update/cr) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_3_2_897_Sample/ra branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_3_2_897_Update/ca)
  phi_stmt_898 <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_898_entry_sample_req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_898_loopback_sample_req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_898_phi_mux_ack)
  // noblock_obuf_4_2
  RPIPE_noblock_obuf_4_2_902_inst <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_4_2_902_Sample/rr branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_4_2_902_Update/cr) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_4_2_902_Sample/ra branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/RPIPE_noblock_obuf_4_2_902_Update/ca)
  phi_stmt_903 <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_903_entry_sample_req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_903_loopback_sample_req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_903_phi_mux_ack)
  next_active_packet_970_906_buf <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_active_packet_906_Sample/req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_active_packet_906_Update/req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_active_packet_906_Sample/ack branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_active_packet_906_Update/ack)
  phi_stmt_907 <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_907_entry_sample_req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_907_loopback_sample_req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/phi_stmt_907_phi_mux_ack)
  next_pkt_priority_970_910_buf <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_pkt_priority_910_Sample/req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_pkt_priority_910_Update/req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_pkt_priority_910_Sample/ack branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/R_next_pkt_priority_910_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 283
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 284
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 285
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 286
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 287
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 288
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 289
  // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
  // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
  // (p1_valid | p2_valid)
  // p1_valid
  // p2_valid
  // (p3_valid | p4_valid)
  // p3_valid
  // p4_valid
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 290
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 291
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 292
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 293
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 294
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 295
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 296
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 297
  // data_to_out
  // out_data_2
  WPIPE_out_data_2_1090_inst <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/WPIPE_out_data_2_1090_Sample/req branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/WPIPE_out_data_2_1090_Update/req) (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/WPIPE_out_data_2_1090_Sample/ack branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/WPIPE_out_data_2_1090_Update/ack)
  do_while_stmt_877_branch <=> (branch_block_stmt_876/do_while_stmt_877/do_while_stmt_877_loop_body/condition_evaluated) (branch_block_stmt_876/do_while_stmt_877/loop_exit/ack branch_block_stmt_876/do_while_stmt_877/loop_taken/ack)
}
$module [outputPort_3_Daemon] 
{
  // pipe-declarations for block %outputPort_3_Daemon
  //  file .Aa/switch2x2.opt.aa, line 301
  // pipe-declarations for block %outputPort_3_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 306
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1098] // Branch Block  file .Aa/switch2x2.opt.aa, line 306
    {
      $P [branch_block_stmt_1098__entry__]
      branch_block_stmt_1098__entry__ <-| ($entry)
      $P [branch_block_stmt_1098__exit__]
      branch_block_stmt_1098__exit__ |-> ($exit)
      $P [do_while_stmt_1099__entry__] 
      $P [do_while_stmt_1099__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 308
      <o> [do_while_stmt_1099]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1099__entry__] 
        $P[do_while_stmt_1099__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1099_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1101
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1101_sample_start_] 
          $T[phi_stmt_1101_sample_completed_] 
          $T[phi_stmt_1101_update_start_] 
          $T[phi_stmt_1101_update_completed_] 
          $T[phi_stmt_1101_sample_start__ps] 
          phi_stmt_1101_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1101_sample_completed__ps] 
          phi_stmt_1101_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1101_update_start__ps] 
          phi_stmt_1101_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1101_update_completed__ps] 
          phi_stmt_1101_update_completed_ <-& (phi_stmt_1101_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1101_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1101_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1101_update_start_)
          $T[phi_stmt_1101_loopback_trigger] 
          phi_stmt_1101_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1101_loopback_sample_req] 
          $T[phi_stmt_1101_loopback_sample_req_ps] 
          phi_stmt_1101_loopback_sample_req <-& (phi_stmt_1101_loopback_sample_req_ps)
          phi_stmt_1101_loopback_sample_req &-> ($null)
          $T[phi_stmt_1101_entry_trigger] 
          phi_stmt_1101_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1101_entry_sample_req] 
          $T[phi_stmt_1101_entry_sample_req_ps] 
          phi_stmt_1101_entry_sample_req <-& (phi_stmt_1101_entry_sample_req_ps)
          phi_stmt_1101_entry_sample_req &-> ($null)
          phi_stmt_1101_update_start_ o<-& (phi_stmt_1101_update_completed_ 0)
          phi_stmt_1101_sample_start_ o<-& (phi_stmt_1101_sample_completed_ 1)
          $T[phi_stmt_1101_merged_reqs] 
          $T[phi_stmt_1101_phi_mux_ack] 
          $T[phi_stmt_1101_phi_mux_ack_ps] 
          phi_stmt_1101_phi_mux_ack_ps <-& (phi_stmt_1101_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1101_update_completed_)
          $T[R_ZERO_8_1103_sample_start__ps] 
          $T[R_ZERO_8_1103_sample_completed__ps] 
          $T[R_ZERO_8_1103_update_start__ps] 
          $T[R_ZERO_8_1103_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1103_sample_start_] 
          $T[R_ZERO_8_1103_sample_completed_] 
          R_ZERO_8_1103_sample_completed_ <-& (R_ZERO_8_1103_sample_start_)
          $T[R_ZERO_8_1103_update_start_] 
          $T [R_ZERO_8_1103_update_completed_] $delay 
          R_ZERO_8_1103_update_completed_ <-& (R_ZERO_8_1103_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1103_sample_start_ <-& (R_ZERO_8_1103_sample_start__ps)
          R_ZERO_8_1103_update_start_ <-& (R_ZERO_8_1103_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1103_sample_completed__ps <-& (R_ZERO_8_1103_sample_completed_)
          R_ZERO_8_1103_update_completed__ps <-& (R_ZERO_8_1103_update_completed_)
          $T[R_next_down_counter_1104_sample_start__ps] 
          $T[R_next_down_counter_1104_sample_completed__ps] 
          $T[R_next_down_counter_1104_update_start__ps] 
          $T[R_next_down_counter_1104_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1104_sample_start_] 
          $T[R_next_down_counter_1104_sample_completed_] 
          $T[R_next_down_counter_1104_update_start_] 
          $T[R_next_down_counter_1104_update_completed_] 
          ;;[R_next_down_counter_1104_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1104_sample_start_ &-> (R_next_down_counter_1104_Sample)
          R_next_down_counter_1104_sample_completed_ <-& (R_next_down_counter_1104_Sample)
          ;;[R_next_down_counter_1104_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1104_update_start_ &-> (R_next_down_counter_1104_Update)
          R_next_down_counter_1104_update_completed_ <-& (R_next_down_counter_1104_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1104_sample_start_ <-& (R_next_down_counter_1104_sample_start__ps)
          R_next_down_counter_1104_update_start_ <-& (R_next_down_counter_1104_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1104_sample_completed__ps <-& (R_next_down_counter_1104_sample_completed_)
          R_next_down_counter_1104_update_completed__ps <-& (R_next_down_counter_1104_update_completed_)
          $phisequencer [ phi_stmt_1101_phi_seq] : 
          phi_stmt_1101_entry_trigger R_ZERO_8_1103_sample_start__ps R_ZERO_8_1103_sample_completed__ps R_ZERO_8_1103_update_start__ps R_ZERO_8_1103_update_completed__ps phi_stmt_1101_loopback_trigger R_next_down_counter_1104_sample_start__ps R_next_down_counter_1104_sample_completed__ps R_next_down_counter_1104_update_start__ps R_next_down_counter_1104_update_completed__ps :
          phi_stmt_1101_sample_start__ps phi_stmt_1101_sample_completed__ps phi_stmt_1101_update_start__ps phi_stmt_1101_update_completed__ps :
          phi_stmt_1101_entry_sample_req_ps phi_stmt_1101_loopback_sample_req_ps : 
          phi_stmt_1101_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1101
          // start:  PHI statement phi_stmt_1105
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1105_sample_start_] 
          $T[phi_stmt_1105_sample_completed_] 
          $T[phi_stmt_1105_update_start_] 
          $T[phi_stmt_1105_update_completed_] 
          $T[phi_stmt_1105_sample_start__ps] 
          phi_stmt_1105_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1105_sample_completed__ps] 
          phi_stmt_1105_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1105_update_start__ps] 
          phi_stmt_1105_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1105_update_completed__ps] 
          phi_stmt_1105_update_completed_ <-& (phi_stmt_1105_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1105_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1105_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1105_update_start_)
          $T[phi_stmt_1105_loopback_trigger] 
          phi_stmt_1105_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1105_loopback_sample_req] 
          $T[phi_stmt_1105_loopback_sample_req_ps] 
          phi_stmt_1105_loopback_sample_req <-& (phi_stmt_1105_loopback_sample_req_ps)
          phi_stmt_1105_loopback_sample_req &-> ($null)
          $T[phi_stmt_1105_entry_trigger] 
          phi_stmt_1105_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1105_entry_sample_req] 
          $T[phi_stmt_1105_entry_sample_req_ps] 
          phi_stmt_1105_entry_sample_req <-& (phi_stmt_1105_entry_sample_req_ps)
          phi_stmt_1105_entry_sample_req &-> ($null)
          phi_stmt_1105_update_start_ o<-& (phi_stmt_1105_update_completed_ 0)
          phi_stmt_1105_sample_start_ o<-& (phi_stmt_1105_sample_completed_ 1)
          $T[phi_stmt_1105_merged_reqs] 
          $T[phi_stmt_1105_phi_mux_ack] 
          $T[phi_stmt_1105_phi_mux_ack_ps] 
          phi_stmt_1105_phi_mux_ack_ps <-& (phi_stmt_1105_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1105_update_completed_)
          $T[R_ZERO_33_1107_sample_start__ps] 
          $T[R_ZERO_33_1107_sample_completed__ps] 
          $T[R_ZERO_33_1107_update_start__ps] 
          $T[R_ZERO_33_1107_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1107_sample_start_] 
          $T[R_ZERO_33_1107_sample_completed_] 
          R_ZERO_33_1107_sample_completed_ <-& (R_ZERO_33_1107_sample_start_)
          $T[R_ZERO_33_1107_update_start_] 
          $T [R_ZERO_33_1107_update_completed_] $delay 
          R_ZERO_33_1107_update_completed_ <-& (R_ZERO_33_1107_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1107_sample_start_ <-& (R_ZERO_33_1107_sample_start__ps)
          R_ZERO_33_1107_update_start_ <-& (R_ZERO_33_1107_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1107_sample_completed__ps <-& (R_ZERO_33_1107_sample_completed_)
          R_ZERO_33_1107_update_completed__ps <-& (R_ZERO_33_1107_update_completed_)
          $T[RPIPE_noblock_obuf_1_3_1109_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1109_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_3_1109_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1109_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_3
          $T[RPIPE_noblock_obuf_1_3_1109_sample_start_] 
          $T[RPIPE_noblock_obuf_1_3_1109_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_3_1109_update_start_] 
          $T[RPIPE_noblock_obuf_1_3_1109_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_3_1109 with guard R_read_from_1_1108
          // root phi_stmt_1105 not in visited_elements
          // root phi_stmt_1110 not in visited_elements
          // root phi_stmt_1115 not in visited_elements
          // root phi_stmt_1120 not in visited_elements
          // root phi_stmt_1125 not in visited_elements
          // root phi_stmt_1129 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_3_1109_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_3_1109_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_3_1109_sample_start_ &-> (RPIPE_noblock_obuf_1_3_1109_Sample)
          RPIPE_noblock_obuf_1_3_1109_sample_completed_ <-& (RPIPE_noblock_obuf_1_3_1109_Sample)
          RPIPE_noblock_obuf_1_3_1109_update_start_ <-& (RPIPE_noblock_obuf_1_3_1109_sample_completed_)
          RPIPE_noblock_obuf_1_3_1109_update_start_ &-> (RPIPE_noblock_obuf_1_3_1109_Update)
          RPIPE_noblock_obuf_1_3_1109_update_completed_ <-& (RPIPE_noblock_obuf_1_3_1109_Update)
          RPIPE_noblock_obuf_1_3_1109_sample_start_ o<-& (RPIPE_noblock_obuf_1_3_1109_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_3_1109_sample_start_ <-& (RPIPE_noblock_obuf_1_3_1109_sample_start__ps)
          RPIPE_noblock_obuf_1_3_1109_update_start_ <-& (RPIPE_noblock_obuf_1_3_1109_update_start__ps)
          // RAW reenables for noblock_obuf_1_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_3_1109_sample_completed__ps <-& (RPIPE_noblock_obuf_1_3_1109_sample_completed_)
          RPIPE_noblock_obuf_1_3_1109_update_completed__ps <-& (RPIPE_noblock_obuf_1_3_1109_update_completed_)
          $phisequencer [ phi_stmt_1105_phi_seq] : 
          phi_stmt_1105_entry_trigger R_ZERO_33_1107_sample_start__ps R_ZERO_33_1107_sample_completed__ps R_ZERO_33_1107_update_start__ps R_ZERO_33_1107_update_completed__ps phi_stmt_1105_loopback_trigger RPIPE_noblock_obuf_1_3_1109_sample_start__ps RPIPE_noblock_obuf_1_3_1109_sample_completed__ps RPIPE_noblock_obuf_1_3_1109_update_start__ps RPIPE_noblock_obuf_1_3_1109_update_completed__ps :
          phi_stmt_1105_sample_start__ps phi_stmt_1105_sample_completed__ps phi_stmt_1105_update_start__ps phi_stmt_1105_update_completed__ps :
          phi_stmt_1105_entry_sample_req_ps phi_stmt_1105_loopback_sample_req_ps : 
          phi_stmt_1105_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1105
          // start:  PHI statement phi_stmt_1110
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1110_sample_start_] 
          $T[phi_stmt_1110_sample_completed_] 
          $T[phi_stmt_1110_update_start_] 
          $T[phi_stmt_1110_update_completed_] 
          $T[phi_stmt_1110_sample_start__ps] 
          phi_stmt_1110_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1110_sample_completed__ps] 
          phi_stmt_1110_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1110_update_start__ps] 
          phi_stmt_1110_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1110_update_completed__ps] 
          phi_stmt_1110_update_completed_ <-& (phi_stmt_1110_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1110_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1110_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1110_update_start_)
          $T[phi_stmt_1110_loopback_trigger] 
          phi_stmt_1110_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1110_loopback_sample_req] 
          $T[phi_stmt_1110_loopback_sample_req_ps] 
          phi_stmt_1110_loopback_sample_req <-& (phi_stmt_1110_loopback_sample_req_ps)
          phi_stmt_1110_loopback_sample_req &-> ($null)
          $T[phi_stmt_1110_entry_trigger] 
          phi_stmt_1110_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1110_entry_sample_req] 
          $T[phi_stmt_1110_entry_sample_req_ps] 
          phi_stmt_1110_entry_sample_req <-& (phi_stmt_1110_entry_sample_req_ps)
          phi_stmt_1110_entry_sample_req &-> ($null)
          phi_stmt_1110_update_start_ o<-& (phi_stmt_1110_update_completed_ 0)
          phi_stmt_1110_sample_start_ o<-& (phi_stmt_1110_sample_completed_ 1)
          $T[phi_stmt_1110_merged_reqs] 
          $T[phi_stmt_1110_phi_mux_ack] 
          $T[phi_stmt_1110_phi_mux_ack_ps] 
          phi_stmt_1110_phi_mux_ack_ps <-& (phi_stmt_1110_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1110_update_completed_)
          $T[R_ZERO_33_1112_sample_start__ps] 
          $T[R_ZERO_33_1112_sample_completed__ps] 
          $T[R_ZERO_33_1112_update_start__ps] 
          $T[R_ZERO_33_1112_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1112_sample_start_] 
          $T[R_ZERO_33_1112_sample_completed_] 
          R_ZERO_33_1112_sample_completed_ <-& (R_ZERO_33_1112_sample_start_)
          $T[R_ZERO_33_1112_update_start_] 
          $T [R_ZERO_33_1112_update_completed_] $delay 
          R_ZERO_33_1112_update_completed_ <-& (R_ZERO_33_1112_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1112_sample_start_ <-& (R_ZERO_33_1112_sample_start__ps)
          R_ZERO_33_1112_update_start_ <-& (R_ZERO_33_1112_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1112_sample_completed__ps <-& (R_ZERO_33_1112_sample_completed_)
          R_ZERO_33_1112_update_completed__ps <-& (R_ZERO_33_1112_update_completed_)
          $T[RPIPE_noblock_obuf_2_3_1114_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1114_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_3_1114_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1114_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_3
          $T[RPIPE_noblock_obuf_2_3_1114_sample_start_] 
          $T[RPIPE_noblock_obuf_2_3_1114_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_3_1114_update_start_] 
          $T[RPIPE_noblock_obuf_2_3_1114_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_3_1114 with guard R_read_from_2_1113
          // root phi_stmt_1110 not in visited_elements
          // root phi_stmt_1115 not in visited_elements
          // root phi_stmt_1120 not in visited_elements
          // root phi_stmt_1125 not in visited_elements
          // root phi_stmt_1129 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_3_1114_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_3_1114_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_3_1114_sample_start_ &-> (RPIPE_noblock_obuf_2_3_1114_Sample)
          RPIPE_noblock_obuf_2_3_1114_sample_completed_ <-& (RPIPE_noblock_obuf_2_3_1114_Sample)
          RPIPE_noblock_obuf_2_3_1114_update_start_ <-& (RPIPE_noblock_obuf_2_3_1114_sample_completed_)
          RPIPE_noblock_obuf_2_3_1114_update_start_ &-> (RPIPE_noblock_obuf_2_3_1114_Update)
          RPIPE_noblock_obuf_2_3_1114_update_completed_ <-& (RPIPE_noblock_obuf_2_3_1114_Update)
          RPIPE_noblock_obuf_2_3_1114_sample_start_ o<-& (RPIPE_noblock_obuf_2_3_1114_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_3_1114_sample_start_ <-& (RPIPE_noblock_obuf_2_3_1114_sample_start__ps)
          RPIPE_noblock_obuf_2_3_1114_update_start_ <-& (RPIPE_noblock_obuf_2_3_1114_update_start__ps)
          // RAW reenables for noblock_obuf_2_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_3_1114_sample_completed__ps <-& (RPIPE_noblock_obuf_2_3_1114_sample_completed_)
          RPIPE_noblock_obuf_2_3_1114_update_completed__ps <-& (RPIPE_noblock_obuf_2_3_1114_update_completed_)
          $phisequencer [ phi_stmt_1110_phi_seq] : 
          phi_stmt_1110_entry_trigger R_ZERO_33_1112_sample_start__ps R_ZERO_33_1112_sample_completed__ps R_ZERO_33_1112_update_start__ps R_ZERO_33_1112_update_completed__ps phi_stmt_1110_loopback_trigger RPIPE_noblock_obuf_2_3_1114_sample_start__ps RPIPE_noblock_obuf_2_3_1114_sample_completed__ps RPIPE_noblock_obuf_2_3_1114_update_start__ps RPIPE_noblock_obuf_2_3_1114_update_completed__ps :
          phi_stmt_1110_sample_start__ps phi_stmt_1110_sample_completed__ps phi_stmt_1110_update_start__ps phi_stmt_1110_update_completed__ps :
          phi_stmt_1110_entry_sample_req_ps phi_stmt_1110_loopback_sample_req_ps : 
          phi_stmt_1110_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1110
          // start:  PHI statement phi_stmt_1115
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1115_sample_start_] 
          $T[phi_stmt_1115_sample_completed_] 
          $T[phi_stmt_1115_update_start_] 
          $T[phi_stmt_1115_update_completed_] 
          $T[phi_stmt_1115_sample_start__ps] 
          phi_stmt_1115_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1115_sample_completed__ps] 
          phi_stmt_1115_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1115_update_start__ps] 
          phi_stmt_1115_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1115_update_completed__ps] 
          phi_stmt_1115_update_completed_ <-& (phi_stmt_1115_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1115_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1115_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1115_update_start_)
          $T[phi_stmt_1115_loopback_trigger] 
          phi_stmt_1115_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1115_loopback_sample_req] 
          $T[phi_stmt_1115_loopback_sample_req_ps] 
          phi_stmt_1115_loopback_sample_req <-& (phi_stmt_1115_loopback_sample_req_ps)
          phi_stmt_1115_loopback_sample_req &-> ($null)
          $T[phi_stmt_1115_entry_trigger] 
          phi_stmt_1115_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1115_entry_sample_req] 
          $T[phi_stmt_1115_entry_sample_req_ps] 
          phi_stmt_1115_entry_sample_req <-& (phi_stmt_1115_entry_sample_req_ps)
          phi_stmt_1115_entry_sample_req &-> ($null)
          phi_stmt_1115_update_start_ o<-& (phi_stmt_1115_update_completed_ 0)
          phi_stmt_1115_sample_start_ o<-& (phi_stmt_1115_sample_completed_ 1)
          $T[phi_stmt_1115_merged_reqs] 
          $T[phi_stmt_1115_phi_mux_ack] 
          $T[phi_stmt_1115_phi_mux_ack_ps] 
          phi_stmt_1115_phi_mux_ack_ps <-& (phi_stmt_1115_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1115_update_completed_)
          $T[R_ZERO_33_1117_sample_start__ps] 
          $T[R_ZERO_33_1117_sample_completed__ps] 
          $T[R_ZERO_33_1117_update_start__ps] 
          $T[R_ZERO_33_1117_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1117_sample_start_] 
          $T[R_ZERO_33_1117_sample_completed_] 
          R_ZERO_33_1117_sample_completed_ <-& (R_ZERO_33_1117_sample_start_)
          $T[R_ZERO_33_1117_update_start_] 
          $T [R_ZERO_33_1117_update_completed_] $delay 
          R_ZERO_33_1117_update_completed_ <-& (R_ZERO_33_1117_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1117_sample_start_ <-& (R_ZERO_33_1117_sample_start__ps)
          R_ZERO_33_1117_update_start_ <-& (R_ZERO_33_1117_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1117_sample_completed__ps <-& (R_ZERO_33_1117_sample_completed_)
          R_ZERO_33_1117_update_completed__ps <-& (R_ZERO_33_1117_update_completed_)
          $T[RPIPE_noblock_obuf_3_3_1119_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1119_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_3_1119_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1119_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_3
          $T[RPIPE_noblock_obuf_3_3_1119_sample_start_] 
          $T[RPIPE_noblock_obuf_3_3_1119_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_3_1119_update_start_] 
          $T[RPIPE_noblock_obuf_3_3_1119_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_3_1119 with guard R_read_from_3_1118
          // root phi_stmt_1115 not in visited_elements
          // root phi_stmt_1120 not in visited_elements
          // root phi_stmt_1125 not in visited_elements
          // root phi_stmt_1129 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_3_1119_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_3_1119_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_3_1119_sample_start_ &-> (RPIPE_noblock_obuf_3_3_1119_Sample)
          RPIPE_noblock_obuf_3_3_1119_sample_completed_ <-& (RPIPE_noblock_obuf_3_3_1119_Sample)
          RPIPE_noblock_obuf_3_3_1119_update_start_ <-& (RPIPE_noblock_obuf_3_3_1119_sample_completed_)
          RPIPE_noblock_obuf_3_3_1119_update_start_ &-> (RPIPE_noblock_obuf_3_3_1119_Update)
          RPIPE_noblock_obuf_3_3_1119_update_completed_ <-& (RPIPE_noblock_obuf_3_3_1119_Update)
          RPIPE_noblock_obuf_3_3_1119_sample_start_ o<-& (RPIPE_noblock_obuf_3_3_1119_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_3_1119_sample_start_ <-& (RPIPE_noblock_obuf_3_3_1119_sample_start__ps)
          RPIPE_noblock_obuf_3_3_1119_update_start_ <-& (RPIPE_noblock_obuf_3_3_1119_update_start__ps)
          // RAW reenables for noblock_obuf_3_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_3_1119_sample_completed__ps <-& (RPIPE_noblock_obuf_3_3_1119_sample_completed_)
          RPIPE_noblock_obuf_3_3_1119_update_completed__ps <-& (RPIPE_noblock_obuf_3_3_1119_update_completed_)
          $phisequencer [ phi_stmt_1115_phi_seq] : 
          phi_stmt_1115_entry_trigger R_ZERO_33_1117_sample_start__ps R_ZERO_33_1117_sample_completed__ps R_ZERO_33_1117_update_start__ps R_ZERO_33_1117_update_completed__ps phi_stmt_1115_loopback_trigger RPIPE_noblock_obuf_3_3_1119_sample_start__ps RPIPE_noblock_obuf_3_3_1119_sample_completed__ps RPIPE_noblock_obuf_3_3_1119_update_start__ps RPIPE_noblock_obuf_3_3_1119_update_completed__ps :
          phi_stmt_1115_sample_start__ps phi_stmt_1115_sample_completed__ps phi_stmt_1115_update_start__ps phi_stmt_1115_update_completed__ps :
          phi_stmt_1115_entry_sample_req_ps phi_stmt_1115_loopback_sample_req_ps : 
          phi_stmt_1115_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1115
          // start:  PHI statement phi_stmt_1120
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1120_sample_start_] 
          $T[phi_stmt_1120_sample_completed_] 
          $T[phi_stmt_1120_update_start_] 
          $T[phi_stmt_1120_update_completed_] 
          $T[phi_stmt_1120_sample_start__ps] 
          phi_stmt_1120_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1120_sample_completed__ps] 
          phi_stmt_1120_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1120_update_start__ps] 
          phi_stmt_1120_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1120_update_completed__ps] 
          phi_stmt_1120_update_completed_ <-& (phi_stmt_1120_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1120_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1120_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1120_update_start_)
          $T[phi_stmt_1120_loopback_trigger] 
          phi_stmt_1120_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1120_loopback_sample_req] 
          $T[phi_stmt_1120_loopback_sample_req_ps] 
          phi_stmt_1120_loopback_sample_req <-& (phi_stmt_1120_loopback_sample_req_ps)
          phi_stmt_1120_loopback_sample_req &-> ($null)
          $T[phi_stmt_1120_entry_trigger] 
          phi_stmt_1120_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1120_entry_sample_req] 
          $T[phi_stmt_1120_entry_sample_req_ps] 
          phi_stmt_1120_entry_sample_req <-& (phi_stmt_1120_entry_sample_req_ps)
          phi_stmt_1120_entry_sample_req &-> ($null)
          phi_stmt_1120_update_start_ o<-& (phi_stmt_1120_update_completed_ 0)
          phi_stmt_1120_sample_start_ o<-& (phi_stmt_1120_sample_completed_ 1)
          $T[phi_stmt_1120_merged_reqs] 
          $T[phi_stmt_1120_phi_mux_ack] 
          $T[phi_stmt_1120_phi_mux_ack_ps] 
          phi_stmt_1120_phi_mux_ack_ps <-& (phi_stmt_1120_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1120_update_completed_)
          $T[R_ZERO_33_1122_sample_start__ps] 
          $T[R_ZERO_33_1122_sample_completed__ps] 
          $T[R_ZERO_33_1122_update_start__ps] 
          $T[R_ZERO_33_1122_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1122_sample_start_] 
          $T[R_ZERO_33_1122_sample_completed_] 
          R_ZERO_33_1122_sample_completed_ <-& (R_ZERO_33_1122_sample_start_)
          $T[R_ZERO_33_1122_update_start_] 
          $T [R_ZERO_33_1122_update_completed_] $delay 
          R_ZERO_33_1122_update_completed_ <-& (R_ZERO_33_1122_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1122_sample_start_ <-& (R_ZERO_33_1122_sample_start__ps)
          R_ZERO_33_1122_update_start_ <-& (R_ZERO_33_1122_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1122_sample_completed__ps <-& (R_ZERO_33_1122_sample_completed_)
          R_ZERO_33_1122_update_completed__ps <-& (R_ZERO_33_1122_update_completed_)
          $T[RPIPE_noblock_obuf_4_3_1124_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1124_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_3_1124_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1124_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_3
          $T[RPIPE_noblock_obuf_4_3_1124_sample_start_] 
          $T[RPIPE_noblock_obuf_4_3_1124_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_3_1124_update_start_] 
          $T[RPIPE_noblock_obuf_4_3_1124_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_3_1124 with guard R_read_from_4_1123
          // root phi_stmt_1120 not in visited_elements
          // root phi_stmt_1125 not in visited_elements
          // root phi_stmt_1129 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_3_1124_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_3_1124_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_3_1124_sample_start_ &-> (RPIPE_noblock_obuf_4_3_1124_Sample)
          RPIPE_noblock_obuf_4_3_1124_sample_completed_ <-& (RPIPE_noblock_obuf_4_3_1124_Sample)
          RPIPE_noblock_obuf_4_3_1124_update_start_ <-& (RPIPE_noblock_obuf_4_3_1124_sample_completed_)
          RPIPE_noblock_obuf_4_3_1124_update_start_ &-> (RPIPE_noblock_obuf_4_3_1124_Update)
          RPIPE_noblock_obuf_4_3_1124_update_completed_ <-& (RPIPE_noblock_obuf_4_3_1124_Update)
          RPIPE_noblock_obuf_4_3_1124_sample_start_ o<-& (RPIPE_noblock_obuf_4_3_1124_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_3_1124_sample_start_ <-& (RPIPE_noblock_obuf_4_3_1124_sample_start__ps)
          RPIPE_noblock_obuf_4_3_1124_update_start_ <-& (RPIPE_noblock_obuf_4_3_1124_update_start__ps)
          // RAW reenables for noblock_obuf_4_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_3_1124_sample_completed__ps <-& (RPIPE_noblock_obuf_4_3_1124_sample_completed_)
          RPIPE_noblock_obuf_4_3_1124_update_completed__ps <-& (RPIPE_noblock_obuf_4_3_1124_update_completed_)
          $phisequencer [ phi_stmt_1120_phi_seq] : 
          phi_stmt_1120_entry_trigger R_ZERO_33_1122_sample_start__ps R_ZERO_33_1122_sample_completed__ps R_ZERO_33_1122_update_start__ps R_ZERO_33_1122_update_completed__ps phi_stmt_1120_loopback_trigger RPIPE_noblock_obuf_4_3_1124_sample_start__ps RPIPE_noblock_obuf_4_3_1124_sample_completed__ps RPIPE_noblock_obuf_4_3_1124_update_start__ps RPIPE_noblock_obuf_4_3_1124_update_completed__ps :
          phi_stmt_1120_sample_start__ps phi_stmt_1120_sample_completed__ps phi_stmt_1120_update_start__ps phi_stmt_1120_update_completed__ps :
          phi_stmt_1120_entry_sample_req_ps phi_stmt_1120_loopback_sample_req_ps : 
          phi_stmt_1120_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1120
          // start:  PHI statement phi_stmt_1125
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1125_sample_start_] 
          $T[phi_stmt_1125_sample_completed_] 
          $T[phi_stmt_1125_update_start_] 
          $T[phi_stmt_1125_update_completed_] 
          $T[phi_stmt_1125_sample_start__ps] 
          phi_stmt_1125_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1125_sample_completed__ps] 
          phi_stmt_1125_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1125_update_start__ps] 
          phi_stmt_1125_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1125_update_completed__ps] 
          phi_stmt_1125_update_completed_ <-& (phi_stmt_1125_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1125_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1125_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1125_update_start_)
          $T[phi_stmt_1125_loopback_trigger] 
          phi_stmt_1125_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1125_loopback_sample_req] 
          $T[phi_stmt_1125_loopback_sample_req_ps] 
          phi_stmt_1125_loopback_sample_req <-& (phi_stmt_1125_loopback_sample_req_ps)
          phi_stmt_1125_loopback_sample_req &-> ($null)
          $T[phi_stmt_1125_entry_trigger] 
          phi_stmt_1125_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1125_entry_sample_req] 
          $T[phi_stmt_1125_entry_sample_req_ps] 
          phi_stmt_1125_entry_sample_req <-& (phi_stmt_1125_entry_sample_req_ps)
          phi_stmt_1125_entry_sample_req &-> ($null)
          phi_stmt_1125_update_start_ o<-& (phi_stmt_1125_update_completed_ 0)
          phi_stmt_1125_sample_start_ o<-& (phi_stmt_1125_sample_completed_ 1)
          $T[phi_stmt_1125_merged_reqs] 
          $T[phi_stmt_1125_phi_mux_ack] 
          $T[phi_stmt_1125_phi_mux_ack_ps] 
          phi_stmt_1125_phi_mux_ack_ps <-& (phi_stmt_1125_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1125_update_completed_)
          $T[R_ZERO_3_1127_sample_start__ps] 
          $T[R_ZERO_3_1127_sample_completed__ps] 
          $T[R_ZERO_3_1127_update_start__ps] 
          $T[R_ZERO_3_1127_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1127_sample_start_] 
          $T[R_ZERO_3_1127_sample_completed_] 
          R_ZERO_3_1127_sample_completed_ <-& (R_ZERO_3_1127_sample_start_)
          $T[R_ZERO_3_1127_update_start_] 
          $T [R_ZERO_3_1127_update_completed_] $delay 
          R_ZERO_3_1127_update_completed_ <-& (R_ZERO_3_1127_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1127_sample_start_ <-& (R_ZERO_3_1127_sample_start__ps)
          R_ZERO_3_1127_update_start_ <-& (R_ZERO_3_1127_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1127_sample_completed__ps <-& (R_ZERO_3_1127_sample_completed_)
          R_ZERO_3_1127_update_completed__ps <-& (R_ZERO_3_1127_update_completed_)
          $T[R_next_active_packet_1128_sample_start__ps] 
          $T[R_next_active_packet_1128_sample_completed__ps] 
          $T[R_next_active_packet_1128_update_start__ps] 
          $T[R_next_active_packet_1128_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1128_sample_start_] 
          $T[R_next_active_packet_1128_sample_completed_] 
          $T[R_next_active_packet_1128_update_start_] 
          $T[R_next_active_packet_1128_update_completed_] 
          ;;[R_next_active_packet_1128_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1128_sample_start_ &-> (R_next_active_packet_1128_Sample)
          R_next_active_packet_1128_sample_completed_ <-& (R_next_active_packet_1128_Sample)
          ;;[R_next_active_packet_1128_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1128_update_start_ &-> (R_next_active_packet_1128_Update)
          R_next_active_packet_1128_update_completed_ <-& (R_next_active_packet_1128_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1128_sample_start_ <-& (R_next_active_packet_1128_sample_start__ps)
          R_next_active_packet_1128_update_start_ <-& (R_next_active_packet_1128_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1128_sample_completed__ps <-& (R_next_active_packet_1128_sample_completed_)
          R_next_active_packet_1128_update_completed__ps <-& (R_next_active_packet_1128_update_completed_)
          $phisequencer [ phi_stmt_1125_phi_seq] : 
          phi_stmt_1125_entry_trigger R_ZERO_3_1127_sample_start__ps R_ZERO_3_1127_sample_completed__ps R_ZERO_3_1127_update_start__ps R_ZERO_3_1127_update_completed__ps phi_stmt_1125_loopback_trigger R_next_active_packet_1128_sample_start__ps R_next_active_packet_1128_sample_completed__ps R_next_active_packet_1128_update_start__ps R_next_active_packet_1128_update_completed__ps :
          phi_stmt_1125_sample_start__ps phi_stmt_1125_sample_completed__ps phi_stmt_1125_update_start__ps phi_stmt_1125_update_completed__ps :
          phi_stmt_1125_entry_sample_req_ps phi_stmt_1125_loopback_sample_req_ps : 
          phi_stmt_1125_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1125
          // start:  PHI statement phi_stmt_1129
          // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1129_sample_start_] 
          $T[phi_stmt_1129_sample_completed_] 
          $T[phi_stmt_1129_update_start_] 
          $T[phi_stmt_1129_update_completed_] 
          $T[phi_stmt_1129_sample_start__ps] 
          phi_stmt_1129_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1129_sample_completed__ps] 
          phi_stmt_1129_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1129_update_start__ps] 
          phi_stmt_1129_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1129_update_completed__ps] 
          phi_stmt_1129_update_completed_ <-& (phi_stmt_1129_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1129_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1129_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1129_update_start_)
          $T[phi_stmt_1129_loopback_trigger] 
          phi_stmt_1129_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1129_loopback_sample_req] 
          $T[phi_stmt_1129_loopback_sample_req_ps] 
          phi_stmt_1129_loopback_sample_req <-& (phi_stmt_1129_loopback_sample_req_ps)
          phi_stmt_1129_loopback_sample_req &-> ($null)
          $T[phi_stmt_1129_entry_trigger] 
          phi_stmt_1129_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1129_entry_sample_req] 
          $T[phi_stmt_1129_entry_sample_req_ps] 
          phi_stmt_1129_entry_sample_req <-& (phi_stmt_1129_entry_sample_req_ps)
          phi_stmt_1129_entry_sample_req &-> ($null)
          phi_stmt_1129_update_start_ o<-& (phi_stmt_1129_update_completed_ 0)
          phi_stmt_1129_sample_start_ o<-& (phi_stmt_1129_sample_completed_ 1)
          $T[phi_stmt_1129_merged_reqs] 
          $T[phi_stmt_1129_phi_mux_ack] 
          $T[phi_stmt_1129_phi_mux_ack_ps] 
          phi_stmt_1129_phi_mux_ack_ps <-& (phi_stmt_1129_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1129_update_completed_)
          $T[R_ZERO_3_1131_sample_start__ps] 
          $T[R_ZERO_3_1131_sample_completed__ps] 
          $T[R_ZERO_3_1131_update_start__ps] 
          $T[R_ZERO_3_1131_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1131_sample_start_] 
          $T[R_ZERO_3_1131_sample_completed_] 
          R_ZERO_3_1131_sample_completed_ <-& (R_ZERO_3_1131_sample_start_)
          $T[R_ZERO_3_1131_update_start_] 
          $T [R_ZERO_3_1131_update_completed_] $delay 
          R_ZERO_3_1131_update_completed_ <-& (R_ZERO_3_1131_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1131_sample_start_ <-& (R_ZERO_3_1131_sample_start__ps)
          R_ZERO_3_1131_update_start_ <-& (R_ZERO_3_1131_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1131_sample_completed__ps <-& (R_ZERO_3_1131_sample_completed_)
          R_ZERO_3_1131_update_completed__ps <-& (R_ZERO_3_1131_update_completed_)
          $T[R_next_pkt_priority_1132_sample_start__ps] 
          $T[R_next_pkt_priority_1132_sample_completed__ps] 
          $T[R_next_pkt_priority_1132_update_start__ps] 
          $T[R_next_pkt_priority_1132_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_1132_sample_start_] 
          $T[R_next_pkt_priority_1132_sample_completed_] 
          $T[R_next_pkt_priority_1132_update_start_] 
          $T[R_next_pkt_priority_1132_update_completed_] 
          ;;[R_next_pkt_priority_1132_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_1132_sample_start_ &-> (R_next_pkt_priority_1132_Sample)
          R_next_pkt_priority_1132_sample_completed_ <-& (R_next_pkt_priority_1132_Sample)
          ;;[R_next_pkt_priority_1132_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_1132_update_start_ &-> (R_next_pkt_priority_1132_Update)
          R_next_pkt_priority_1132_update_completed_ <-& (R_next_pkt_priority_1132_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_1132_sample_start_ <-& (R_next_pkt_priority_1132_sample_start__ps)
          R_next_pkt_priority_1132_update_start_ <-& (R_next_pkt_priority_1132_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_1132_sample_completed__ps <-& (R_next_pkt_priority_1132_sample_completed_)
          R_next_pkt_priority_1132_update_completed__ps <-& (R_next_pkt_priority_1132_update_completed_)
          $phisequencer [ phi_stmt_1129_phi_seq] : 
          phi_stmt_1129_entry_trigger R_ZERO_3_1131_sample_start__ps R_ZERO_3_1131_sample_completed__ps R_ZERO_3_1131_update_start__ps R_ZERO_3_1131_update_completed__ps phi_stmt_1129_loopback_trigger R_next_pkt_priority_1132_sample_start__ps R_next_pkt_priority_1132_sample_completed__ps R_next_pkt_priority_1132_update_start__ps R_next_pkt_priority_1132_update_completed__ps :
          phi_stmt_1129_sample_start__ps phi_stmt_1129_sample_completed__ps phi_stmt_1129_update_start__ps phi_stmt_1129_update_completed__ps :
          phi_stmt_1129_entry_sample_req_ps phi_stmt_1129_loopback_sample_req_ps : 
          phi_stmt_1129_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1129
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 326
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 327
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 328
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 329
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 330
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 331
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 332
          // volatile! 
          // Source expression
          // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
          // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
          // (p1_valid | p2_valid)
          // p1_valid
          // p2_valid
          // (p3_valid | p4_valid)
          // p3_valid
          // p4_valid
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 333
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 334
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 335
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 336
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 337
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 338
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 339
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 340
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_3
          $T[WPIPE_out_data_3_1312_sample_start_] 
          $T[WPIPE_out_data_3_1312_sample_completed_] 
          $T[WPIPE_out_data_3_1312_update_start_] 
          $T[WPIPE_out_data_3_1312_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_3_1312 with guard R_send_flag_1311
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1101_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1105_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1110_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1115_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1120_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1125_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1129_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1101_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1105_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1110_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1115_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1120_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1125_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1129_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          ;;[WPIPE_out_data_3_1312_Sample] 
          {
            // pipe write sample-start out_data_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_3_1312_Update] 
          {
            // pipe write update (complete) out_data_3
            $T [req] $T [ack] 
          }
          WPIPE_out_data_3_1312_sample_start_ &-> (WPIPE_out_data_3_1312_Sample)
          WPIPE_out_data_3_1312_sample_completed_ <-& (WPIPE_out_data_3_1312_Sample)
          WPIPE_out_data_3_1312_update_start_ <-& (WPIPE_out_data_3_1312_sample_completed_)
          WPIPE_out_data_3_1312_update_start_ &-> (WPIPE_out_data_3_1312_Update)
          WPIPE_out_data_3_1312_update_completed_ <-& (WPIPE_out_data_3_1312_Update)
          WPIPE_out_data_3_1312_sample_start_ o<-& (WPIPE_out_data_3_1312_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1312_sample_start_
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1101_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1105_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1110_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1115_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1120_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1125_update_completed_)
          WPIPE_out_data_3_1312_sample_start_ <-& (phi_stmt_1129_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1312_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1101_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1105_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1110_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1115_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1120_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1125_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          phi_stmt_1129_update_start_ o<-& (WPIPE_out_data_3_1312_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
          // pipe read/write dependencies for pipe out_data_3
          // read-dependencies for pipe out_data_3
          // write-dependencies for pipe out_data_3
          // signal write dependencies for out_data_3
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1099__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1099_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1099__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1099_loop_body : condition_evaluated
        $bind do_while_stmt_1099__entry__  => do_while_stmt_1099_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1099_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1099__exit__)
      }
      do_while_stmt_1099__entry__ |-> (do_while_stmt_1099)
      do_while_stmt_1099__exit__ <-| (do_while_stmt_1099)
      do_while_stmt_1099__entry__ <-| (branch_block_stmt_1098__entry__)
      do_while_stmt_1099__exit__ |-> (branch_block_stmt_1098__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 310
    // constant-object-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 306
    // constant-object-declarations for block %outputPort_3_Daemon
    //  file .Aa/switch2x2.opt.aa, line 301
    // constant-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 306
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 308
    // 1 
    $constant $W[konst_1316_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 310
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 311
    // ZERO_8
    $constant $W[R_ZERO_8_1103_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 313
    // ZERO_33
    $constant $W[R_ZERO_33_1107_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // ZERO_33
    $constant $W[R_ZERO_33_1112_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // ZERO_33
    $constant $W[R_ZERO_33_1117_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // ZERO_33
    $constant $W[R_ZERO_33_1122_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 321
    // ZERO_3
    $constant $W[R_ZERO_3_1127_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    // ZERO_3
    $constant $W[R_ZERO_3_1131_wire_constant] : $int<3> := _b000// 0
    // 32 
    $constant $W[konst_1136_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1141_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1146_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1151_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1156_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1159_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1162_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1165_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1169_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1172_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1175_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1178_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 331
    // 0 
    $constant $W[konst_1202_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_1208_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1211_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1221_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1229_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1237_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1245_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1251_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1255_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1258_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1262_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1266_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1270_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1273_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1277_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1284_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1287_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1290_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1293_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1297_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1300_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1303_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1306_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 306
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 308
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 310
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 311
    $W[next_down_counter_1216_1104_buffered] : $int<8>
    // down_counter
    $W[down_counter_1101] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 313
    // noblock_obuf_1_3
    $W[RPIPE_noblock_obuf_1_3_1109_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1105] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // noblock_obuf_2_3
    $W[RPIPE_noblock_obuf_2_3_1114_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1110] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // noblock_obuf_3_3
    $W[RPIPE_noblock_obuf_3_3_1119_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1115] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // noblock_obuf_4_3
    $W[RPIPE_noblock_obuf_4_3_1124_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1120] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 321
    $W[next_active_packet_1192_1128_buffered] : $int<3>
    // active_packet
    $W[active_packet_1125] : $int<3>
    // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    $W[next_pkt_priority_1192_1132_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_1129] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 326
    // p1_valid
    $W[p1_valid_1138] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 327
    // p2_valid
    $W[p2_valid_1143] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 328
    // p3_valid
    $W[p3_valid_1148] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 329
    // p4_valid
    $W[p4_valid_1153] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 330
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1157_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1160_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1163_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1166_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1167_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1170_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1173_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1176_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1179_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1180_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1182] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 331
    // next_active_packet
    $W[next_active_packet_1192] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_1192] : $int<3>
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 332
    // (p1_valid | p2_valid)
    $intermediate $W[OR_u1_u1_1196_wire] : $int<1>
    // (p3_valid | p4_valid)
    $intermediate $W[OR_u1_u1_1199_wire] : $int<1>
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    $intermediate $W[OR_u1_u1_1200_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1203_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1205] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 333
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1212_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1214_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1216] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 334
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1219_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1222_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1224] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 335
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1227_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1230_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1232] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 336
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1235_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1238_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1240] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 337
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1243_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1246_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1248] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 338
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1252_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1254_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1256_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1259_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1261_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1263_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1264_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1267_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1269_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1271_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1274_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1276_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1278_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1279_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1281] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 339
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1285_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1288_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1291_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1294_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1295_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1298_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1301_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1304_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1307_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1308_wire] : $int<1>
    // send_flag
    $W[send_flag_1310] : $int<1>
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 340
    // out_data_3
    // datapath-instances for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 306
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 308
    ==0? [do_while_stmt_1099_branch] (konst_1316_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 310
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 311
    # := [next_down_counter_1216_1104_buf] (next_down_counter_1216) (next_down_counter_1216_1104_buffered)     $fullrate
    $buffering $out next_down_counter_1216_1104_buf next_down_counter_1216_1104_buffered  1
    # $phi [phi_stmt_1101] (R_ZERO_8_1103_wire_constant next_down_counter_1216_1104_buffered) ( down_counter_1101 ) $fullrate
    // $buffering  $out phi_stmt_1101 down_counter_1101 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 313
    // noblock_obuf_1_3
    $ioport $in [RPIPE_noblock_obuf_1_3_1109_inst] (noblock_obuf_1_3) (RPIPE_noblock_obuf_1_3_1109_wire) $guard ( read_from_1_1224 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_3_1109_inst RPIPE_noblock_obuf_1_3_1109_wire 1
    # $phi [phi_stmt_1105] (R_ZERO_33_1107_wire_constant RPIPE_noblock_obuf_1_3_1109_wire) ( pkt_1_e_word_1105 ) $fullrate
    // $buffering  $out phi_stmt_1105 pkt_1_e_word_1105 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // noblock_obuf_2_3
    $ioport $in [RPIPE_noblock_obuf_2_3_1114_inst] (noblock_obuf_2_3) (RPIPE_noblock_obuf_2_3_1114_wire) $guard ( read_from_2_1232 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_3_1114_inst RPIPE_noblock_obuf_2_3_1114_wire 1
    # $phi [phi_stmt_1110] (R_ZERO_33_1112_wire_constant RPIPE_noblock_obuf_2_3_1114_wire) ( pkt_2_e_word_1110 ) $fullrate
    // $buffering  $out phi_stmt_1110 pkt_2_e_word_1110 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // noblock_obuf_3_3
    $ioport $in [RPIPE_noblock_obuf_3_3_1119_inst] (noblock_obuf_3_3) (RPIPE_noblock_obuf_3_3_1119_wire) $guard ( read_from_3_1240 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_3_1119_inst RPIPE_noblock_obuf_3_3_1119_wire 1
    # $phi [phi_stmt_1115] (R_ZERO_33_1117_wire_constant RPIPE_noblock_obuf_3_3_1119_wire) ( pkt_3_e_word_1115 ) $fullrate
    // $buffering  $out phi_stmt_1115 pkt_3_e_word_1115 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // noblock_obuf_4_3
    $ioport $in [RPIPE_noblock_obuf_4_3_1124_inst] (noblock_obuf_4_3) (RPIPE_noblock_obuf_4_3_1124_wire) $guard ( read_from_4_1248 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_3_1124_inst RPIPE_noblock_obuf_4_3_1124_wire 1
    # $phi [phi_stmt_1120] (R_ZERO_33_1122_wire_constant RPIPE_noblock_obuf_4_3_1124_wire) ( pkt_4_e_word_1120 ) $fullrate
    // $buffering  $out phi_stmt_1120 pkt_4_e_word_1120 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 321
    # := [next_active_packet_1192_1128_buf] (next_active_packet_1192) (next_active_packet_1192_1128_buffered)     $fullrate
    $buffering $out next_active_packet_1192_1128_buf next_active_packet_1192_1128_buffered  1
    # $phi [phi_stmt_1125] (R_ZERO_3_1127_wire_constant next_active_packet_1192_1128_buffered) ( active_packet_1125 ) $fullrate
    // $buffering  $out phi_stmt_1125 active_packet_1125 2
    // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    # := [next_pkt_priority_1192_1132_buf] (next_pkt_priority_1192) (next_pkt_priority_1192_1132_buffered)     $fullrate
    $buffering $out next_pkt_priority_1192_1132_buf next_pkt_priority_1192_1132_buffered  1
    # $phi [phi_stmt_1129] (R_ZERO_3_1131_wire_constant next_pkt_priority_1192_1132_buffered) ( pkt_priority_1129 ) $fullrate
    // $buffering  $out phi_stmt_1129 pkt_priority_1129 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 326
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1137_inst] (pkt_1_e_word_1105 konst_1136_wire_constant) (p1_valid_1138)   $flowthrough 
    $delay BITSEL_u33_u1_1137_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 327
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1142_inst] (pkt_2_e_word_1110 konst_1141_wire_constant) (p2_valid_1143)   $flowthrough 
    $delay BITSEL_u33_u1_1142_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 328
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1147_inst] (pkt_3_e_word_1115 konst_1146_wire_constant) (p3_valid_1148)   $flowthrough 
    $delay BITSEL_u33_u1_1147_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 329
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1152_inst] (pkt_4_e_word_1120 konst_1151_wire_constant) (p4_valid_1153)   $flowthrough 
    $delay BITSEL_u33_u1_1152_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 330
    // (active_packet == 1 )
    ==[EQ_u3_u1_1157_inst] (active_packet_1125 konst_1156_wire_constant) (EQ_u3_u1_1157_wire)   $flowthrough 
    $delay EQ_u3_u1_1157_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1160_inst] (EQ_u3_u1_1157_wire p1_valid_1138 konst_1159_wire_constant) (MUX_1160_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1163_inst] (active_packet_1125 konst_1162_wire_constant) (EQ_u3_u1_1163_wire)   $flowthrough 
    $delay EQ_u3_u1_1163_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1166_inst] (EQ_u3_u1_1163_wire p2_valid_1143 konst_1165_wire_constant) (MUX_1166_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1167_inst] (MUX_1160_wire MUX_1166_wire) (OR_u1_u1_1167_wire)   $flowthrough 
    $delay OR_u1_u1_1167_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1170_inst] (active_packet_1125 konst_1169_wire_constant) (EQ_u3_u1_1170_wire)   $flowthrough 
    $delay EQ_u3_u1_1170_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1173_inst] (EQ_u3_u1_1170_wire p3_valid_1148 konst_1172_wire_constant) (MUX_1173_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1176_inst] (active_packet_1125 konst_1175_wire_constant) (EQ_u3_u1_1176_wire)   $flowthrough 
    $delay EQ_u3_u1_1176_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1179_inst] (EQ_u3_u1_1176_wire p4_valid_1153 konst_1178_wire_constant) (MUX_1179_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1180_inst] (MUX_1173_wire MUX_1179_wire) (OR_u1_u1_1180_wire)   $flowthrough 
    $delay OR_u1_u1_1180_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1181_inst] (OR_u1_u1_1167_wire OR_u1_u1_1180_wire) (valid_active_pkt_word_read_1182)   $flowthrough 
    $delay OR_u1_u1_1181_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 331
    $call [call_stmt_1192_call] $module prioritySelect(down_counter_1101 active_packet_1125 pkt_priority_1129 p1_valid_1138 p2_valid_1143 p3_valid_1148 p4_valid_1153) (next_active_packet_1192 next_pkt_priority_1192)   $flowthrough $fullrate
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 332
    // (p1_valid | p2_valid)
    |[OR_u1_u1_1196_inst] (p1_valid_1138 p2_valid_1143) (OR_u1_u1_1196_wire)   $flowthrough 
    $delay OR_u1_u1_1196_inst 0
    // (p3_valid | p4_valid)
    |[OR_u1_u1_1199_inst] (p3_valid_1148 p4_valid_1153) (OR_u1_u1_1199_wire)   $flowthrough 
    $delay OR_u1_u1_1199_inst 0
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    |[OR_u1_u1_1200_inst] (OR_u1_u1_1196_wire OR_u1_u1_1199_wire) (OR_u1_u1_1200_wire)   $flowthrough 
    $delay OR_u1_u1_1200_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1203_inst] (down_counter_1101 konst_1202_wire_constant) (EQ_u8_u1_1203_wire)   $flowthrough 
    $delay EQ_u8_u1_1203_inst 0
    // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
    &[AND_u1_u1_1204_inst] (OR_u1_u1_1200_wire EQ_u8_u1_1203_wire) (started_new_packet_1205)   $flowthrough 
    $delay AND_u1_u1_1204_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 333
    // (down_counter - 1 )
    -[SUB_u8_u8_1212_inst] (down_counter_1101 konst_1211_wire_constant) (SUB_u8_u8_1212_wire)   $flowthrough 
    $delay SUB_u8_u8_1212_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1214_inst] (valid_active_pkt_word_read_1182 SUB_u8_u8_1212_wire down_counter_1101) (MUX_1214_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1215_inst] (started_new_packet_1205 konst_1208_wire_constant MUX_1214_wire) (next_down_counter_1216)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 334
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1219_inst] (p1_valid_1138) (NOT_u1_u1_1219_wire)   $flowthrough
    $delay NOT_u1_u1_1219_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1222_inst] (next_active_packet_1192 konst_1221_wire_constant) (EQ_u3_u1_1222_wire)   $flowthrough 
    $delay EQ_u3_u1_1222_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1223_inst] (NOT_u1_u1_1219_wire EQ_u3_u1_1222_wire) (read_from_1_1224)   $flowthrough 
    $delay OR_u1_u1_1223_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 335
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1227_inst] (p2_valid_1143) (NOT_u1_u1_1227_wire)   $flowthrough
    $delay NOT_u1_u1_1227_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1230_inst] (next_active_packet_1192 konst_1229_wire_constant) (EQ_u3_u1_1230_wire)   $flowthrough 
    $delay EQ_u3_u1_1230_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1231_inst] (NOT_u1_u1_1227_wire EQ_u3_u1_1230_wire) (read_from_2_1232)   $flowthrough 
    $delay OR_u1_u1_1231_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 336
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1235_inst] (p3_valid_1148) (NOT_u1_u1_1235_wire)   $flowthrough
    $delay NOT_u1_u1_1235_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1238_inst] (next_active_packet_1192 konst_1237_wire_constant) (EQ_u3_u1_1238_wire)   $flowthrough 
    $delay EQ_u3_u1_1238_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1239_inst] (NOT_u1_u1_1235_wire EQ_u3_u1_1238_wire) (read_from_3_1240)   $flowthrough 
    $delay OR_u1_u1_1239_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 337
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1243_inst] (p4_valid_1153) (NOT_u1_u1_1243_wire)   $flowthrough
    $delay NOT_u1_u1_1243_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1246_inst] (next_active_packet_1192 konst_1245_wire_constant) (EQ_u3_u1_1246_wire)   $flowthrough 
    $delay EQ_u3_u1_1246_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1247_inst] (NOT_u1_u1_1243_wire EQ_u3_u1_1246_wire) (read_from_4_1248)   $flowthrough 
    $delay OR_u1_u1_1247_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 338
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1252_inst] (next_active_packet_1192 konst_1251_wire_constant) (EQ_u3_u1_1252_wire)   $flowthrough 
    $delay EQ_u3_u1_1252_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1254_inst] (pkt_1_e_word_1105 31 0) (slice_1254_wire)  $flowthrough
    $delay slice_1254_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1256_inst] (EQ_u3_u1_1252_wire slice_1254_wire konst_1255_wire_constant) (MUX_1256_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1259_inst] (next_active_packet_1192 konst_1258_wire_constant) (EQ_u3_u1_1259_wire)   $flowthrough 
    $delay EQ_u3_u1_1259_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1261_inst] (pkt_2_e_word_1110 31 0) (slice_1261_wire)  $flowthrough
    $delay slice_1261_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1263_inst] (EQ_u3_u1_1259_wire slice_1261_wire konst_1262_wire_constant) (MUX_1263_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1264_inst] (MUX_1256_wire MUX_1263_wire) (OR_u32_u32_1264_wire)   $flowthrough 
    $delay OR_u32_u32_1264_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1267_inst] (next_active_packet_1192 konst_1266_wire_constant) (EQ_u3_u1_1267_wire)   $flowthrough 
    $delay EQ_u3_u1_1267_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1269_inst] (pkt_3_e_word_1115 31 0) (slice_1269_wire)  $flowthrough
    $delay slice_1269_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1271_inst] (EQ_u3_u1_1267_wire slice_1269_wire konst_1270_wire_constant) (MUX_1271_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1274_inst] (next_active_packet_1192 konst_1273_wire_constant) (EQ_u3_u1_1274_wire)   $flowthrough 
    $delay EQ_u3_u1_1274_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1276_inst] (pkt_4_e_word_1120 31 0) (slice_1276_wire)  $flowthrough
    $delay slice_1276_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1278_inst] (EQ_u3_u1_1274_wire slice_1276_wire konst_1277_wire_constant) (MUX_1278_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1279_inst] (MUX_1271_wire MUX_1278_wire) (OR_u32_u32_1279_wire)   $flowthrough 
    $delay OR_u32_u32_1279_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1280_inst] (OR_u32_u32_1264_wire OR_u32_u32_1279_wire) (data_to_out_1281)   $flowthrough 
    $delay OR_u32_u32_1280_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 339
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1285_inst] (next_active_packet_1192 konst_1284_wire_constant) (EQ_u3_u1_1285_wire)   $flowthrough 
    $delay EQ_u3_u1_1285_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1288_inst] (EQ_u3_u1_1285_wire p1_valid_1138 konst_1287_wire_constant) (MUX_1288_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1291_inst] (next_active_packet_1192 konst_1290_wire_constant) (EQ_u3_u1_1291_wire)   $flowthrough 
    $delay EQ_u3_u1_1291_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1294_inst] (EQ_u3_u1_1291_wire p2_valid_1143 konst_1293_wire_constant) (MUX_1294_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1295_inst] (MUX_1288_wire MUX_1294_wire) (OR_u1_u1_1295_wire)   $flowthrough 
    $delay OR_u1_u1_1295_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1298_inst] (next_active_packet_1192 konst_1297_wire_constant) (EQ_u3_u1_1298_wire)   $flowthrough 
    $delay EQ_u3_u1_1298_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1301_inst] (EQ_u3_u1_1298_wire p3_valid_1148 konst_1300_wire_constant) (MUX_1301_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1304_inst] (next_active_packet_1192 konst_1303_wire_constant) (EQ_u3_u1_1304_wire)   $flowthrough 
    $delay EQ_u3_u1_1304_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1307_inst] (EQ_u3_u1_1304_wire p4_valid_1153 konst_1306_wire_constant) (MUX_1307_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1308_inst] (MUX_1301_wire MUX_1307_wire) (OR_u1_u1_1308_wire)   $flowthrough 
    $delay OR_u1_u1_1308_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1309_inst] (OR_u1_u1_1295_wire OR_u1_u1_1308_wire) (send_flag_1310)   $flowthrough 
    $delay OR_u1_u1_1309_inst 0
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 340
    // out_data_3
    $ioport $out [WPIPE_out_data_3_1312_inst]  (data_to_out_1281) (out_data_3) $guard ( send_flag_1310 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1099
  //  file .Aa/switch2x2.opt.aa, line 308
  phi_stmt_1101 <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1101_entry_sample_req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1101_loopback_sample_req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1101_phi_mux_ack)
  next_down_counter_1216_1104_buf <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_down_counter_1104_Sample/req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_down_counter_1104_Update/req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_down_counter_1104_Sample/ack branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_down_counter_1104_Update/ack)
  phi_stmt_1105 <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1105_entry_sample_req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1105_loopback_sample_req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1105_phi_mux_ack)
  // noblock_obuf_1_3
  RPIPE_noblock_obuf_1_3_1109_inst <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_1_3_1109_Sample/rr branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_1_3_1109_Update/cr) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_1_3_1109_Sample/ra branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_1_3_1109_Update/ca)
  phi_stmt_1110 <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1110_entry_sample_req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1110_loopback_sample_req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1110_phi_mux_ack)
  // noblock_obuf_2_3
  RPIPE_noblock_obuf_2_3_1114_inst <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_2_3_1114_Sample/rr branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_2_3_1114_Update/cr) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_2_3_1114_Sample/ra branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_2_3_1114_Update/ca)
  phi_stmt_1115 <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1115_entry_sample_req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1115_loopback_sample_req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1115_phi_mux_ack)
  // noblock_obuf_3_3
  RPIPE_noblock_obuf_3_3_1119_inst <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_3_3_1119_Sample/rr branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_3_3_1119_Update/cr) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_3_3_1119_Sample/ra branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_3_3_1119_Update/ca)
  phi_stmt_1120 <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1120_entry_sample_req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1120_loopback_sample_req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1120_phi_mux_ack)
  // noblock_obuf_4_3
  RPIPE_noblock_obuf_4_3_1124_inst <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_4_3_1124_Sample/rr branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_4_3_1124_Update/cr) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_4_3_1124_Sample/ra branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/RPIPE_noblock_obuf_4_3_1124_Update/ca)
  phi_stmt_1125 <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1125_entry_sample_req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1125_loopback_sample_req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1125_phi_mux_ack)
  next_active_packet_1192_1128_buf <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_active_packet_1128_Sample/req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_active_packet_1128_Update/req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_active_packet_1128_Sample/ack branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_active_packet_1128_Update/ack)
  phi_stmt_1129 <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1129_entry_sample_req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1129_loopback_sample_req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/phi_stmt_1129_phi_mux_ack)
  next_pkt_priority_1192_1132_buf <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_pkt_priority_1132_Sample/req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_pkt_priority_1132_Update/req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_pkt_priority_1132_Sample/ack branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/R_next_pkt_priority_1132_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 326
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 327
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 328
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 329
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 330
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 331
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 332
  // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
  // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
  // (p1_valid | p2_valid)
  // p1_valid
  // p2_valid
  // (p3_valid | p4_valid)
  // p3_valid
  // p4_valid
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 333
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 334
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 335
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 336
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 337
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 338
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 339
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 340
  // data_to_out
  // out_data_3
  WPIPE_out_data_3_1312_inst <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/WPIPE_out_data_3_1312_Sample/req branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/WPIPE_out_data_3_1312_Update/req) (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/WPIPE_out_data_3_1312_Sample/ack branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/WPIPE_out_data_3_1312_Update/ack)
  do_while_stmt_1099_branch <=> (branch_block_stmt_1098/do_while_stmt_1099/do_while_stmt_1099_loop_body/condition_evaluated) (branch_block_stmt_1098/do_while_stmt_1099/loop_exit/ack branch_block_stmt_1098/do_while_stmt_1099/loop_taken/ack)
}
$module [outputPort_4_Daemon] 
{
  // pipe-declarations for block %outputPort_4_Daemon
  //  file .Aa/switch2x2.opt.aa, line 344
  // pipe-declarations for block %outputPort_4_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 349
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1320] // Branch Block  file .Aa/switch2x2.opt.aa, line 349
    {
      $P [branch_block_stmt_1320__entry__]
      branch_block_stmt_1320__entry__ <-| ($entry)
      $P [branch_block_stmt_1320__exit__]
      branch_block_stmt_1320__exit__ |-> ($exit)
      $P [do_while_stmt_1321__entry__] 
      $P [do_while_stmt_1321__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 351
      <o> [do_while_stmt_1321]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1321__entry__] 
        $P[do_while_stmt_1321__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1321_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1323
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1323_sample_start_] 
          $T[phi_stmt_1323_sample_completed_] 
          $T[phi_stmt_1323_update_start_] 
          $T[phi_stmt_1323_update_completed_] 
          $T[phi_stmt_1323_sample_start__ps] 
          phi_stmt_1323_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1323_sample_completed__ps] 
          phi_stmt_1323_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1323_update_start__ps] 
          phi_stmt_1323_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1323_update_completed__ps] 
          phi_stmt_1323_update_completed_ <-& (phi_stmt_1323_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1323_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1323_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1323_update_start_)
          $T[phi_stmt_1323_loopback_trigger] 
          phi_stmt_1323_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1323_loopback_sample_req] 
          $T[phi_stmt_1323_loopback_sample_req_ps] 
          phi_stmt_1323_loopback_sample_req <-& (phi_stmt_1323_loopback_sample_req_ps)
          phi_stmt_1323_loopback_sample_req &-> ($null)
          $T[phi_stmt_1323_entry_trigger] 
          phi_stmt_1323_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1323_entry_sample_req] 
          $T[phi_stmt_1323_entry_sample_req_ps] 
          phi_stmt_1323_entry_sample_req <-& (phi_stmt_1323_entry_sample_req_ps)
          phi_stmt_1323_entry_sample_req &-> ($null)
          phi_stmt_1323_update_start_ o<-& (phi_stmt_1323_update_completed_ 0)
          phi_stmt_1323_sample_start_ o<-& (phi_stmt_1323_sample_completed_ 1)
          $T[phi_stmt_1323_merged_reqs] 
          $T[phi_stmt_1323_phi_mux_ack] 
          $T[phi_stmt_1323_phi_mux_ack_ps] 
          phi_stmt_1323_phi_mux_ack_ps <-& (phi_stmt_1323_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1323_update_completed_)
          $T[R_ZERO_8_1325_sample_start__ps] 
          $T[R_ZERO_8_1325_sample_completed__ps] 
          $T[R_ZERO_8_1325_update_start__ps] 
          $T[R_ZERO_8_1325_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1325_sample_start_] 
          $T[R_ZERO_8_1325_sample_completed_] 
          R_ZERO_8_1325_sample_completed_ <-& (R_ZERO_8_1325_sample_start_)
          $T[R_ZERO_8_1325_update_start_] 
          $T [R_ZERO_8_1325_update_completed_] $delay 
          R_ZERO_8_1325_update_completed_ <-& (R_ZERO_8_1325_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1325_sample_start_ <-& (R_ZERO_8_1325_sample_start__ps)
          R_ZERO_8_1325_update_start_ <-& (R_ZERO_8_1325_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1325_sample_completed__ps <-& (R_ZERO_8_1325_sample_completed_)
          R_ZERO_8_1325_update_completed__ps <-& (R_ZERO_8_1325_update_completed_)
          $T[R_next_down_counter_1326_sample_start__ps] 
          $T[R_next_down_counter_1326_sample_completed__ps] 
          $T[R_next_down_counter_1326_update_start__ps] 
          $T[R_next_down_counter_1326_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1326_sample_start_] 
          $T[R_next_down_counter_1326_sample_completed_] 
          $T[R_next_down_counter_1326_update_start_] 
          $T[R_next_down_counter_1326_update_completed_] 
          ;;[R_next_down_counter_1326_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1326_sample_start_ &-> (R_next_down_counter_1326_Sample)
          R_next_down_counter_1326_sample_completed_ <-& (R_next_down_counter_1326_Sample)
          ;;[R_next_down_counter_1326_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1326_update_start_ &-> (R_next_down_counter_1326_Update)
          R_next_down_counter_1326_update_completed_ <-& (R_next_down_counter_1326_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1326_sample_start_ <-& (R_next_down_counter_1326_sample_start__ps)
          R_next_down_counter_1326_update_start_ <-& (R_next_down_counter_1326_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1326_sample_completed__ps <-& (R_next_down_counter_1326_sample_completed_)
          R_next_down_counter_1326_update_completed__ps <-& (R_next_down_counter_1326_update_completed_)
          $phisequencer [ phi_stmt_1323_phi_seq] : 
          phi_stmt_1323_entry_trigger R_ZERO_8_1325_sample_start__ps R_ZERO_8_1325_sample_completed__ps R_ZERO_8_1325_update_start__ps R_ZERO_8_1325_update_completed__ps phi_stmt_1323_loopback_trigger R_next_down_counter_1326_sample_start__ps R_next_down_counter_1326_sample_completed__ps R_next_down_counter_1326_update_start__ps R_next_down_counter_1326_update_completed__ps :
          phi_stmt_1323_sample_start__ps phi_stmt_1323_sample_completed__ps phi_stmt_1323_update_start__ps phi_stmt_1323_update_completed__ps :
          phi_stmt_1323_entry_sample_req_ps phi_stmt_1323_loopback_sample_req_ps : 
          phi_stmt_1323_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1323
          // start:  PHI statement phi_stmt_1327
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1327_sample_start_] 
          $T[phi_stmt_1327_sample_completed_] 
          $T[phi_stmt_1327_update_start_] 
          $T[phi_stmt_1327_update_completed_] 
          $T[phi_stmt_1327_sample_start__ps] 
          phi_stmt_1327_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1327_sample_completed__ps] 
          phi_stmt_1327_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1327_update_start__ps] 
          phi_stmt_1327_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1327_update_completed__ps] 
          phi_stmt_1327_update_completed_ <-& (phi_stmt_1327_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1327_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1327_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1327_update_start_)
          $T[phi_stmt_1327_loopback_trigger] 
          phi_stmt_1327_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1327_loopback_sample_req] 
          $T[phi_stmt_1327_loopback_sample_req_ps] 
          phi_stmt_1327_loopback_sample_req <-& (phi_stmt_1327_loopback_sample_req_ps)
          phi_stmt_1327_loopback_sample_req &-> ($null)
          $T[phi_stmt_1327_entry_trigger] 
          phi_stmt_1327_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1327_entry_sample_req] 
          $T[phi_stmt_1327_entry_sample_req_ps] 
          phi_stmt_1327_entry_sample_req <-& (phi_stmt_1327_entry_sample_req_ps)
          phi_stmt_1327_entry_sample_req &-> ($null)
          phi_stmt_1327_update_start_ o<-& (phi_stmt_1327_update_completed_ 0)
          phi_stmt_1327_sample_start_ o<-& (phi_stmt_1327_sample_completed_ 1)
          $T[phi_stmt_1327_merged_reqs] 
          $T[phi_stmt_1327_phi_mux_ack] 
          $T[phi_stmt_1327_phi_mux_ack_ps] 
          phi_stmt_1327_phi_mux_ack_ps <-& (phi_stmt_1327_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1327_update_completed_)
          $T[R_ZERO_33_1329_sample_start__ps] 
          $T[R_ZERO_33_1329_sample_completed__ps] 
          $T[R_ZERO_33_1329_update_start__ps] 
          $T[R_ZERO_33_1329_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1329_sample_start_] 
          $T[R_ZERO_33_1329_sample_completed_] 
          R_ZERO_33_1329_sample_completed_ <-& (R_ZERO_33_1329_sample_start_)
          $T[R_ZERO_33_1329_update_start_] 
          $T [R_ZERO_33_1329_update_completed_] $delay 
          R_ZERO_33_1329_update_completed_ <-& (R_ZERO_33_1329_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1329_sample_start_ <-& (R_ZERO_33_1329_sample_start__ps)
          R_ZERO_33_1329_update_start_ <-& (R_ZERO_33_1329_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1329_sample_completed__ps <-& (R_ZERO_33_1329_sample_completed_)
          R_ZERO_33_1329_update_completed__ps <-& (R_ZERO_33_1329_update_completed_)
          $T[RPIPE_noblock_obuf_1_4_1331_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1331_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_4_1331_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1331_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_4
          $T[RPIPE_noblock_obuf_1_4_1331_sample_start_] 
          $T[RPIPE_noblock_obuf_1_4_1331_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_4_1331_update_start_] 
          $T[RPIPE_noblock_obuf_1_4_1331_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_4_1331 with guard R_read_from_1_1330
          // root phi_stmt_1327 not in visited_elements
          // root phi_stmt_1332 not in visited_elements
          // root phi_stmt_1337 not in visited_elements
          // root phi_stmt_1342 not in visited_elements
          // root phi_stmt_1347 not in visited_elements
          // root phi_stmt_1351 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_4_1331_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_4_1331_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_4_1331_sample_start_ &-> (RPIPE_noblock_obuf_1_4_1331_Sample)
          RPIPE_noblock_obuf_1_4_1331_sample_completed_ <-& (RPIPE_noblock_obuf_1_4_1331_Sample)
          RPIPE_noblock_obuf_1_4_1331_update_start_ <-& (RPIPE_noblock_obuf_1_4_1331_sample_completed_)
          RPIPE_noblock_obuf_1_4_1331_update_start_ &-> (RPIPE_noblock_obuf_1_4_1331_Update)
          RPIPE_noblock_obuf_1_4_1331_update_completed_ <-& (RPIPE_noblock_obuf_1_4_1331_Update)
          RPIPE_noblock_obuf_1_4_1331_sample_start_ o<-& (RPIPE_noblock_obuf_1_4_1331_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_4_1331_sample_start_ <-& (RPIPE_noblock_obuf_1_4_1331_sample_start__ps)
          RPIPE_noblock_obuf_1_4_1331_update_start_ <-& (RPIPE_noblock_obuf_1_4_1331_update_start__ps)
          // RAW reenables for noblock_obuf_1_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_4_1331_sample_completed__ps <-& (RPIPE_noblock_obuf_1_4_1331_sample_completed_)
          RPIPE_noblock_obuf_1_4_1331_update_completed__ps <-& (RPIPE_noblock_obuf_1_4_1331_update_completed_)
          $phisequencer [ phi_stmt_1327_phi_seq] : 
          phi_stmt_1327_entry_trigger R_ZERO_33_1329_sample_start__ps R_ZERO_33_1329_sample_completed__ps R_ZERO_33_1329_update_start__ps R_ZERO_33_1329_update_completed__ps phi_stmt_1327_loopback_trigger RPIPE_noblock_obuf_1_4_1331_sample_start__ps RPIPE_noblock_obuf_1_4_1331_sample_completed__ps RPIPE_noblock_obuf_1_4_1331_update_start__ps RPIPE_noblock_obuf_1_4_1331_update_completed__ps :
          phi_stmt_1327_sample_start__ps phi_stmt_1327_sample_completed__ps phi_stmt_1327_update_start__ps phi_stmt_1327_update_completed__ps :
          phi_stmt_1327_entry_sample_req_ps phi_stmt_1327_loopback_sample_req_ps : 
          phi_stmt_1327_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1327
          // start:  PHI statement phi_stmt_1332
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1332_sample_start_] 
          $T[phi_stmt_1332_sample_completed_] 
          $T[phi_stmt_1332_update_start_] 
          $T[phi_stmt_1332_update_completed_] 
          $T[phi_stmt_1332_sample_start__ps] 
          phi_stmt_1332_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1332_sample_completed__ps] 
          phi_stmt_1332_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1332_update_start__ps] 
          phi_stmt_1332_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1332_update_completed__ps] 
          phi_stmt_1332_update_completed_ <-& (phi_stmt_1332_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1332_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1332_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1332_update_start_)
          $T[phi_stmt_1332_loopback_trigger] 
          phi_stmt_1332_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1332_loopback_sample_req] 
          $T[phi_stmt_1332_loopback_sample_req_ps] 
          phi_stmt_1332_loopback_sample_req <-& (phi_stmt_1332_loopback_sample_req_ps)
          phi_stmt_1332_loopback_sample_req &-> ($null)
          $T[phi_stmt_1332_entry_trigger] 
          phi_stmt_1332_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1332_entry_sample_req] 
          $T[phi_stmt_1332_entry_sample_req_ps] 
          phi_stmt_1332_entry_sample_req <-& (phi_stmt_1332_entry_sample_req_ps)
          phi_stmt_1332_entry_sample_req &-> ($null)
          phi_stmt_1332_update_start_ o<-& (phi_stmt_1332_update_completed_ 0)
          phi_stmt_1332_sample_start_ o<-& (phi_stmt_1332_sample_completed_ 1)
          $T[phi_stmt_1332_merged_reqs] 
          $T[phi_stmt_1332_phi_mux_ack] 
          $T[phi_stmt_1332_phi_mux_ack_ps] 
          phi_stmt_1332_phi_mux_ack_ps <-& (phi_stmt_1332_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1332_update_completed_)
          $T[R_ZERO_33_1334_sample_start__ps] 
          $T[R_ZERO_33_1334_sample_completed__ps] 
          $T[R_ZERO_33_1334_update_start__ps] 
          $T[R_ZERO_33_1334_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1334_sample_start_] 
          $T[R_ZERO_33_1334_sample_completed_] 
          R_ZERO_33_1334_sample_completed_ <-& (R_ZERO_33_1334_sample_start_)
          $T[R_ZERO_33_1334_update_start_] 
          $T [R_ZERO_33_1334_update_completed_] $delay 
          R_ZERO_33_1334_update_completed_ <-& (R_ZERO_33_1334_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1334_sample_start_ <-& (R_ZERO_33_1334_sample_start__ps)
          R_ZERO_33_1334_update_start_ <-& (R_ZERO_33_1334_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1334_sample_completed__ps <-& (R_ZERO_33_1334_sample_completed_)
          R_ZERO_33_1334_update_completed__ps <-& (R_ZERO_33_1334_update_completed_)
          $T[RPIPE_noblock_obuf_2_4_1336_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1336_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_4_1336_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1336_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_4
          $T[RPIPE_noblock_obuf_2_4_1336_sample_start_] 
          $T[RPIPE_noblock_obuf_2_4_1336_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_4_1336_update_start_] 
          $T[RPIPE_noblock_obuf_2_4_1336_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_4_1336 with guard R_read_from_2_1335
          // root phi_stmt_1332 not in visited_elements
          // root phi_stmt_1337 not in visited_elements
          // root phi_stmt_1342 not in visited_elements
          // root phi_stmt_1347 not in visited_elements
          // root phi_stmt_1351 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_4_1336_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_4_1336_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_4_1336_sample_start_ &-> (RPIPE_noblock_obuf_2_4_1336_Sample)
          RPIPE_noblock_obuf_2_4_1336_sample_completed_ <-& (RPIPE_noblock_obuf_2_4_1336_Sample)
          RPIPE_noblock_obuf_2_4_1336_update_start_ <-& (RPIPE_noblock_obuf_2_4_1336_sample_completed_)
          RPIPE_noblock_obuf_2_4_1336_update_start_ &-> (RPIPE_noblock_obuf_2_4_1336_Update)
          RPIPE_noblock_obuf_2_4_1336_update_completed_ <-& (RPIPE_noblock_obuf_2_4_1336_Update)
          RPIPE_noblock_obuf_2_4_1336_sample_start_ o<-& (RPIPE_noblock_obuf_2_4_1336_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_4_1336_sample_start_ <-& (RPIPE_noblock_obuf_2_4_1336_sample_start__ps)
          RPIPE_noblock_obuf_2_4_1336_update_start_ <-& (RPIPE_noblock_obuf_2_4_1336_update_start__ps)
          // RAW reenables for noblock_obuf_2_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_4_1336_sample_completed__ps <-& (RPIPE_noblock_obuf_2_4_1336_sample_completed_)
          RPIPE_noblock_obuf_2_4_1336_update_completed__ps <-& (RPIPE_noblock_obuf_2_4_1336_update_completed_)
          $phisequencer [ phi_stmt_1332_phi_seq] : 
          phi_stmt_1332_entry_trigger R_ZERO_33_1334_sample_start__ps R_ZERO_33_1334_sample_completed__ps R_ZERO_33_1334_update_start__ps R_ZERO_33_1334_update_completed__ps phi_stmt_1332_loopback_trigger RPIPE_noblock_obuf_2_4_1336_sample_start__ps RPIPE_noblock_obuf_2_4_1336_sample_completed__ps RPIPE_noblock_obuf_2_4_1336_update_start__ps RPIPE_noblock_obuf_2_4_1336_update_completed__ps :
          phi_stmt_1332_sample_start__ps phi_stmt_1332_sample_completed__ps phi_stmt_1332_update_start__ps phi_stmt_1332_update_completed__ps :
          phi_stmt_1332_entry_sample_req_ps phi_stmt_1332_loopback_sample_req_ps : 
          phi_stmt_1332_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1332
          // start:  PHI statement phi_stmt_1337
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1337_sample_start_] 
          $T[phi_stmt_1337_sample_completed_] 
          $T[phi_stmt_1337_update_start_] 
          $T[phi_stmt_1337_update_completed_] 
          $T[phi_stmt_1337_sample_start__ps] 
          phi_stmt_1337_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1337_sample_completed__ps] 
          phi_stmt_1337_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1337_update_start__ps] 
          phi_stmt_1337_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1337_update_completed__ps] 
          phi_stmt_1337_update_completed_ <-& (phi_stmt_1337_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1337_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1337_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1337_update_start_)
          $T[phi_stmt_1337_loopback_trigger] 
          phi_stmt_1337_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1337_loopback_sample_req] 
          $T[phi_stmt_1337_loopback_sample_req_ps] 
          phi_stmt_1337_loopback_sample_req <-& (phi_stmt_1337_loopback_sample_req_ps)
          phi_stmt_1337_loopback_sample_req &-> ($null)
          $T[phi_stmt_1337_entry_trigger] 
          phi_stmt_1337_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1337_entry_sample_req] 
          $T[phi_stmt_1337_entry_sample_req_ps] 
          phi_stmt_1337_entry_sample_req <-& (phi_stmt_1337_entry_sample_req_ps)
          phi_stmt_1337_entry_sample_req &-> ($null)
          phi_stmt_1337_update_start_ o<-& (phi_stmt_1337_update_completed_ 0)
          phi_stmt_1337_sample_start_ o<-& (phi_stmt_1337_sample_completed_ 1)
          $T[phi_stmt_1337_merged_reqs] 
          $T[phi_stmt_1337_phi_mux_ack] 
          $T[phi_stmt_1337_phi_mux_ack_ps] 
          phi_stmt_1337_phi_mux_ack_ps <-& (phi_stmt_1337_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1337_update_completed_)
          $T[R_ZERO_33_1339_sample_start__ps] 
          $T[R_ZERO_33_1339_sample_completed__ps] 
          $T[R_ZERO_33_1339_update_start__ps] 
          $T[R_ZERO_33_1339_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1339_sample_start_] 
          $T[R_ZERO_33_1339_sample_completed_] 
          R_ZERO_33_1339_sample_completed_ <-& (R_ZERO_33_1339_sample_start_)
          $T[R_ZERO_33_1339_update_start_] 
          $T [R_ZERO_33_1339_update_completed_] $delay 
          R_ZERO_33_1339_update_completed_ <-& (R_ZERO_33_1339_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1339_sample_start_ <-& (R_ZERO_33_1339_sample_start__ps)
          R_ZERO_33_1339_update_start_ <-& (R_ZERO_33_1339_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1339_sample_completed__ps <-& (R_ZERO_33_1339_sample_completed_)
          R_ZERO_33_1339_update_completed__ps <-& (R_ZERO_33_1339_update_completed_)
          $T[RPIPE_noblock_obuf_3_4_1341_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1341_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_4_1341_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1341_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_4
          $T[RPIPE_noblock_obuf_3_4_1341_sample_start_] 
          $T[RPIPE_noblock_obuf_3_4_1341_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_4_1341_update_start_] 
          $T[RPIPE_noblock_obuf_3_4_1341_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_4_1341 with guard R_read_from_3_1340
          // root phi_stmt_1337 not in visited_elements
          // root phi_stmt_1342 not in visited_elements
          // root phi_stmt_1347 not in visited_elements
          // root phi_stmt_1351 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_4_1341_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_4_1341_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_4_1341_sample_start_ &-> (RPIPE_noblock_obuf_3_4_1341_Sample)
          RPIPE_noblock_obuf_3_4_1341_sample_completed_ <-& (RPIPE_noblock_obuf_3_4_1341_Sample)
          RPIPE_noblock_obuf_3_4_1341_update_start_ <-& (RPIPE_noblock_obuf_3_4_1341_sample_completed_)
          RPIPE_noblock_obuf_3_4_1341_update_start_ &-> (RPIPE_noblock_obuf_3_4_1341_Update)
          RPIPE_noblock_obuf_3_4_1341_update_completed_ <-& (RPIPE_noblock_obuf_3_4_1341_Update)
          RPIPE_noblock_obuf_3_4_1341_sample_start_ o<-& (RPIPE_noblock_obuf_3_4_1341_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_4_1341_sample_start_ <-& (RPIPE_noblock_obuf_3_4_1341_sample_start__ps)
          RPIPE_noblock_obuf_3_4_1341_update_start_ <-& (RPIPE_noblock_obuf_3_4_1341_update_start__ps)
          // RAW reenables for noblock_obuf_3_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_4_1341_sample_completed__ps <-& (RPIPE_noblock_obuf_3_4_1341_sample_completed_)
          RPIPE_noblock_obuf_3_4_1341_update_completed__ps <-& (RPIPE_noblock_obuf_3_4_1341_update_completed_)
          $phisequencer [ phi_stmt_1337_phi_seq] : 
          phi_stmt_1337_entry_trigger R_ZERO_33_1339_sample_start__ps R_ZERO_33_1339_sample_completed__ps R_ZERO_33_1339_update_start__ps R_ZERO_33_1339_update_completed__ps phi_stmt_1337_loopback_trigger RPIPE_noblock_obuf_3_4_1341_sample_start__ps RPIPE_noblock_obuf_3_4_1341_sample_completed__ps RPIPE_noblock_obuf_3_4_1341_update_start__ps RPIPE_noblock_obuf_3_4_1341_update_completed__ps :
          phi_stmt_1337_sample_start__ps phi_stmt_1337_sample_completed__ps phi_stmt_1337_update_start__ps phi_stmt_1337_update_completed__ps :
          phi_stmt_1337_entry_sample_req_ps phi_stmt_1337_loopback_sample_req_ps : 
          phi_stmt_1337_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1337
          // start:  PHI statement phi_stmt_1342
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1342_sample_start_] 
          $T[phi_stmt_1342_sample_completed_] 
          $T[phi_stmt_1342_update_start_] 
          $T[phi_stmt_1342_update_completed_] 
          $T[phi_stmt_1342_sample_start__ps] 
          phi_stmt_1342_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1342_sample_completed__ps] 
          phi_stmt_1342_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1342_update_start__ps] 
          phi_stmt_1342_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1342_update_completed__ps] 
          phi_stmt_1342_update_completed_ <-& (phi_stmt_1342_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1342_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1342_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1342_update_start_)
          $T[phi_stmt_1342_loopback_trigger] 
          phi_stmt_1342_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1342_loopback_sample_req] 
          $T[phi_stmt_1342_loopback_sample_req_ps] 
          phi_stmt_1342_loopback_sample_req <-& (phi_stmt_1342_loopback_sample_req_ps)
          phi_stmt_1342_loopback_sample_req &-> ($null)
          $T[phi_stmt_1342_entry_trigger] 
          phi_stmt_1342_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1342_entry_sample_req] 
          $T[phi_stmt_1342_entry_sample_req_ps] 
          phi_stmt_1342_entry_sample_req <-& (phi_stmt_1342_entry_sample_req_ps)
          phi_stmt_1342_entry_sample_req &-> ($null)
          phi_stmt_1342_update_start_ o<-& (phi_stmt_1342_update_completed_ 0)
          phi_stmt_1342_sample_start_ o<-& (phi_stmt_1342_sample_completed_ 1)
          $T[phi_stmt_1342_merged_reqs] 
          $T[phi_stmt_1342_phi_mux_ack] 
          $T[phi_stmt_1342_phi_mux_ack_ps] 
          phi_stmt_1342_phi_mux_ack_ps <-& (phi_stmt_1342_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1342_update_completed_)
          $T[R_ZERO_33_1344_sample_start__ps] 
          $T[R_ZERO_33_1344_sample_completed__ps] 
          $T[R_ZERO_33_1344_update_start__ps] 
          $T[R_ZERO_33_1344_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1344_sample_start_] 
          $T[R_ZERO_33_1344_sample_completed_] 
          R_ZERO_33_1344_sample_completed_ <-& (R_ZERO_33_1344_sample_start_)
          $T[R_ZERO_33_1344_update_start_] 
          $T [R_ZERO_33_1344_update_completed_] $delay 
          R_ZERO_33_1344_update_completed_ <-& (R_ZERO_33_1344_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1344_sample_start_ <-& (R_ZERO_33_1344_sample_start__ps)
          R_ZERO_33_1344_update_start_ <-& (R_ZERO_33_1344_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1344_sample_completed__ps <-& (R_ZERO_33_1344_sample_completed_)
          R_ZERO_33_1344_update_completed__ps <-& (R_ZERO_33_1344_update_completed_)
          $T[RPIPE_noblock_obuf_4_4_1346_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1346_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_4_1346_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1346_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_4
          $T[RPIPE_noblock_obuf_4_4_1346_sample_start_] 
          $T[RPIPE_noblock_obuf_4_4_1346_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_4_1346_update_start_] 
          $T[RPIPE_noblock_obuf_4_4_1346_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_4_1346 with guard R_read_from_4_1345
          // root phi_stmt_1342 not in visited_elements
          // root phi_stmt_1347 not in visited_elements
          // root phi_stmt_1351 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_4_1346_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_4_1346_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_4_1346_sample_start_ &-> (RPIPE_noblock_obuf_4_4_1346_Sample)
          RPIPE_noblock_obuf_4_4_1346_sample_completed_ <-& (RPIPE_noblock_obuf_4_4_1346_Sample)
          RPIPE_noblock_obuf_4_4_1346_update_start_ <-& (RPIPE_noblock_obuf_4_4_1346_sample_completed_)
          RPIPE_noblock_obuf_4_4_1346_update_start_ &-> (RPIPE_noblock_obuf_4_4_1346_Update)
          RPIPE_noblock_obuf_4_4_1346_update_completed_ <-& (RPIPE_noblock_obuf_4_4_1346_Update)
          RPIPE_noblock_obuf_4_4_1346_sample_start_ o<-& (RPIPE_noblock_obuf_4_4_1346_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_4_1346_sample_start_ <-& (RPIPE_noblock_obuf_4_4_1346_sample_start__ps)
          RPIPE_noblock_obuf_4_4_1346_update_start_ <-& (RPIPE_noblock_obuf_4_4_1346_update_start__ps)
          // RAW reenables for noblock_obuf_4_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_4_1346_sample_completed__ps <-& (RPIPE_noblock_obuf_4_4_1346_sample_completed_)
          RPIPE_noblock_obuf_4_4_1346_update_completed__ps <-& (RPIPE_noblock_obuf_4_4_1346_update_completed_)
          $phisequencer [ phi_stmt_1342_phi_seq] : 
          phi_stmt_1342_entry_trigger R_ZERO_33_1344_sample_start__ps R_ZERO_33_1344_sample_completed__ps R_ZERO_33_1344_update_start__ps R_ZERO_33_1344_update_completed__ps phi_stmt_1342_loopback_trigger RPIPE_noblock_obuf_4_4_1346_sample_start__ps RPIPE_noblock_obuf_4_4_1346_sample_completed__ps RPIPE_noblock_obuf_4_4_1346_update_start__ps RPIPE_noblock_obuf_4_4_1346_update_completed__ps :
          phi_stmt_1342_sample_start__ps phi_stmt_1342_sample_completed__ps phi_stmt_1342_update_start__ps phi_stmt_1342_update_completed__ps :
          phi_stmt_1342_entry_sample_req_ps phi_stmt_1342_loopback_sample_req_ps : 
          phi_stmt_1342_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1342
          // start:  PHI statement phi_stmt_1347
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1347_sample_start_] 
          $T[phi_stmt_1347_sample_completed_] 
          $T[phi_stmt_1347_update_start_] 
          $T[phi_stmt_1347_update_completed_] 
          $T[phi_stmt_1347_sample_start__ps] 
          phi_stmt_1347_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1347_sample_completed__ps] 
          phi_stmt_1347_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1347_update_start__ps] 
          phi_stmt_1347_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1347_update_completed__ps] 
          phi_stmt_1347_update_completed_ <-& (phi_stmt_1347_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1347_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1347_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1347_update_start_)
          $T[phi_stmt_1347_loopback_trigger] 
          phi_stmt_1347_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1347_loopback_sample_req] 
          $T[phi_stmt_1347_loopback_sample_req_ps] 
          phi_stmt_1347_loopback_sample_req <-& (phi_stmt_1347_loopback_sample_req_ps)
          phi_stmt_1347_loopback_sample_req &-> ($null)
          $T[phi_stmt_1347_entry_trigger] 
          phi_stmt_1347_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1347_entry_sample_req] 
          $T[phi_stmt_1347_entry_sample_req_ps] 
          phi_stmt_1347_entry_sample_req <-& (phi_stmt_1347_entry_sample_req_ps)
          phi_stmt_1347_entry_sample_req &-> ($null)
          phi_stmt_1347_update_start_ o<-& (phi_stmt_1347_update_completed_ 0)
          phi_stmt_1347_sample_start_ o<-& (phi_stmt_1347_sample_completed_ 1)
          $T[phi_stmt_1347_merged_reqs] 
          $T[phi_stmt_1347_phi_mux_ack] 
          $T[phi_stmt_1347_phi_mux_ack_ps] 
          phi_stmt_1347_phi_mux_ack_ps <-& (phi_stmt_1347_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1347_update_completed_)
          $T[R_ZERO_3_1349_sample_start__ps] 
          $T[R_ZERO_3_1349_sample_completed__ps] 
          $T[R_ZERO_3_1349_update_start__ps] 
          $T[R_ZERO_3_1349_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1349_sample_start_] 
          $T[R_ZERO_3_1349_sample_completed_] 
          R_ZERO_3_1349_sample_completed_ <-& (R_ZERO_3_1349_sample_start_)
          $T[R_ZERO_3_1349_update_start_] 
          $T [R_ZERO_3_1349_update_completed_] $delay 
          R_ZERO_3_1349_update_completed_ <-& (R_ZERO_3_1349_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1349_sample_start_ <-& (R_ZERO_3_1349_sample_start__ps)
          R_ZERO_3_1349_update_start_ <-& (R_ZERO_3_1349_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1349_sample_completed__ps <-& (R_ZERO_3_1349_sample_completed_)
          R_ZERO_3_1349_update_completed__ps <-& (R_ZERO_3_1349_update_completed_)
          $T[R_next_active_packet_1350_sample_start__ps] 
          $T[R_next_active_packet_1350_sample_completed__ps] 
          $T[R_next_active_packet_1350_update_start__ps] 
          $T[R_next_active_packet_1350_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1350_sample_start_] 
          $T[R_next_active_packet_1350_sample_completed_] 
          $T[R_next_active_packet_1350_update_start_] 
          $T[R_next_active_packet_1350_update_completed_] 
          ;;[R_next_active_packet_1350_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1350_sample_start_ &-> (R_next_active_packet_1350_Sample)
          R_next_active_packet_1350_sample_completed_ <-& (R_next_active_packet_1350_Sample)
          ;;[R_next_active_packet_1350_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1350_update_start_ &-> (R_next_active_packet_1350_Update)
          R_next_active_packet_1350_update_completed_ <-& (R_next_active_packet_1350_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1350_sample_start_ <-& (R_next_active_packet_1350_sample_start__ps)
          R_next_active_packet_1350_update_start_ <-& (R_next_active_packet_1350_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1350_sample_completed__ps <-& (R_next_active_packet_1350_sample_completed_)
          R_next_active_packet_1350_update_completed__ps <-& (R_next_active_packet_1350_update_completed_)
          $phisequencer [ phi_stmt_1347_phi_seq] : 
          phi_stmt_1347_entry_trigger R_ZERO_3_1349_sample_start__ps R_ZERO_3_1349_sample_completed__ps R_ZERO_3_1349_update_start__ps R_ZERO_3_1349_update_completed__ps phi_stmt_1347_loopback_trigger R_next_active_packet_1350_sample_start__ps R_next_active_packet_1350_sample_completed__ps R_next_active_packet_1350_update_start__ps R_next_active_packet_1350_update_completed__ps :
          phi_stmt_1347_sample_start__ps phi_stmt_1347_sample_completed__ps phi_stmt_1347_update_start__ps phi_stmt_1347_update_completed__ps :
          phi_stmt_1347_entry_sample_req_ps phi_stmt_1347_loopback_sample_req_ps : 
          phi_stmt_1347_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1347
          // start:  PHI statement phi_stmt_1351
          // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1351_sample_start_] 
          $T[phi_stmt_1351_sample_completed_] 
          $T[phi_stmt_1351_update_start_] 
          $T[phi_stmt_1351_update_completed_] 
          $T[phi_stmt_1351_sample_start__ps] 
          phi_stmt_1351_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1351_sample_completed__ps] 
          phi_stmt_1351_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1351_update_start__ps] 
          phi_stmt_1351_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1351_update_completed__ps] 
          phi_stmt_1351_update_completed_ <-& (phi_stmt_1351_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1351_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1351_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1351_update_start_)
          $T[phi_stmt_1351_loopback_trigger] 
          phi_stmt_1351_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1351_loopback_sample_req] 
          $T[phi_stmt_1351_loopback_sample_req_ps] 
          phi_stmt_1351_loopback_sample_req <-& (phi_stmt_1351_loopback_sample_req_ps)
          phi_stmt_1351_loopback_sample_req &-> ($null)
          $T[phi_stmt_1351_entry_trigger] 
          phi_stmt_1351_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1351_entry_sample_req] 
          $T[phi_stmt_1351_entry_sample_req_ps] 
          phi_stmt_1351_entry_sample_req <-& (phi_stmt_1351_entry_sample_req_ps)
          phi_stmt_1351_entry_sample_req &-> ($null)
          phi_stmt_1351_update_start_ o<-& (phi_stmt_1351_update_completed_ 0)
          phi_stmt_1351_sample_start_ o<-& (phi_stmt_1351_sample_completed_ 1)
          $T[phi_stmt_1351_merged_reqs] 
          $T[phi_stmt_1351_phi_mux_ack] 
          $T[phi_stmt_1351_phi_mux_ack_ps] 
          phi_stmt_1351_phi_mux_ack_ps <-& (phi_stmt_1351_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1351_update_completed_)
          $T[R_ZERO_3_1353_sample_start__ps] 
          $T[R_ZERO_3_1353_sample_completed__ps] 
          $T[R_ZERO_3_1353_update_start__ps] 
          $T[R_ZERO_3_1353_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1353_sample_start_] 
          $T[R_ZERO_3_1353_sample_completed_] 
          R_ZERO_3_1353_sample_completed_ <-& (R_ZERO_3_1353_sample_start_)
          $T[R_ZERO_3_1353_update_start_] 
          $T [R_ZERO_3_1353_update_completed_] $delay 
          R_ZERO_3_1353_update_completed_ <-& (R_ZERO_3_1353_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1353_sample_start_ <-& (R_ZERO_3_1353_sample_start__ps)
          R_ZERO_3_1353_update_start_ <-& (R_ZERO_3_1353_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1353_sample_completed__ps <-& (R_ZERO_3_1353_sample_completed_)
          R_ZERO_3_1353_update_completed__ps <-& (R_ZERO_3_1353_update_completed_)
          $T[R_next_pkt_priority_1354_sample_start__ps] 
          $T[R_next_pkt_priority_1354_sample_completed__ps] 
          $T[R_next_pkt_priority_1354_update_start__ps] 
          $T[R_next_pkt_priority_1354_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_1354_sample_start_] 
          $T[R_next_pkt_priority_1354_sample_completed_] 
          $T[R_next_pkt_priority_1354_update_start_] 
          $T[R_next_pkt_priority_1354_update_completed_] 
          ;;[R_next_pkt_priority_1354_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_1354_sample_start_ &-> (R_next_pkt_priority_1354_Sample)
          R_next_pkt_priority_1354_sample_completed_ <-& (R_next_pkt_priority_1354_Sample)
          ;;[R_next_pkt_priority_1354_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_1354_update_start_ &-> (R_next_pkt_priority_1354_Update)
          R_next_pkt_priority_1354_update_completed_ <-& (R_next_pkt_priority_1354_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_1354_sample_start_ <-& (R_next_pkt_priority_1354_sample_start__ps)
          R_next_pkt_priority_1354_update_start_ <-& (R_next_pkt_priority_1354_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_1354_sample_completed__ps <-& (R_next_pkt_priority_1354_sample_completed_)
          R_next_pkt_priority_1354_update_completed__ps <-& (R_next_pkt_priority_1354_update_completed_)
          $phisequencer [ phi_stmt_1351_phi_seq] : 
          phi_stmt_1351_entry_trigger R_ZERO_3_1353_sample_start__ps R_ZERO_3_1353_sample_completed__ps R_ZERO_3_1353_update_start__ps R_ZERO_3_1353_update_completed__ps phi_stmt_1351_loopback_trigger R_next_pkt_priority_1354_sample_start__ps R_next_pkt_priority_1354_sample_completed__ps R_next_pkt_priority_1354_update_start__ps R_next_pkt_priority_1354_update_completed__ps :
          phi_stmt_1351_sample_start__ps phi_stmt_1351_sample_completed__ps phi_stmt_1351_update_start__ps phi_stmt_1351_update_completed__ps :
          phi_stmt_1351_entry_sample_req_ps phi_stmt_1351_loopback_sample_req_ps : 
          phi_stmt_1351_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1351
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 369
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 370
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 371
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 372
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 373
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 374
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 375
          // volatile! 
          // Source expression
          // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
          // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
          // (p1_valid | p2_valid)
          // p1_valid
          // p2_valid
          // (p3_valid | p4_valid)
          // p3_valid
          // p4_valid
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 376
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 377
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 378
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 379
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 380
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 381
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 382
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 383
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_4
          $T[WPIPE_out_data_4_1534_sample_start_] 
          $T[WPIPE_out_data_4_1534_sample_completed_] 
          $T[WPIPE_out_data_4_1534_update_start_] 
          $T[WPIPE_out_data_4_1534_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_4_1534 with guard R_send_flag_1533
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1323_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1327_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1332_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1337_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1342_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1347_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1351_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1323_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1327_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1332_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1337_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1342_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1347_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1351_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          ;;[WPIPE_out_data_4_1534_Sample] 
          {
            // pipe write sample-start out_data_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_4_1534_Update] 
          {
            // pipe write update (complete) out_data_4
            $T [req] $T [ack] 
          }
          WPIPE_out_data_4_1534_sample_start_ &-> (WPIPE_out_data_4_1534_Sample)
          WPIPE_out_data_4_1534_sample_completed_ <-& (WPIPE_out_data_4_1534_Sample)
          WPIPE_out_data_4_1534_update_start_ <-& (WPIPE_out_data_4_1534_sample_completed_)
          WPIPE_out_data_4_1534_update_start_ &-> (WPIPE_out_data_4_1534_Update)
          WPIPE_out_data_4_1534_update_completed_ <-& (WPIPE_out_data_4_1534_Update)
          WPIPE_out_data_4_1534_sample_start_ o<-& (WPIPE_out_data_4_1534_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_4_1534_sample_start_
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1323_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1327_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1332_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1337_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1342_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1347_update_completed_)
          WPIPE_out_data_4_1534_sample_start_ <-& (phi_stmt_1351_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_4_1534_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1323_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1327_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1332_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1337_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1342_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1347_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          phi_stmt_1351_update_start_ o<-& (WPIPE_out_data_4_1534_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
          // pipe read/write dependencies for pipe out_data_4
          // read-dependencies for pipe out_data_4
          // write-dependencies for pipe out_data_4
          // signal write dependencies for out_data_4
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1321__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1321_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1321__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1321_loop_body : condition_evaluated
        $bind do_while_stmt_1321__entry__  => do_while_stmt_1321_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1321_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1321__exit__)
      }
      do_while_stmt_1321__entry__ |-> (do_while_stmt_1321)
      do_while_stmt_1321__exit__ <-| (do_while_stmt_1321)
      do_while_stmt_1321__entry__ <-| (branch_block_stmt_1320__entry__)
      do_while_stmt_1321__exit__ |-> (branch_block_stmt_1320__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 353
    // constant-object-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 349
    // constant-object-declarations for block %outputPort_4_Daemon
    //  file .Aa/switch2x2.opt.aa, line 344
    // constant-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 349
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 351
    // 1 
    $constant $W[konst_1538_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 353
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 354
    // ZERO_8
    $constant $W[R_ZERO_8_1325_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 356
    // ZERO_33
    $constant $W[R_ZERO_33_1329_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 358
    // ZERO_33
    $constant $W[R_ZERO_33_1334_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 360
    // ZERO_33
    $constant $W[R_ZERO_33_1339_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 362
    // ZERO_33
    $constant $W[R_ZERO_33_1344_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 364
    // ZERO_3
    $constant $W[R_ZERO_3_1349_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 366
    // ZERO_3
    $constant $W[R_ZERO_3_1353_wire_constant] : $int<3> := _b000// 0
    // 32 
    $constant $W[konst_1358_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1363_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1368_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1373_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1378_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1381_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1384_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1387_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1391_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1394_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1397_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1400_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 374
    // 0 
    $constant $W[konst_1424_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_1430_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1433_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1443_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1451_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1459_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1467_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1473_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1477_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1480_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1484_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1488_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1492_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1495_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1499_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1506_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1509_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1512_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1515_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1519_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1522_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1525_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1528_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 349
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 351
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 353
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 354
    $W[next_down_counter_1438_1326_buffered] : $int<8>
    // down_counter
    $W[down_counter_1323] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 356
    // noblock_obuf_1_4
    $W[RPIPE_noblock_obuf_1_4_1331_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1327] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 358
    // noblock_obuf_2_4
    $W[RPIPE_noblock_obuf_2_4_1336_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1332] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 360
    // noblock_obuf_3_4
    $W[RPIPE_noblock_obuf_3_4_1341_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1337] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 362
    // noblock_obuf_4_4
    $W[RPIPE_noblock_obuf_4_4_1346_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1342] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 364
    $W[next_active_packet_1414_1350_buffered] : $int<3>
    // active_packet
    $W[active_packet_1347] : $int<3>
    // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 366
    $W[next_pkt_priority_1414_1354_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_1351] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 369
    // p1_valid
    $W[p1_valid_1360] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 370
    // p2_valid
    $W[p2_valid_1365] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 371
    // p3_valid
    $W[p3_valid_1370] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 372
    // p4_valid
    $W[p4_valid_1375] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 373
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1379_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1382_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1385_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1388_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1389_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1392_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1395_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1398_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1401_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1402_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1404] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 374
    // next_active_packet
    $W[next_active_packet_1414] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_1414] : $int<3>
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 375
    // (p1_valid | p2_valid)
    $intermediate $W[OR_u1_u1_1418_wire] : $int<1>
    // (p3_valid | p4_valid)
    $intermediate $W[OR_u1_u1_1421_wire] : $int<1>
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    $intermediate $W[OR_u1_u1_1422_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1425_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1427] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 376
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1434_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1436_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1438] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 377
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1441_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1444_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1446] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 378
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1449_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1452_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1454] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 379
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1457_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1460_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1462] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 380
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1465_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1468_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1470] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 381
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1474_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1476_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1478_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1481_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1483_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1485_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1486_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1489_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1491_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1493_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1496_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1498_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1500_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1501_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1503] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 382
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1507_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1510_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1513_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1516_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1517_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1520_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1523_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1526_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1529_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1530_wire] : $int<1>
    // send_flag
    $W[send_flag_1532] : $int<1>
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 383
    // out_data_4
    // datapath-instances for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 349
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 351
    ==0? [do_while_stmt_1321_branch] (konst_1538_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 353
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 354
    # := [next_down_counter_1438_1326_buf] (next_down_counter_1438) (next_down_counter_1438_1326_buffered)     $fullrate
    $buffering $out next_down_counter_1438_1326_buf next_down_counter_1438_1326_buffered  1
    # $phi [phi_stmt_1323] (R_ZERO_8_1325_wire_constant next_down_counter_1438_1326_buffered) ( down_counter_1323 ) $fullrate
    // $buffering  $out phi_stmt_1323 down_counter_1323 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 356
    // noblock_obuf_1_4
    $ioport $in [RPIPE_noblock_obuf_1_4_1331_inst] (noblock_obuf_1_4) (RPIPE_noblock_obuf_1_4_1331_wire) $guard ( read_from_1_1446 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_4_1331_inst RPIPE_noblock_obuf_1_4_1331_wire 1
    # $phi [phi_stmt_1327] (R_ZERO_33_1329_wire_constant RPIPE_noblock_obuf_1_4_1331_wire) ( pkt_1_e_word_1327 ) $fullrate
    // $buffering  $out phi_stmt_1327 pkt_1_e_word_1327 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 358
    // noblock_obuf_2_4
    $ioport $in [RPIPE_noblock_obuf_2_4_1336_inst] (noblock_obuf_2_4) (RPIPE_noblock_obuf_2_4_1336_wire) $guard ( read_from_2_1454 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_4_1336_inst RPIPE_noblock_obuf_2_4_1336_wire 1
    # $phi [phi_stmt_1332] (R_ZERO_33_1334_wire_constant RPIPE_noblock_obuf_2_4_1336_wire) ( pkt_2_e_word_1332 ) $fullrate
    // $buffering  $out phi_stmt_1332 pkt_2_e_word_1332 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 360
    // noblock_obuf_3_4
    $ioport $in [RPIPE_noblock_obuf_3_4_1341_inst] (noblock_obuf_3_4) (RPIPE_noblock_obuf_3_4_1341_wire) $guard ( read_from_3_1462 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_4_1341_inst RPIPE_noblock_obuf_3_4_1341_wire 1
    # $phi [phi_stmt_1337] (R_ZERO_33_1339_wire_constant RPIPE_noblock_obuf_3_4_1341_wire) ( pkt_3_e_word_1337 ) $fullrate
    // $buffering  $out phi_stmt_1337 pkt_3_e_word_1337 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 362
    // noblock_obuf_4_4
    $ioport $in [RPIPE_noblock_obuf_4_4_1346_inst] (noblock_obuf_4_4) (RPIPE_noblock_obuf_4_4_1346_wire) $guard ( read_from_4_1470 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_4_1346_inst RPIPE_noblock_obuf_4_4_1346_wire 1
    # $phi [phi_stmt_1342] (R_ZERO_33_1344_wire_constant RPIPE_noblock_obuf_4_4_1346_wire) ( pkt_4_e_word_1342 ) $fullrate
    // $buffering  $out phi_stmt_1342 pkt_4_e_word_1342 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 364
    # := [next_active_packet_1414_1350_buf] (next_active_packet_1414) (next_active_packet_1414_1350_buffered)     $fullrate
    $buffering $out next_active_packet_1414_1350_buf next_active_packet_1414_1350_buffered  1
    # $phi [phi_stmt_1347] (R_ZERO_3_1349_wire_constant next_active_packet_1414_1350_buffered) ( active_packet_1347 ) $fullrate
    // $buffering  $out phi_stmt_1347 active_packet_1347 2
    // 			$phi pkt_priority := 			  ZERO_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 366
    # := [next_pkt_priority_1414_1354_buf] (next_pkt_priority_1414) (next_pkt_priority_1414_1354_buffered)     $fullrate
    $buffering $out next_pkt_priority_1414_1354_buf next_pkt_priority_1414_1354_buffered  1
    # $phi [phi_stmt_1351] (R_ZERO_3_1353_wire_constant next_pkt_priority_1414_1354_buffered) ( pkt_priority_1351 ) $fullrate
    // $buffering  $out phi_stmt_1351 pkt_priority_1351 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 369
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1359_inst] (pkt_1_e_word_1327 konst_1358_wire_constant) (p1_valid_1360)   $flowthrough 
    $delay BITSEL_u33_u1_1359_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 370
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1364_inst] (pkt_2_e_word_1332 konst_1363_wire_constant) (p2_valid_1365)   $flowthrough 
    $delay BITSEL_u33_u1_1364_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 371
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1369_inst] (pkt_3_e_word_1337 konst_1368_wire_constant) (p3_valid_1370)   $flowthrough 
    $delay BITSEL_u33_u1_1369_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 372
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1374_inst] (pkt_4_e_word_1342 konst_1373_wire_constant) (p4_valid_1375)   $flowthrough 
    $delay BITSEL_u33_u1_1374_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 373
    // (active_packet == 1 )
    ==[EQ_u3_u1_1379_inst] (active_packet_1347 konst_1378_wire_constant) (EQ_u3_u1_1379_wire)   $flowthrough 
    $delay EQ_u3_u1_1379_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1382_inst] (EQ_u3_u1_1379_wire p1_valid_1360 konst_1381_wire_constant) (MUX_1382_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1385_inst] (active_packet_1347 konst_1384_wire_constant) (EQ_u3_u1_1385_wire)   $flowthrough 
    $delay EQ_u3_u1_1385_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1388_inst] (EQ_u3_u1_1385_wire p2_valid_1365 konst_1387_wire_constant) (MUX_1388_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1389_inst] (MUX_1382_wire MUX_1388_wire) (OR_u1_u1_1389_wire)   $flowthrough 
    $delay OR_u1_u1_1389_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1392_inst] (active_packet_1347 konst_1391_wire_constant) (EQ_u3_u1_1392_wire)   $flowthrough 
    $delay EQ_u3_u1_1392_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1395_inst] (EQ_u3_u1_1392_wire p3_valid_1370 konst_1394_wire_constant) (MUX_1395_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1398_inst] (active_packet_1347 konst_1397_wire_constant) (EQ_u3_u1_1398_wire)   $flowthrough 
    $delay EQ_u3_u1_1398_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1401_inst] (EQ_u3_u1_1398_wire p4_valid_1375 konst_1400_wire_constant) (MUX_1401_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1402_inst] (MUX_1395_wire MUX_1401_wire) (OR_u1_u1_1402_wire)   $flowthrough 
    $delay OR_u1_u1_1402_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1403_inst] (OR_u1_u1_1389_wire OR_u1_u1_1402_wire) (valid_active_pkt_word_read_1404)   $flowthrough 
    $delay OR_u1_u1_1403_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 374
    $call [call_stmt_1414_call] $module prioritySelect(down_counter_1323 active_packet_1347 pkt_priority_1351 p1_valid_1360 p2_valid_1365 p3_valid_1370 p4_valid_1375) (next_active_packet_1414 next_pkt_priority_1414)   $flowthrough $fullrate
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 375
    // (p1_valid | p2_valid)
    |[OR_u1_u1_1418_inst] (p1_valid_1360 p2_valid_1365) (OR_u1_u1_1418_wire)   $flowthrough 
    $delay OR_u1_u1_1418_inst 0
    // (p3_valid | p4_valid)
    |[OR_u1_u1_1421_inst] (p3_valid_1370 p4_valid_1375) (OR_u1_u1_1421_wire)   $flowthrough 
    $delay OR_u1_u1_1421_inst 0
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    |[OR_u1_u1_1422_inst] (OR_u1_u1_1418_wire OR_u1_u1_1421_wire) (OR_u1_u1_1422_wire)   $flowthrough 
    $delay OR_u1_u1_1422_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1425_inst] (down_counter_1323 konst_1424_wire_constant) (EQ_u8_u1_1425_wire)   $flowthrough 
    $delay EQ_u8_u1_1425_inst 0
    // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
    &[AND_u1_u1_1426_inst] (OR_u1_u1_1422_wire EQ_u8_u1_1425_wire) (started_new_packet_1427)   $flowthrough 
    $delay AND_u1_u1_1426_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 376
    // (down_counter - 1 )
    -[SUB_u8_u8_1434_inst] (down_counter_1323 konst_1433_wire_constant) (SUB_u8_u8_1434_wire)   $flowthrough 
    $delay SUB_u8_u8_1434_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1436_inst] (valid_active_pkt_word_read_1404 SUB_u8_u8_1434_wire down_counter_1323) (MUX_1436_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1437_inst] (started_new_packet_1427 konst_1430_wire_constant MUX_1436_wire) (next_down_counter_1438)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 377
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1441_inst] (p1_valid_1360) (NOT_u1_u1_1441_wire)   $flowthrough
    $delay NOT_u1_u1_1441_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1444_inst] (next_active_packet_1414 konst_1443_wire_constant) (EQ_u3_u1_1444_wire)   $flowthrough 
    $delay EQ_u3_u1_1444_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1445_inst] (NOT_u1_u1_1441_wire EQ_u3_u1_1444_wire) (read_from_1_1446)   $flowthrough 
    $delay OR_u1_u1_1445_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 378
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1449_inst] (p2_valid_1365) (NOT_u1_u1_1449_wire)   $flowthrough
    $delay NOT_u1_u1_1449_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1452_inst] (next_active_packet_1414 konst_1451_wire_constant) (EQ_u3_u1_1452_wire)   $flowthrough 
    $delay EQ_u3_u1_1452_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1453_inst] (NOT_u1_u1_1449_wire EQ_u3_u1_1452_wire) (read_from_2_1454)   $flowthrough 
    $delay OR_u1_u1_1453_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 379
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1457_inst] (p3_valid_1370) (NOT_u1_u1_1457_wire)   $flowthrough
    $delay NOT_u1_u1_1457_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1460_inst] (next_active_packet_1414 konst_1459_wire_constant) (EQ_u3_u1_1460_wire)   $flowthrough 
    $delay EQ_u3_u1_1460_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1461_inst] (NOT_u1_u1_1457_wire EQ_u3_u1_1460_wire) (read_from_3_1462)   $flowthrough 
    $delay OR_u1_u1_1461_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 380
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1465_inst] (p4_valid_1375) (NOT_u1_u1_1465_wire)   $flowthrough
    $delay NOT_u1_u1_1465_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1468_inst] (next_active_packet_1414 konst_1467_wire_constant) (EQ_u3_u1_1468_wire)   $flowthrough 
    $delay EQ_u3_u1_1468_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1469_inst] (NOT_u1_u1_1465_wire EQ_u3_u1_1468_wire) (read_from_4_1470)   $flowthrough 
    $delay OR_u1_u1_1469_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 381
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1474_inst] (next_active_packet_1414 konst_1473_wire_constant) (EQ_u3_u1_1474_wire)   $flowthrough 
    $delay EQ_u3_u1_1474_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1476_inst] (pkt_1_e_word_1327 31 0) (slice_1476_wire)  $flowthrough
    $delay slice_1476_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1478_inst] (EQ_u3_u1_1474_wire slice_1476_wire konst_1477_wire_constant) (MUX_1478_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1481_inst] (next_active_packet_1414 konst_1480_wire_constant) (EQ_u3_u1_1481_wire)   $flowthrough 
    $delay EQ_u3_u1_1481_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1483_inst] (pkt_2_e_word_1332 31 0) (slice_1483_wire)  $flowthrough
    $delay slice_1483_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1485_inst] (EQ_u3_u1_1481_wire slice_1483_wire konst_1484_wire_constant) (MUX_1485_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1486_inst] (MUX_1478_wire MUX_1485_wire) (OR_u32_u32_1486_wire)   $flowthrough 
    $delay OR_u32_u32_1486_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1489_inst] (next_active_packet_1414 konst_1488_wire_constant) (EQ_u3_u1_1489_wire)   $flowthrough 
    $delay EQ_u3_u1_1489_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1491_inst] (pkt_3_e_word_1337 31 0) (slice_1491_wire)  $flowthrough
    $delay slice_1491_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1493_inst] (EQ_u3_u1_1489_wire slice_1491_wire konst_1492_wire_constant) (MUX_1493_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1496_inst] (next_active_packet_1414 konst_1495_wire_constant) (EQ_u3_u1_1496_wire)   $flowthrough 
    $delay EQ_u3_u1_1496_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1498_inst] (pkt_4_e_word_1342 31 0) (slice_1498_wire)  $flowthrough
    $delay slice_1498_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1500_inst] (EQ_u3_u1_1496_wire slice_1498_wire konst_1499_wire_constant) (MUX_1500_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1501_inst] (MUX_1493_wire MUX_1500_wire) (OR_u32_u32_1501_wire)   $flowthrough 
    $delay OR_u32_u32_1501_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1502_inst] (OR_u32_u32_1486_wire OR_u32_u32_1501_wire) (data_to_out_1503)   $flowthrough 
    $delay OR_u32_u32_1502_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 382
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1507_inst] (next_active_packet_1414 konst_1506_wire_constant) (EQ_u3_u1_1507_wire)   $flowthrough 
    $delay EQ_u3_u1_1507_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1510_inst] (EQ_u3_u1_1507_wire p1_valid_1360 konst_1509_wire_constant) (MUX_1510_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1513_inst] (next_active_packet_1414 konst_1512_wire_constant) (EQ_u3_u1_1513_wire)   $flowthrough 
    $delay EQ_u3_u1_1513_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1516_inst] (EQ_u3_u1_1513_wire p2_valid_1365 konst_1515_wire_constant) (MUX_1516_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1517_inst] (MUX_1510_wire MUX_1516_wire) (OR_u1_u1_1517_wire)   $flowthrough 
    $delay OR_u1_u1_1517_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1520_inst] (next_active_packet_1414 konst_1519_wire_constant) (EQ_u3_u1_1520_wire)   $flowthrough 
    $delay EQ_u3_u1_1520_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1523_inst] (EQ_u3_u1_1520_wire p3_valid_1370 konst_1522_wire_constant) (MUX_1523_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1526_inst] (next_active_packet_1414 konst_1525_wire_constant) (EQ_u3_u1_1526_wire)   $flowthrough 
    $delay EQ_u3_u1_1526_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1529_inst] (EQ_u3_u1_1526_wire p4_valid_1375 konst_1528_wire_constant) (MUX_1529_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1530_inst] (MUX_1523_wire MUX_1529_wire) (OR_u1_u1_1530_wire)   $flowthrough 
    $delay OR_u1_u1_1530_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1531_inst] (OR_u1_u1_1517_wire OR_u1_u1_1530_wire) (send_flag_1532)   $flowthrough 
    $delay OR_u1_u1_1531_inst 0
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 383
    // out_data_4
    $ioport $out [WPIPE_out_data_4_1534_inst]  (data_to_out_1503) (out_data_4) $guard ( send_flag_1532 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1321
  //  file .Aa/switch2x2.opt.aa, line 351
  phi_stmt_1323 <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1323_entry_sample_req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1323_loopback_sample_req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1323_phi_mux_ack)
  next_down_counter_1438_1326_buf <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_down_counter_1326_Sample/req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_down_counter_1326_Update/req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_down_counter_1326_Sample/ack branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_down_counter_1326_Update/ack)
  phi_stmt_1327 <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1327_entry_sample_req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1327_loopback_sample_req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1327_phi_mux_ack)
  // noblock_obuf_1_4
  RPIPE_noblock_obuf_1_4_1331_inst <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_1_4_1331_Sample/rr branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_1_4_1331_Update/cr) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_1_4_1331_Sample/ra branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_1_4_1331_Update/ca)
  phi_stmt_1332 <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1332_entry_sample_req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1332_loopback_sample_req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1332_phi_mux_ack)
  // noblock_obuf_2_4
  RPIPE_noblock_obuf_2_4_1336_inst <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_2_4_1336_Sample/rr branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_2_4_1336_Update/cr) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_2_4_1336_Sample/ra branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_2_4_1336_Update/ca)
  phi_stmt_1337 <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1337_entry_sample_req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1337_loopback_sample_req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1337_phi_mux_ack)
  // noblock_obuf_3_4
  RPIPE_noblock_obuf_3_4_1341_inst <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_3_4_1341_Sample/rr branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_3_4_1341_Update/cr) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_3_4_1341_Sample/ra branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_3_4_1341_Update/ca)
  phi_stmt_1342 <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1342_entry_sample_req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1342_loopback_sample_req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1342_phi_mux_ack)
  // noblock_obuf_4_4
  RPIPE_noblock_obuf_4_4_1346_inst <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_4_4_1346_Sample/rr branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_4_4_1346_Update/cr) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_4_4_1346_Sample/ra branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/RPIPE_noblock_obuf_4_4_1346_Update/ca)
  phi_stmt_1347 <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1347_entry_sample_req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1347_loopback_sample_req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1347_phi_mux_ack)
  next_active_packet_1414_1350_buf <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_active_packet_1350_Sample/req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_active_packet_1350_Update/req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_active_packet_1350_Sample/ack branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_active_packet_1350_Update/ack)
  phi_stmt_1351 <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1351_entry_sample_req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1351_loopback_sample_req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/phi_stmt_1351_phi_mux_ack)
  next_pkt_priority_1414_1354_buf <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_pkt_priority_1354_Sample/req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_pkt_priority_1354_Update/req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_pkt_priority_1354_Sample/ack branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/R_next_pkt_priority_1354_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 369
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 370
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 371
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 372
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 373
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 374
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 375
  // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
  // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
  // (p1_valid | p2_valid)
  // p1_valid
  // p2_valid
  // (p3_valid | p4_valid)
  // p3_valid
  // p4_valid
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 376
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 377
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 378
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 379
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 380
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 381
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 382
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 383
  // data_to_out
  // out_data_4
  WPIPE_out_data_4_1534_inst <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/WPIPE_out_data_4_1534_Sample/req branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/WPIPE_out_data_4_1534_Update/req) (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/WPIPE_out_data_4_1534_Sample/ack branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/WPIPE_out_data_4_1534_Update/ack)
  do_while_stmt_1321_branch <=> (branch_block_stmt_1320/do_while_stmt_1321/do_while_stmt_1321_loop_body/condition_evaluated) (branch_block_stmt_1320/do_while_stmt_1321/loop_exit/ack branch_block_stmt_1320/do_while_stmt_1321/loop_taken/ack)
}
