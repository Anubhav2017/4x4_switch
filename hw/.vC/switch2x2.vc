// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data_1 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data_1] 32 $depth 2 
// $pipe  in_data_2 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data_2] 32 $depth 2 
// $pipe  in_data_3 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data_3] 32 $depth 2 
// $pipe  in_data_4 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data_4] 32 $depth 2 
// $noblock $pipe  noblock_obuf_1_1 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_1] 33 $depth 128 
// $noblock $pipe  noblock_obuf_1_2 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_2] 33 $depth 128 
// $noblock $pipe  noblock_obuf_1_3 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_3] 33 $depth 128 
// $noblock $pipe  noblock_obuf_1_4 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_4] 33 $depth 128 
// $noblock $pipe  noblock_obuf_2_1 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_1] 33 $depth 128 
// $noblock $pipe  noblock_obuf_2_2 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_2] 33 $depth 128 
// $noblock $pipe  noblock_obuf_2_3 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_3] 33 $depth 128 
// $noblock $pipe  noblock_obuf_2_4 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_4] 33 $depth 128 
// $noblock $pipe  noblock_obuf_3_1 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_1] 33 $depth 128 
// $noblock $pipe  noblock_obuf_3_2 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_2] 33 $depth 128 
// $noblock $pipe  noblock_obuf_3_3 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_3] 33 $depth 128 
// $noblock $pipe  noblock_obuf_3_4 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_4] 33 $depth 128 
// $noblock $pipe  noblock_obuf_4_1 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_1] 33 $depth 128 
// $noblock $pipe  noblock_obuf_4_2 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_2] 33 $depth 128 
// $noblock $pipe  noblock_obuf_4_3 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_3] 33 $depth 128 
// $noblock $pipe  noblock_obuf_4_4 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_4] 33 $depth 128 
// $pipe  out_data_1 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data_1] 32 $depth 2 
// $pipe  out_data_2 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data_2] 32 $depth 2 
// $pipe  out_data_3 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data_3] 32 $depth 2 
// $pipe  out_data_4 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data_4] 32 $depth 2 
$constant $W[ONE_1] : $int<1> := _b1// 1
$constant $W[ONE_2] : $int<2> := _b01// 1
$constant $W[ONE_3] : $int<3> := _b001// 1
$constant $W[ONE_33] : $int<33> := _b000000000000000000000000000000001// 1
$constant $W[ONE_8] : $int<8> := _b00000001// 1
$constant $W[ZERO_1] : $int<1> := _b0// 0
$constant $W[ZERO_2] : $int<2> := _b00// 0
$constant $W[ZERO_3] : $int<3> := _b000// 0
$constant $W[ZERO_33] : $int<33> := _b000000000000000000000000000000000// 0
$constant $W[ZERO_8] : $int<8> := _b00000000// 0
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/switch2x2.opt.aa, line 59
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/switch2x2.opt.aa, line 59
  }
  // end data-path
}
$module [inputPort_1_Daemon] 
{
  // pipe-declarations for block %inputPort_1_Daemon
  //  file .Aa/switch2x2.opt.aa, line 66
  // pipe-declarations for block %inputPort_1_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 71
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_64] // Branch Block  file .Aa/switch2x2.opt.aa, line 71
    {
      $P [branch_block_stmt_64__entry__]
      branch_block_stmt_64__entry__ <-| ($entry)
      $P [branch_block_stmt_64__exit__]
      branch_block_stmt_64__exit__ |-> ($exit)
      $P [do_while_stmt_65__entry__] 
      $P [do_while_stmt_65__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 73
      <o> [do_while_stmt_65]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_65__entry__] 
        $P[do_while_stmt_65__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_65_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_67
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_67_sample_start_] 
          $T[phi_stmt_67_sample_completed_] 
          $T[phi_stmt_67_update_start_] 
          $T[phi_stmt_67_update_completed_] 
          $T[phi_stmt_67_sample_start__ps] 
          phi_stmt_67_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_67_sample_completed__ps] 
          phi_stmt_67_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_67_update_start__ps] 
          phi_stmt_67_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_67_update_completed__ps] 
          phi_stmt_67_update_completed_ <-& (phi_stmt_67_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_67_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_67_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_67_update_start_)
          $T[phi_stmt_67_loopback_trigger] 
          phi_stmt_67_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_67_loopback_sample_req] 
          $T[phi_stmt_67_loopback_sample_req_ps] 
          phi_stmt_67_loopback_sample_req <-& (phi_stmt_67_loopback_sample_req_ps)
          phi_stmt_67_loopback_sample_req &-> ($null)
          $T[phi_stmt_67_entry_trigger] 
          phi_stmt_67_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_67_entry_sample_req] 
          $T[phi_stmt_67_entry_sample_req_ps] 
          phi_stmt_67_entry_sample_req <-& (phi_stmt_67_entry_sample_req_ps)
          phi_stmt_67_entry_sample_req &-> ($null)
          phi_stmt_67_update_start_ o<-& (phi_stmt_67_update_completed_ 0)
          phi_stmt_67_sample_start_ o<-& (phi_stmt_67_sample_completed_ 1)
          $T[phi_stmt_67_merged_reqs] 
          $T[phi_stmt_67_phi_mux_ack] 
          $T[phi_stmt_67_phi_mux_ack_ps] 
          phi_stmt_67_phi_mux_ack_ps <-& (phi_stmt_67_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_67_update_completed_)
          $T[type_cast_71_sample_start__ps] 
          $T[type_cast_71_sample_completed__ps] 
          $T[type_cast_71_update_start__ps] 
          $T[type_cast_71_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_71_sample_start_] 
          $T[type_cast_71_sample_completed_] 
          type_cast_71_sample_completed_ <-& (type_cast_71_sample_start_)
          $T[type_cast_71_update_start_] 
          $T [type_cast_71_update_completed_] $delay 
          type_cast_71_update_completed_ <-& (type_cast_71_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_71_sample_start_ <-& (type_cast_71_sample_start__ps)
          type_cast_71_update_start_ <-& (type_cast_71_update_start__ps)
          // Phi complete dependency.
          type_cast_71_sample_completed__ps <-& (type_cast_71_sample_completed_)
          type_cast_71_update_completed__ps <-& (type_cast_71_update_completed_)
          $T[R_next_count_down_72_sample_start__ps] 
          $T[R_next_count_down_72_sample_completed__ps] 
          $T[R_next_count_down_72_update_start__ps] 
          $T[R_next_count_down_72_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_72_sample_start_] 
          $T[R_next_count_down_72_sample_completed_] 
          $T[R_next_count_down_72_update_start_] 
          $T[R_next_count_down_72_update_completed_] 
          ;;[R_next_count_down_72_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_72_sample_start_ &-> (R_next_count_down_72_Sample)
          R_next_count_down_72_sample_completed_ <-& (R_next_count_down_72_Sample)
          ;;[R_next_count_down_72_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_72_update_start_ &-> (R_next_count_down_72_Update)
          R_next_count_down_72_update_completed_ <-& (R_next_count_down_72_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_72_sample_start_ <-& (R_next_count_down_72_sample_start__ps)
          R_next_count_down_72_update_start_ <-& (R_next_count_down_72_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_72_sample_completed__ps <-& (R_next_count_down_72_sample_completed_)
          R_next_count_down_72_update_completed__ps <-& (R_next_count_down_72_update_completed_)
          $phisequencer [ phi_stmt_67_phi_seq] : 
          phi_stmt_67_entry_trigger type_cast_71_sample_start__ps type_cast_71_sample_completed__ps type_cast_71_update_start__ps type_cast_71_update_completed__ps phi_stmt_67_loopback_trigger R_next_count_down_72_sample_start__ps R_next_count_down_72_sample_completed__ps R_next_count_down_72_update_start__ps R_next_count_down_72_update_completed__ps :
          phi_stmt_67_sample_start__ps phi_stmt_67_sample_completed__ps phi_stmt_67_update_start__ps phi_stmt_67_update_completed__ps :
          phi_stmt_67_entry_sample_req_ps phi_stmt_67_loopback_sample_req_ps : 
          phi_stmt_67_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_67
          // start:  single source PHI statement phi_stmt_73
          // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_73_sample_start_] 
          $T[phi_stmt_73_sample_completed_] 
          $T[phi_stmt_73_update_start_] 
          $T[phi_stmt_73_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_73_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_73_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_73_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_1
          $T[RPIPE_in_data_1_75_sample_start_] 
          $T[RPIPE_in_data_1_75_sample_completed_] 
          $T[RPIPE_in_data_1_75_update_start_] 
          $T[RPIPE_in_data_1_75_update_completed_] 
          ;;[RPIPE_in_data_1_75_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_1_75_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_1_75_sample_start_ &-> (RPIPE_in_data_1_75_Sample)
          RPIPE_in_data_1_75_sample_completed_ <-& (RPIPE_in_data_1_75_Sample)
          RPIPE_in_data_1_75_update_start_ <-& (RPIPE_in_data_1_75_sample_completed_)
          RPIPE_in_data_1_75_update_start_ &-> (RPIPE_in_data_1_75_Update)
          RPIPE_in_data_1_75_update_completed_ <-& (RPIPE_in_data_1_75_Update)
          RPIPE_in_data_1_75_sample_start_ o<-& (RPIPE_in_data_1_75_update_completed_ 0)
          // RAW reenables for in_data_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_1_75_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_1_75_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_1_75_update_start_)
          phi_stmt_73_update_completed_ <-& (RPIPE_in_data_1_75_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_73_update_completed_)
          // done: PHI Statement phi_stmt_73
          // start:  PHI statement phi_stmt_76
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_76_sample_start_] 
          $T[phi_stmt_76_sample_completed_] 
          $T[phi_stmt_76_update_start_] 
          $T[phi_stmt_76_update_completed_] 
          $T[phi_stmt_76_sample_start__ps] 
          phi_stmt_76_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_76_sample_completed__ps] 
          phi_stmt_76_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_76_update_start__ps] 
          phi_stmt_76_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_76_update_completed__ps] 
          phi_stmt_76_update_completed_ <-& (phi_stmt_76_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_76_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_76_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_76_update_start_)
          $T[phi_stmt_76_loopback_trigger] 
          phi_stmt_76_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_76_loopback_sample_req] 
          $T[phi_stmt_76_loopback_sample_req_ps] 
          phi_stmt_76_loopback_sample_req <-& (phi_stmt_76_loopback_sample_req_ps)
          phi_stmt_76_loopback_sample_req &-> ($null)
          $T[phi_stmt_76_entry_trigger] 
          phi_stmt_76_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_76_entry_sample_req] 
          $T[phi_stmt_76_entry_sample_req_ps] 
          phi_stmt_76_entry_sample_req <-& (phi_stmt_76_entry_sample_req_ps)
          phi_stmt_76_entry_sample_req &-> ($null)
          phi_stmt_76_update_start_ o<-& (phi_stmt_76_update_completed_ 0)
          phi_stmt_76_sample_start_ o<-& (phi_stmt_76_sample_completed_ 1)
          $T[phi_stmt_76_merged_reqs] 
          $T[phi_stmt_76_phi_mux_ack] 
          $T[phi_stmt_76_phi_mux_ack_ps] 
          phi_stmt_76_phi_mux_ack_ps <-& (phi_stmt_76_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_76_update_completed_)
          $T[konst_78_sample_start__ps] 
          $T[konst_78_sample_completed__ps] 
          $T[konst_78_update_start__ps] 
          $T[konst_78_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_78_sample_start_] 
          $T[konst_78_sample_completed_] 
          konst_78_sample_completed_ <-& (konst_78_sample_start_)
          $T[konst_78_update_start_] 
          $T [konst_78_update_completed_] $delay 
          konst_78_update_completed_ <-& (konst_78_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_78_sample_start_ <-& (konst_78_sample_start__ps)
          konst_78_update_start_ <-& (konst_78_update_start__ps)
          // Phi complete dependency.
          konst_78_sample_completed__ps <-& (konst_78_sample_completed_)
          konst_78_update_completed__ps <-& (konst_78_update_completed_)
          $T[R_next_last_dest_id_79_sample_start__ps] 
          $T[R_next_last_dest_id_79_sample_completed__ps] 
          $T[R_next_last_dest_id_79_update_start__ps] 
          $T[R_next_last_dest_id_79_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_79_sample_start_] 
          $T[R_next_last_dest_id_79_sample_completed_] 
          $T[R_next_last_dest_id_79_update_start_] 
          $T[R_next_last_dest_id_79_update_completed_] 
          ;;[R_next_last_dest_id_79_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_79_sample_start_ &-> (R_next_last_dest_id_79_Sample)
          R_next_last_dest_id_79_sample_completed_ <-& (R_next_last_dest_id_79_Sample)
          ;;[R_next_last_dest_id_79_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_79_update_start_ &-> (R_next_last_dest_id_79_Update)
          R_next_last_dest_id_79_update_completed_ <-& (R_next_last_dest_id_79_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_79_sample_start_ <-& (R_next_last_dest_id_79_sample_start__ps)
          R_next_last_dest_id_79_update_start_ <-& (R_next_last_dest_id_79_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_79_sample_completed__ps <-& (R_next_last_dest_id_79_sample_completed_)
          R_next_last_dest_id_79_update_completed__ps <-& (R_next_last_dest_id_79_update_completed_)
          $phisequencer [ phi_stmt_76_phi_seq] : 
          phi_stmt_76_entry_trigger konst_78_sample_start__ps konst_78_sample_completed__ps konst_78_update_start__ps konst_78_update_completed__ps phi_stmt_76_loopback_trigger R_next_last_dest_id_79_sample_start__ps R_next_last_dest_id_79_sample_completed__ps R_next_last_dest_id_79_update_start__ps R_next_last_dest_id_79_update_completed__ps :
          phi_stmt_76_sample_start__ps phi_stmt_76_sample_completed__ps phi_stmt_76_update_start__ps phi_stmt_76_update_completed__ps :
          phi_stmt_76_entry_sample_req_ps phi_stmt_76_loopback_sample_req_ps : 
          phi_stmt_76_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_76
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 83
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 84
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 85
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 86
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 87
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 88
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 89
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 90
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_1
          $T[WPIPE_noblock_obuf_1_1_121_sample_start_] 
          $T[WPIPE_noblock_obuf_1_1_121_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_1_121_update_start_] 
          $T[WPIPE_noblock_obuf_1_1_121_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_1_121 with guard R_send_to_1_120
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_1_121_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_1_121_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_1_121_sample_start_ &-> (WPIPE_noblock_obuf_1_1_121_Sample)
          WPIPE_noblock_obuf_1_1_121_sample_completed_ <-& (WPIPE_noblock_obuf_1_1_121_Sample)
          WPIPE_noblock_obuf_1_1_121_update_start_ <-& (WPIPE_noblock_obuf_1_1_121_sample_completed_)
          WPIPE_noblock_obuf_1_1_121_update_start_ &-> (WPIPE_noblock_obuf_1_1_121_Update)
          WPIPE_noblock_obuf_1_1_121_update_completed_ <-& (WPIPE_noblock_obuf_1_1_121_Update)
          WPIPE_noblock_obuf_1_1_121_sample_start_ o<-& (WPIPE_noblock_obuf_1_1_121_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_1_121_sample_start_
          WPIPE_noblock_obuf_1_1_121_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_1_121_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_1_121_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 91
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 92
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_2
          $T[WPIPE_noblock_obuf_1_2_130_sample_start_] 
          $T[WPIPE_noblock_obuf_1_2_130_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_2_130_update_start_] 
          $T[WPIPE_noblock_obuf_1_2_130_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_2_130 with guard R_send_to_2_129
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_2_130_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_2_130_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_2_130_sample_start_ &-> (WPIPE_noblock_obuf_1_2_130_Sample)
          WPIPE_noblock_obuf_1_2_130_sample_completed_ <-& (WPIPE_noblock_obuf_1_2_130_Sample)
          WPIPE_noblock_obuf_1_2_130_update_start_ <-& (WPIPE_noblock_obuf_1_2_130_sample_completed_)
          WPIPE_noblock_obuf_1_2_130_update_start_ &-> (WPIPE_noblock_obuf_1_2_130_Update)
          WPIPE_noblock_obuf_1_2_130_update_completed_ <-& (WPIPE_noblock_obuf_1_2_130_Update)
          WPIPE_noblock_obuf_1_2_130_sample_start_ o<-& (WPIPE_noblock_obuf_1_2_130_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_2_130_sample_start_
          WPIPE_noblock_obuf_1_2_130_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_2_130_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_2_130_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 93
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 94
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_3
          $T[WPIPE_noblock_obuf_1_3_139_sample_start_] 
          $T[WPIPE_noblock_obuf_1_3_139_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_3_139_update_start_] 
          $T[WPIPE_noblock_obuf_1_3_139_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_3_139 with guard R_send_to_3_138
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_3_139_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_3_139_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_3_139_sample_start_ &-> (WPIPE_noblock_obuf_1_3_139_Sample)
          WPIPE_noblock_obuf_1_3_139_sample_completed_ <-& (WPIPE_noblock_obuf_1_3_139_Sample)
          WPIPE_noblock_obuf_1_3_139_update_start_ <-& (WPIPE_noblock_obuf_1_3_139_sample_completed_)
          WPIPE_noblock_obuf_1_3_139_update_start_ &-> (WPIPE_noblock_obuf_1_3_139_Update)
          WPIPE_noblock_obuf_1_3_139_update_completed_ <-& (WPIPE_noblock_obuf_1_3_139_Update)
          WPIPE_noblock_obuf_1_3_139_sample_start_ o<-& (WPIPE_noblock_obuf_1_3_139_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_3_139_sample_start_
          WPIPE_noblock_obuf_1_3_139_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_3_139_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_3_139_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 95
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 96
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_4
          $T[WPIPE_noblock_obuf_1_4_148_sample_start_] 
          $T[WPIPE_noblock_obuf_1_4_148_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_4_148_update_start_] 
          $T[WPIPE_noblock_obuf_1_4_148_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_4_148 with guard R_send_to_4_147
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_67_update_completed_)
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_73_update_completed_)
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_76_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_67_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          phi_stmt_76_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_4_148_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_4_148_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_4_148_sample_start_ &-> (WPIPE_noblock_obuf_1_4_148_Sample)
          WPIPE_noblock_obuf_1_4_148_sample_completed_ <-& (WPIPE_noblock_obuf_1_4_148_Sample)
          WPIPE_noblock_obuf_1_4_148_update_start_ <-& (WPIPE_noblock_obuf_1_4_148_sample_completed_)
          WPIPE_noblock_obuf_1_4_148_update_start_ &-> (WPIPE_noblock_obuf_1_4_148_Update)
          WPIPE_noblock_obuf_1_4_148_update_completed_ <-& (WPIPE_noblock_obuf_1_4_148_Update)
          WPIPE_noblock_obuf_1_4_148_sample_start_ o<-& (WPIPE_noblock_obuf_1_4_148_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_4_148_sample_start_
          WPIPE_noblock_obuf_1_4_148_sample_start_ <-& (phi_stmt_73_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_4_148_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_73_update_start_ o<-& (WPIPE_noblock_obuf_1_4_148_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_1
          // read-dependencies for pipe in_data_1
          // write-dependencies for pipe in_data_1
          // signal write dependencies for in_data_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_65__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_65_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_65__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_65_loop_body : condition_evaluated
        $bind do_while_stmt_65__entry__  => do_while_stmt_65_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_65_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_65__exit__)
      }
      do_while_stmt_65__entry__ |-> (do_while_stmt_65)
      do_while_stmt_65__exit__ <-| (do_while_stmt_65)
      do_while_stmt_65__entry__ <-| (branch_block_stmt_64__entry__)
      do_while_stmt_65__exit__ |-> (branch_block_stmt_64__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 75
    // constant-object-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // constant-object-declarations for block %inputPort_1_Daemon
    //  file .Aa/switch2x2.opt.aa, line 66
    // constant-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 73
    // 1 
    $constant $W[konst_152_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 75
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_71_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    // 0 
    $constant $W[konst_78_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_83_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_97_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_100_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_111_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_117_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_126_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_135_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_144_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 73
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 75
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    $W[next_count_down_103_72_buffered] : $int<16>
    // count_down
    $W[count_down_67] : $int<16>
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // in_data_1
    $W[RPIPE_in_data_1_75_wire] : $int<32>
    // input_word
    $W[input_word_73] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    $W[next_last_dest_id_109_79_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_76] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 83
    // new_packet
    $W[new_packet_85] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 84
    // dest_id
    $W[dest_id_89] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 85
    // pkt_length
    $W[pkt_length_93] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 86
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_98_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_101_wire] : $int<16>
    // next_count_down
    $W[next_count_down_103] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 87
    // next_last_dest_id
    $W[next_last_dest_id_109] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 88
    // data_to_outport
    $W[data_to_outport_114] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 89
    // send_to_1
    $W[send_to_1_119] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 90
    // noblock_obuf_1_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 91
    // send_to_2
    $W[send_to_2_128] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 92
    // noblock_obuf_1_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 93
    // send_to_3
    $W[send_to_3_137] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 94
    // noblock_obuf_1_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 95
    // send_to_4
    $W[send_to_4_146] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 96
    // noblock_obuf_1_4
    // datapath-instances for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 71
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 73
    ==0? [do_while_stmt_65_branch] (konst_152_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 75
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 76
    # := [next_count_down_103_72_buf] (next_count_down_103) (next_count_down_103_72_buffered)     $fullrate
    $buffering $out next_count_down_103_72_buf next_count_down_103_72_buffered  1
    # $phi [phi_stmt_67] (type_cast_71_wire_constant next_count_down_103_72_buffered) ( count_down_67 ) $fullrate
    // $buffering  $out phi_stmt_67 count_down_67 2
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 78
    // in_data_1
    $ioport $in [RPIPE_in_data_1_75_inst] (in_data_1) (RPIPE_in_data_1_75_wire)  $fullrate 
    $buffering $out RPIPE_in_data_1_75_inst RPIPE_in_data_1_75_wire 1
    # := [ssrc_phi_stmt_73] (RPIPE_in_data_1_75_wire) (input_word_73)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 80
    # := [next_last_dest_id_109_79_buf] (next_last_dest_id_109) (next_last_dest_id_109_79_buffered)     $fullrate
    $buffering $out next_last_dest_id_109_79_buf next_last_dest_id_109_79_buffered  1
    # $phi [phi_stmt_76] (konst_78_wire_constant next_last_dest_id_109_79_buffered) ( last_dest_id_76 ) $fullrate
    // $buffering  $out phi_stmt_76 last_dest_id_76 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 83
    // (count_down == 0 )
    ==[EQ_u16_u1_84_inst] (count_down_67 konst_83_wire_constant) (new_packet_85)   $flowthrough 
    $delay EQ_u16_u1_84_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 84
    // ( $slice input_word 31 24 ) 
    [:] [slice_88_inst] (input_word_73 31 24) (dest_id_89)  $flowthrough
    $delay slice_88_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 85
    // ( $slice input_word 23 8 ) 
    [:] [slice_92_inst] (input_word_73 23 8) (pkt_length_93)  $flowthrough
    $delay slice_92_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 86
    // (pkt_length - 1 )
    -[SUB_u16_u16_98_inst] (pkt_length_93 konst_97_wire_constant) (SUB_u16_u16_98_wire)   $flowthrough 
    $delay SUB_u16_u16_98_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_101_inst] (count_down_67 konst_100_wire_constant) (SUB_u16_u16_101_wire)   $flowthrough 
    $delay SUB_u16_u16_101_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_102_inst] (new_packet_85 SUB_u16_u16_98_wire SUB_u16_u16_101_wire) (next_count_down_103)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 87
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_108_inst] (new_packet_85 dest_id_89 last_dest_id_76) (next_last_dest_id_109)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 88
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_113_inst] (R_ONE_1_111_wire_constant input_word_73) (data_to_outport_114)   $flowthrough 
    $delay CONCAT_u1_u33_113_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 89
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_118_inst] (next_last_dest_id_109 konst_117_wire_constant) (send_to_1_119)   $flowthrough 
    $delay EQ_u8_u1_118_inst 0
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 90
    // noblock_obuf_1_1
    $ioport $out [WPIPE_noblock_obuf_1_1_121_inst]  (data_to_outport_114) (noblock_obuf_1_1) $guard ( send_to_1_119 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 91
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_127_inst] (next_last_dest_id_109 konst_126_wire_constant) (send_to_2_128)   $flowthrough 
    $delay EQ_u8_u1_127_inst 0
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 92
    // noblock_obuf_1_2
    $ioport $out [WPIPE_noblock_obuf_1_2_130_inst]  (data_to_outport_114) (noblock_obuf_1_2) $guard ( send_to_2_128 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 93
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_136_inst] (next_last_dest_id_109 konst_135_wire_constant) (send_to_3_137)   $flowthrough 
    $delay EQ_u8_u1_136_inst 0
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 94
    // noblock_obuf_1_3
    $ioport $out [WPIPE_noblock_obuf_1_3_139_inst]  (data_to_outport_114) (noblock_obuf_1_3) $guard ( send_to_3_137 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 95
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_145_inst] (next_last_dest_id_109 konst_144_wire_constant) (send_to_4_146)   $flowthrough 
    $delay EQ_u8_u1_145_inst 0
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 96
    // noblock_obuf_1_4
    $ioport $out [WPIPE_noblock_obuf_1_4_148_inst]  (data_to_outport_114) (noblock_obuf_1_4) $guard ( send_to_4_146 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_65
  //  file .Aa/switch2x2.opt.aa, line 73
  phi_stmt_67 <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_entry_sample_req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_loopback_sample_req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_67_phi_mux_ack)
  next_count_down_103_72_buf <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_72_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_72_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_72_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_count_down_72_Update/ack)
  // in_data_1
  RPIPE_in_data_1_75_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Sample/rr branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Update/cr) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Sample/ra branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/RPIPE_in_data_1_75_Update/ca)
  phi_stmt_76 <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_entry_sample_req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_loopback_sample_req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/phi_stmt_76_phi_mux_ack)
  next_last_dest_id_109_79_buf <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/R_next_last_dest_id_79_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 83
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 84
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 85
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 86
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 87
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 88
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 89
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 90
  // data_to_outport
  // noblock_obuf_1_1
  WPIPE_noblock_obuf_1_1_121_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_1_121_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 91
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 92
  // data_to_outport
  // noblock_obuf_1_2
  WPIPE_noblock_obuf_1_2_130_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_2_130_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 93
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 94
  // data_to_outport
  // noblock_obuf_1_3
  WPIPE_noblock_obuf_1_3_139_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_3_139_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 95
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 96
  // data_to_outport
  // noblock_obuf_1_4
  WPIPE_noblock_obuf_1_4_148_inst <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Sample/req branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Update/req) (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Sample/ack branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/WPIPE_noblock_obuf_1_4_148_Update/ack)
  do_while_stmt_65_branch <=> (branch_block_stmt_64/do_while_stmt_65/do_while_stmt_65_loop_body/condition_evaluated) (branch_block_stmt_64/do_while_stmt_65/loop_exit/ack branch_block_stmt_64/do_while_stmt_65/loop_taken/ack)
}
$module [inputPort_2_Daemon] 
{
  // pipe-declarations for block %inputPort_2_Daemon
  //  file .Aa/switch2x2.opt.aa, line 100
  // pipe-declarations for block %inputPort_2_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 105
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_156] // Branch Block  file .Aa/switch2x2.opt.aa, line 105
    {
      $P [branch_block_stmt_156__entry__]
      branch_block_stmt_156__entry__ <-| ($entry)
      $P [branch_block_stmt_156__exit__]
      branch_block_stmt_156__exit__ |-> ($exit)
      $P [do_while_stmt_157__entry__] 
      $P [do_while_stmt_157__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 107
      <o> [do_while_stmt_157]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_157__entry__] 
        $P[do_while_stmt_157__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_157_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_159
          // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_159_sample_start_] 
          $T[phi_stmt_159_sample_completed_] 
          $T[phi_stmt_159_update_start_] 
          $T[phi_stmt_159_update_completed_] 
          $T[phi_stmt_159_sample_start__ps] 
          phi_stmt_159_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_159_sample_completed__ps] 
          phi_stmt_159_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_159_update_start__ps] 
          phi_stmt_159_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_159_update_completed__ps] 
          phi_stmt_159_update_completed_ <-& (phi_stmt_159_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_159_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_159_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_159_update_start_)
          $T[phi_stmt_159_loopback_trigger] 
          phi_stmt_159_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_159_loopback_sample_req] 
          $T[phi_stmt_159_loopback_sample_req_ps] 
          phi_stmt_159_loopback_sample_req <-& (phi_stmt_159_loopback_sample_req_ps)
          phi_stmt_159_loopback_sample_req &-> ($null)
          $T[phi_stmt_159_entry_trigger] 
          phi_stmt_159_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_159_entry_sample_req] 
          $T[phi_stmt_159_entry_sample_req_ps] 
          phi_stmt_159_entry_sample_req <-& (phi_stmt_159_entry_sample_req_ps)
          phi_stmt_159_entry_sample_req &-> ($null)
          phi_stmt_159_update_start_ o<-& (phi_stmt_159_update_completed_ 0)
          phi_stmt_159_sample_start_ o<-& (phi_stmt_159_sample_completed_ 1)
          $T[phi_stmt_159_merged_reqs] 
          $T[phi_stmt_159_phi_mux_ack] 
          $T[phi_stmt_159_phi_mux_ack_ps] 
          phi_stmt_159_phi_mux_ack_ps <-& (phi_stmt_159_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_159_update_completed_)
          $T[R_next_count_down_161_sample_start__ps] 
          $T[R_next_count_down_161_sample_completed__ps] 
          $T[R_next_count_down_161_update_start__ps] 
          $T[R_next_count_down_161_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_count_down_161_sample_start_] 
          $T[R_next_count_down_161_sample_completed_] 
          $T[R_next_count_down_161_update_start_] 
          $T[R_next_count_down_161_update_completed_] 
          ;;[R_next_count_down_161_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_161_sample_start_ &-> (R_next_count_down_161_Sample)
          R_next_count_down_161_sample_completed_ <-& (R_next_count_down_161_Sample)
          ;;[R_next_count_down_161_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_161_update_start_ &-> (R_next_count_down_161_Update)
          R_next_count_down_161_update_completed_ <-& (R_next_count_down_161_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_161_sample_start_ <-& (R_next_count_down_161_sample_start__ps)
          R_next_count_down_161_update_start_ <-& (R_next_count_down_161_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_161_sample_completed__ps <-& (R_next_count_down_161_sample_completed_)
          R_next_count_down_161_update_completed__ps <-& (R_next_count_down_161_update_completed_)
          $T[type_cast_163_sample_start__ps] 
          $T[type_cast_163_sample_completed__ps] 
          $T[type_cast_163_update_start__ps] 
          $T[type_cast_163_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_163_sample_start_] 
          $T[type_cast_163_sample_completed_] 
          type_cast_163_sample_completed_ <-& (type_cast_163_sample_start_)
          $T[type_cast_163_update_start_] 
          $T [type_cast_163_update_completed_] $delay 
          type_cast_163_update_completed_ <-& (type_cast_163_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_163_sample_start_ <-& (type_cast_163_sample_start__ps)
          type_cast_163_update_start_ <-& (type_cast_163_update_start__ps)
          // Phi complete dependency.
          type_cast_163_sample_completed__ps <-& (type_cast_163_sample_completed_)
          type_cast_163_update_completed__ps <-& (type_cast_163_update_completed_)
          $phisequencer [ phi_stmt_159_phi_seq] : 
          phi_stmt_159_loopback_trigger R_next_count_down_161_sample_start__ps R_next_count_down_161_sample_completed__ps R_next_count_down_161_update_start__ps R_next_count_down_161_update_completed__ps phi_stmt_159_entry_trigger type_cast_163_sample_start__ps type_cast_163_sample_completed__ps type_cast_163_update_start__ps type_cast_163_update_completed__ps :
          phi_stmt_159_sample_start__ps phi_stmt_159_sample_completed__ps phi_stmt_159_update_start__ps phi_stmt_159_update_completed__ps :
          phi_stmt_159_loopback_sample_req_ps phi_stmt_159_entry_sample_req_ps : 
          phi_stmt_159_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_159
          // start:  single source PHI statement phi_stmt_164
          // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_164_sample_start_] 
          $T[phi_stmt_164_sample_completed_] 
          $T[phi_stmt_164_update_start_] 
          $T[phi_stmt_164_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_164_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_164_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_164_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_2
          $T[RPIPE_in_data_2_166_sample_start_] 
          $T[RPIPE_in_data_2_166_sample_completed_] 
          $T[RPIPE_in_data_2_166_update_start_] 
          $T[RPIPE_in_data_2_166_update_completed_] 
          ;;[RPIPE_in_data_2_166_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_2_166_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_2_166_sample_start_ &-> (RPIPE_in_data_2_166_Sample)
          RPIPE_in_data_2_166_sample_completed_ <-& (RPIPE_in_data_2_166_Sample)
          RPIPE_in_data_2_166_update_start_ <-& (RPIPE_in_data_2_166_sample_completed_)
          RPIPE_in_data_2_166_update_start_ &-> (RPIPE_in_data_2_166_Update)
          RPIPE_in_data_2_166_update_completed_ <-& (RPIPE_in_data_2_166_Update)
          RPIPE_in_data_2_166_sample_start_ o<-& (RPIPE_in_data_2_166_update_completed_ 0)
          // RAW reenables for in_data_2
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_2_166_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_2_166_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_2_166_update_start_)
          phi_stmt_164_update_completed_ <-& (RPIPE_in_data_2_166_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_164_update_completed_)
          // done: PHI Statement phi_stmt_164
          // start:  PHI statement phi_stmt_167
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_167_sample_start_] 
          $T[phi_stmt_167_sample_completed_] 
          $T[phi_stmt_167_update_start_] 
          $T[phi_stmt_167_update_completed_] 
          $T[phi_stmt_167_sample_start__ps] 
          phi_stmt_167_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_167_sample_completed__ps] 
          phi_stmt_167_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_167_update_start__ps] 
          phi_stmt_167_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_167_update_completed__ps] 
          phi_stmt_167_update_completed_ <-& (phi_stmt_167_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_167_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_167_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_167_update_start_)
          $T[phi_stmt_167_loopback_trigger] 
          phi_stmt_167_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_167_loopback_sample_req] 
          $T[phi_stmt_167_loopback_sample_req_ps] 
          phi_stmt_167_loopback_sample_req <-& (phi_stmt_167_loopback_sample_req_ps)
          phi_stmt_167_loopback_sample_req &-> ($null)
          $T[phi_stmt_167_entry_trigger] 
          phi_stmt_167_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_167_entry_sample_req] 
          $T[phi_stmt_167_entry_sample_req_ps] 
          phi_stmt_167_entry_sample_req <-& (phi_stmt_167_entry_sample_req_ps)
          phi_stmt_167_entry_sample_req &-> ($null)
          phi_stmt_167_update_start_ o<-& (phi_stmt_167_update_completed_ 0)
          phi_stmt_167_sample_start_ o<-& (phi_stmt_167_sample_completed_ 1)
          $T[phi_stmt_167_merged_reqs] 
          $T[phi_stmt_167_phi_mux_ack] 
          $T[phi_stmt_167_phi_mux_ack_ps] 
          phi_stmt_167_phi_mux_ack_ps <-& (phi_stmt_167_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_167_update_completed_)
          $T[konst_169_sample_start__ps] 
          $T[konst_169_sample_completed__ps] 
          $T[konst_169_update_start__ps] 
          $T[konst_169_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_169_sample_start_] 
          $T[konst_169_sample_completed_] 
          konst_169_sample_completed_ <-& (konst_169_sample_start_)
          $T[konst_169_update_start_] 
          $T [konst_169_update_completed_] $delay 
          konst_169_update_completed_ <-& (konst_169_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_169_sample_start_ <-& (konst_169_sample_start__ps)
          konst_169_update_start_ <-& (konst_169_update_start__ps)
          // Phi complete dependency.
          konst_169_sample_completed__ps <-& (konst_169_sample_completed_)
          konst_169_update_completed__ps <-& (konst_169_update_completed_)
          $T[R_next_last_dest_id_170_sample_start__ps] 
          $T[R_next_last_dest_id_170_sample_completed__ps] 
          $T[R_next_last_dest_id_170_update_start__ps] 
          $T[R_next_last_dest_id_170_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_170_sample_start_] 
          $T[R_next_last_dest_id_170_sample_completed_] 
          $T[R_next_last_dest_id_170_update_start_] 
          $T[R_next_last_dest_id_170_update_completed_] 
          ;;[R_next_last_dest_id_170_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_170_sample_start_ &-> (R_next_last_dest_id_170_Sample)
          R_next_last_dest_id_170_sample_completed_ <-& (R_next_last_dest_id_170_Sample)
          ;;[R_next_last_dest_id_170_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_170_update_start_ &-> (R_next_last_dest_id_170_Update)
          R_next_last_dest_id_170_update_completed_ <-& (R_next_last_dest_id_170_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_170_sample_start_ <-& (R_next_last_dest_id_170_sample_start__ps)
          R_next_last_dest_id_170_update_start_ <-& (R_next_last_dest_id_170_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_170_sample_completed__ps <-& (R_next_last_dest_id_170_sample_completed_)
          R_next_last_dest_id_170_update_completed__ps <-& (R_next_last_dest_id_170_update_completed_)
          $phisequencer [ phi_stmt_167_phi_seq] : 
          phi_stmt_167_entry_trigger konst_169_sample_start__ps konst_169_sample_completed__ps konst_169_update_start__ps konst_169_update_completed__ps phi_stmt_167_loopback_trigger R_next_last_dest_id_170_sample_start__ps R_next_last_dest_id_170_sample_completed__ps R_next_last_dest_id_170_update_start__ps R_next_last_dest_id_170_update_completed__ps :
          phi_stmt_167_sample_start__ps phi_stmt_167_sample_completed__ps phi_stmt_167_update_start__ps phi_stmt_167_update_completed__ps :
          phi_stmt_167_entry_sample_req_ps phi_stmt_167_loopback_sample_req_ps : 
          phi_stmt_167_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_167
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 117
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 118
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 119
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 120
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 121
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 122
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 123
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 124
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_1
          $T[WPIPE_noblock_obuf_2_1_212_sample_start_] 
          $T[WPIPE_noblock_obuf_2_1_212_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_1_212_update_start_] 
          $T[WPIPE_noblock_obuf_2_1_212_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_1_212 with guard R_send_to_1_211
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_1_212_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_1_212_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_1_212_sample_start_ &-> (WPIPE_noblock_obuf_2_1_212_Sample)
          WPIPE_noblock_obuf_2_1_212_sample_completed_ <-& (WPIPE_noblock_obuf_2_1_212_Sample)
          WPIPE_noblock_obuf_2_1_212_update_start_ <-& (WPIPE_noblock_obuf_2_1_212_sample_completed_)
          WPIPE_noblock_obuf_2_1_212_update_start_ &-> (WPIPE_noblock_obuf_2_1_212_Update)
          WPIPE_noblock_obuf_2_1_212_update_completed_ <-& (WPIPE_noblock_obuf_2_1_212_Update)
          WPIPE_noblock_obuf_2_1_212_sample_start_ o<-& (WPIPE_noblock_obuf_2_1_212_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_1_212_sample_start_
          WPIPE_noblock_obuf_2_1_212_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_1_212_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_1_212_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 125
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 126
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_2
          $T[WPIPE_noblock_obuf_2_2_221_sample_start_] 
          $T[WPIPE_noblock_obuf_2_2_221_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_2_221_update_start_] 
          $T[WPIPE_noblock_obuf_2_2_221_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_2_221 with guard R_send_to_2_220
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_2_221_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_2_221_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_2_221_sample_start_ &-> (WPIPE_noblock_obuf_2_2_221_Sample)
          WPIPE_noblock_obuf_2_2_221_sample_completed_ <-& (WPIPE_noblock_obuf_2_2_221_Sample)
          WPIPE_noblock_obuf_2_2_221_update_start_ <-& (WPIPE_noblock_obuf_2_2_221_sample_completed_)
          WPIPE_noblock_obuf_2_2_221_update_start_ &-> (WPIPE_noblock_obuf_2_2_221_Update)
          WPIPE_noblock_obuf_2_2_221_update_completed_ <-& (WPIPE_noblock_obuf_2_2_221_Update)
          WPIPE_noblock_obuf_2_2_221_sample_start_ o<-& (WPIPE_noblock_obuf_2_2_221_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_2_221_sample_start_
          WPIPE_noblock_obuf_2_2_221_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_2_221_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_2_221_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 127
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 128
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_3
          $T[WPIPE_noblock_obuf_2_3_230_sample_start_] 
          $T[WPIPE_noblock_obuf_2_3_230_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_3_230_update_start_] 
          $T[WPIPE_noblock_obuf_2_3_230_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_3_230 with guard R_send_to_3_229
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_3_230_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_3_230_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_3_230_sample_start_ &-> (WPIPE_noblock_obuf_2_3_230_Sample)
          WPIPE_noblock_obuf_2_3_230_sample_completed_ <-& (WPIPE_noblock_obuf_2_3_230_Sample)
          WPIPE_noblock_obuf_2_3_230_update_start_ <-& (WPIPE_noblock_obuf_2_3_230_sample_completed_)
          WPIPE_noblock_obuf_2_3_230_update_start_ &-> (WPIPE_noblock_obuf_2_3_230_Update)
          WPIPE_noblock_obuf_2_3_230_update_completed_ <-& (WPIPE_noblock_obuf_2_3_230_Update)
          WPIPE_noblock_obuf_2_3_230_sample_start_ o<-& (WPIPE_noblock_obuf_2_3_230_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_3_230_sample_start_
          WPIPE_noblock_obuf_2_3_230_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_3_230_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_3_230_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 129
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 130
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_4
          $T[WPIPE_noblock_obuf_2_4_239_sample_start_] 
          $T[WPIPE_noblock_obuf_2_4_239_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_4_239_update_start_] 
          $T[WPIPE_noblock_obuf_2_4_239_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_4_239 with guard R_send_to_4_238
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_164_update_completed_)
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_167_update_completed_)
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_159_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          phi_stmt_167_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          phi_stmt_159_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_4_239_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_4_239_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_4_239_sample_start_ &-> (WPIPE_noblock_obuf_2_4_239_Sample)
          WPIPE_noblock_obuf_2_4_239_sample_completed_ <-& (WPIPE_noblock_obuf_2_4_239_Sample)
          WPIPE_noblock_obuf_2_4_239_update_start_ <-& (WPIPE_noblock_obuf_2_4_239_sample_completed_)
          WPIPE_noblock_obuf_2_4_239_update_start_ &-> (WPIPE_noblock_obuf_2_4_239_Update)
          WPIPE_noblock_obuf_2_4_239_update_completed_ <-& (WPIPE_noblock_obuf_2_4_239_Update)
          WPIPE_noblock_obuf_2_4_239_sample_start_ o<-& (WPIPE_noblock_obuf_2_4_239_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_4_239_sample_start_
          WPIPE_noblock_obuf_2_4_239_sample_start_ <-& (phi_stmt_164_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_4_239_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_164_update_start_ o<-& (WPIPE_noblock_obuf_2_4_239_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_2
          // read-dependencies for pipe in_data_2
          // write-dependencies for pipe in_data_2
          // signal write dependencies for in_data_2
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_157__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_157_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_157__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_157_loop_body : condition_evaluated
        $bind do_while_stmt_157__entry__  => do_while_stmt_157_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_157_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_157__exit__)
      }
      do_while_stmt_157__entry__ |-> (do_while_stmt_157)
      do_while_stmt_157__exit__ <-| (do_while_stmt_157)
      do_while_stmt_157__entry__ <-| (branch_block_stmt_156__entry__)
      do_while_stmt_157__exit__ |-> (branch_block_stmt_156__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 109
    // constant-object-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // constant-object-declarations for block %inputPort_2_Daemon
    //  file .Aa/switch2x2.opt.aa, line 100
    // constant-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 107
    // 1 
    $constant $W[konst_243_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 109
    // constant-declarations for phi:  			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_163_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    // 0 
    $constant $W[konst_169_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_174_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_188_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_191_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_202_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_208_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_217_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_226_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_235_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 107
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 109
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    $W[next_count_down_194_161_buffered] : $int<16>
    // count_down
    $W[count_down_159] : $int<16>
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // in_data_2
    $W[RPIPE_in_data_2_166_wire] : $int<32>
    // input_word
    $W[input_word_164] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    $W[next_last_dest_id_200_170_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_167] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 117
    // new_packet
    $W[new_packet_176] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 118
    // dest_id
    $W[dest_id_180] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 119
    // pkt_length
    $W[pkt_length_184] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 120
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_189_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_192_wire] : $int<16>
    // next_count_down
    $W[next_count_down_194] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 121
    // next_last_dest_id
    $W[next_last_dest_id_200] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 122
    // data_to_outport
    $W[data_to_outport_205] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 123
    // send_to_1
    $W[send_to_1_210] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 124
    // noblock_obuf_2_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 125
    // send_to_2
    $W[send_to_2_219] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 126
    // noblock_obuf_2_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 127
    // send_to_3
    $W[send_to_3_228] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 128
    // noblock_obuf_2_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 129
    // send_to_4
    $W[send_to_4_237] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 130
    // noblock_obuf_2_4
    // datapath-instances for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 105
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 107
    ==0? [do_while_stmt_157_branch] (konst_243_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 109
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 110
    # := [next_count_down_194_161_buf] (next_count_down_194) (next_count_down_194_161_buffered)     $fullrate
    $buffering $out next_count_down_194_161_buf next_count_down_194_161_buffered  1
    # $phi [phi_stmt_159] (next_count_down_194_161_buffered type_cast_163_wire_constant) ( count_down_159 ) $fullrate
    // $buffering  $out phi_stmt_159 count_down_159 2
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 112
    // in_data_2
    $ioport $in [RPIPE_in_data_2_166_inst] (in_data_2) (RPIPE_in_data_2_166_wire)  $fullrate 
    $buffering $out RPIPE_in_data_2_166_inst RPIPE_in_data_2_166_wire 1
    # := [ssrc_phi_stmt_164] (RPIPE_in_data_2_166_wire) (input_word_164)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 114
    # := [next_last_dest_id_200_170_buf] (next_last_dest_id_200) (next_last_dest_id_200_170_buffered)     $fullrate
    $buffering $out next_last_dest_id_200_170_buf next_last_dest_id_200_170_buffered  1
    # $phi [phi_stmt_167] (konst_169_wire_constant next_last_dest_id_200_170_buffered) ( last_dest_id_167 ) $fullrate
    // $buffering  $out phi_stmt_167 last_dest_id_167 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 117
    // (count_down == 0 )
    ==[EQ_u16_u1_175_inst] (count_down_159 konst_174_wire_constant) (new_packet_176)   $flowthrough 
    $delay EQ_u16_u1_175_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 118
    // ( $slice input_word 31 24 ) 
    [:] [slice_179_inst] (input_word_164 31 24) (dest_id_180)  $flowthrough
    $delay slice_179_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 119
    // ( $slice input_word 23 8 ) 
    [:] [slice_183_inst] (input_word_164 23 8) (pkt_length_184)  $flowthrough
    $delay slice_183_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 120
    // (pkt_length - 1 )
    -[SUB_u16_u16_189_inst] (pkt_length_184 konst_188_wire_constant) (SUB_u16_u16_189_wire)   $flowthrough 
    $delay SUB_u16_u16_189_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_192_inst] (count_down_159 konst_191_wire_constant) (SUB_u16_u16_192_wire)   $flowthrough 
    $delay SUB_u16_u16_192_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_193_inst] (new_packet_176 SUB_u16_u16_189_wire SUB_u16_u16_192_wire) (next_count_down_194)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 121
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_199_inst] (new_packet_176 dest_id_180 last_dest_id_167) (next_last_dest_id_200)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 122
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_204_inst] (R_ONE_1_202_wire_constant input_word_164) (data_to_outport_205)   $flowthrough 
    $delay CONCAT_u1_u33_204_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 123
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_209_inst] (next_last_dest_id_200 konst_208_wire_constant) (send_to_1_210)   $flowthrough 
    $delay EQ_u8_u1_209_inst 0
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 124
    // noblock_obuf_2_1
    $ioport $out [WPIPE_noblock_obuf_2_1_212_inst]  (data_to_outport_205) (noblock_obuf_2_1) $guard ( send_to_1_210 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 125
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_218_inst] (next_last_dest_id_200 konst_217_wire_constant) (send_to_2_219)   $flowthrough 
    $delay EQ_u8_u1_218_inst 0
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 126
    // noblock_obuf_2_2
    $ioport $out [WPIPE_noblock_obuf_2_2_221_inst]  (data_to_outport_205) (noblock_obuf_2_2) $guard ( send_to_2_219 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 127
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_227_inst] (next_last_dest_id_200 konst_226_wire_constant) (send_to_3_228)   $flowthrough 
    $delay EQ_u8_u1_227_inst 0
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 128
    // noblock_obuf_2_3
    $ioport $out [WPIPE_noblock_obuf_2_3_230_inst]  (data_to_outport_205) (noblock_obuf_2_3) $guard ( send_to_3_228 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 129
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_236_inst] (next_last_dest_id_200 konst_235_wire_constant) (send_to_4_237)   $flowthrough 
    $delay EQ_u8_u1_236_inst 0
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 130
    // noblock_obuf_2_4
    $ioport $out [WPIPE_noblock_obuf_2_4_239_inst]  (data_to_outport_205) (noblock_obuf_2_4) $guard ( send_to_4_237 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_157
  //  file .Aa/switch2x2.opt.aa, line 107
  phi_stmt_159 <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_loopback_sample_req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_entry_sample_req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_159_phi_mux_ack)
  next_count_down_194_161_buf <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_count_down_161_Update/ack)
  // in_data_2
  RPIPE_in_data_2_166_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Sample/rr branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Update/cr) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Sample/ra branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/RPIPE_in_data_2_166_Update/ca)
  phi_stmt_167 <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_entry_sample_req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_loopback_sample_req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/phi_stmt_167_phi_mux_ack)
  next_last_dest_id_200_170_buf <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/R_next_last_dest_id_170_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 117
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 118
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 119
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 120
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 121
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 122
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 123
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 124
  // data_to_outport
  // noblock_obuf_2_1
  WPIPE_noblock_obuf_2_1_212_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_1_212_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 125
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 126
  // data_to_outport
  // noblock_obuf_2_2
  WPIPE_noblock_obuf_2_2_221_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_2_221_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 127
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 128
  // data_to_outport
  // noblock_obuf_2_3
  WPIPE_noblock_obuf_2_3_230_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_3_230_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 129
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 130
  // data_to_outport
  // noblock_obuf_2_4
  WPIPE_noblock_obuf_2_4_239_inst <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Sample/req branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Update/req) (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Sample/ack branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/WPIPE_noblock_obuf_2_4_239_Update/ack)
  do_while_stmt_157_branch <=> (branch_block_stmt_156/do_while_stmt_157/do_while_stmt_157_loop_body/condition_evaluated) (branch_block_stmt_156/do_while_stmt_157/loop_exit/ack branch_block_stmt_156/do_while_stmt_157/loop_taken/ack)
}
$module [inputPort_3_Daemon] 
{
  // pipe-declarations for block %inputPort_3_Daemon
  //  file .Aa/switch2x2.opt.aa, line 134
  // pipe-declarations for block %inputPort_3_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 139
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_247] // Branch Block  file .Aa/switch2x2.opt.aa, line 139
    {
      $P [branch_block_stmt_247__entry__]
      branch_block_stmt_247__entry__ <-| ($entry)
      $P [branch_block_stmt_247__exit__]
      branch_block_stmt_247__exit__ |-> ($exit)
      $P [do_while_stmt_248__entry__] 
      $P [do_while_stmt_248__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 141
      <o> [do_while_stmt_248]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_248__entry__] 
        $P[do_while_stmt_248__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_248_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_250
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_250_sample_start_] 
          $T[phi_stmt_250_sample_completed_] 
          $T[phi_stmt_250_update_start_] 
          $T[phi_stmt_250_update_completed_] 
          $T[phi_stmt_250_sample_start__ps] 
          phi_stmt_250_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_250_sample_completed__ps] 
          phi_stmt_250_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_250_update_start__ps] 
          phi_stmt_250_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_250_update_completed__ps] 
          phi_stmt_250_update_completed_ <-& (phi_stmt_250_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_250_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_250_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_250_update_start_)
          $T[phi_stmt_250_loopback_trigger] 
          phi_stmt_250_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_250_loopback_sample_req] 
          $T[phi_stmt_250_loopback_sample_req_ps] 
          phi_stmt_250_loopback_sample_req <-& (phi_stmt_250_loopback_sample_req_ps)
          phi_stmt_250_loopback_sample_req &-> ($null)
          $T[phi_stmt_250_entry_trigger] 
          phi_stmt_250_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_250_entry_sample_req] 
          $T[phi_stmt_250_entry_sample_req_ps] 
          phi_stmt_250_entry_sample_req <-& (phi_stmt_250_entry_sample_req_ps)
          phi_stmt_250_entry_sample_req &-> ($null)
          phi_stmt_250_update_start_ o<-& (phi_stmt_250_update_completed_ 0)
          phi_stmt_250_sample_start_ o<-& (phi_stmt_250_sample_completed_ 1)
          $T[phi_stmt_250_merged_reqs] 
          $T[phi_stmt_250_phi_mux_ack] 
          $T[phi_stmt_250_phi_mux_ack_ps] 
          phi_stmt_250_phi_mux_ack_ps <-& (phi_stmt_250_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_250_update_completed_)
          $T[type_cast_253_sample_start__ps] 
          $T[type_cast_253_sample_completed__ps] 
          $T[type_cast_253_update_start__ps] 
          $T[type_cast_253_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_253_sample_start_] 
          $T[type_cast_253_sample_completed_] 
          type_cast_253_sample_completed_ <-& (type_cast_253_sample_start_)
          $T[type_cast_253_update_start_] 
          $T [type_cast_253_update_completed_] $delay 
          type_cast_253_update_completed_ <-& (type_cast_253_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_253_sample_start_ <-& (type_cast_253_sample_start__ps)
          type_cast_253_update_start_ <-& (type_cast_253_update_start__ps)
          // Phi complete dependency.
          type_cast_253_sample_completed__ps <-& (type_cast_253_sample_completed_)
          type_cast_253_update_completed__ps <-& (type_cast_253_update_completed_)
          $T[R_next_count_down_254_sample_start__ps] 
          $T[R_next_count_down_254_sample_completed__ps] 
          $T[R_next_count_down_254_update_start__ps] 
          $T[R_next_count_down_254_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_254_sample_start_] 
          $T[R_next_count_down_254_sample_completed_] 
          $T[R_next_count_down_254_update_start_] 
          $T[R_next_count_down_254_update_completed_] 
          ;;[R_next_count_down_254_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_254_sample_start_ &-> (R_next_count_down_254_Sample)
          R_next_count_down_254_sample_completed_ <-& (R_next_count_down_254_Sample)
          ;;[R_next_count_down_254_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_254_update_start_ &-> (R_next_count_down_254_Update)
          R_next_count_down_254_update_completed_ <-& (R_next_count_down_254_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_254_sample_start_ <-& (R_next_count_down_254_sample_start__ps)
          R_next_count_down_254_update_start_ <-& (R_next_count_down_254_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_254_sample_completed__ps <-& (R_next_count_down_254_sample_completed_)
          R_next_count_down_254_update_completed__ps <-& (R_next_count_down_254_update_completed_)
          $phisequencer [ phi_stmt_250_phi_seq] : 
          phi_stmt_250_entry_trigger type_cast_253_sample_start__ps type_cast_253_sample_completed__ps type_cast_253_update_start__ps type_cast_253_update_completed__ps phi_stmt_250_loopback_trigger R_next_count_down_254_sample_start__ps R_next_count_down_254_sample_completed__ps R_next_count_down_254_update_start__ps R_next_count_down_254_update_completed__ps :
          phi_stmt_250_sample_start__ps phi_stmt_250_sample_completed__ps phi_stmt_250_update_start__ps phi_stmt_250_update_completed__ps :
          phi_stmt_250_entry_sample_req_ps phi_stmt_250_loopback_sample_req_ps : 
          phi_stmt_250_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_250
          // start:  single source PHI statement phi_stmt_255
          // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_255_sample_start_] 
          $T[phi_stmt_255_sample_completed_] 
          $T[phi_stmt_255_update_start_] 
          $T[phi_stmt_255_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_255_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_255_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_255_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_3
          $T[RPIPE_in_data_3_257_sample_start_] 
          $T[RPIPE_in_data_3_257_sample_completed_] 
          $T[RPIPE_in_data_3_257_update_start_] 
          $T[RPIPE_in_data_3_257_update_completed_] 
          ;;[RPIPE_in_data_3_257_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_3_257_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_3_257_sample_start_ &-> (RPIPE_in_data_3_257_Sample)
          RPIPE_in_data_3_257_sample_completed_ <-& (RPIPE_in_data_3_257_Sample)
          RPIPE_in_data_3_257_update_start_ <-& (RPIPE_in_data_3_257_sample_completed_)
          RPIPE_in_data_3_257_update_start_ &-> (RPIPE_in_data_3_257_Update)
          RPIPE_in_data_3_257_update_completed_ <-& (RPIPE_in_data_3_257_Update)
          RPIPE_in_data_3_257_sample_start_ o<-& (RPIPE_in_data_3_257_update_completed_ 0)
          // RAW reenables for in_data_3
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_3_257_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_3_257_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_3_257_update_start_)
          phi_stmt_255_update_completed_ <-& (RPIPE_in_data_3_257_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_255_update_completed_)
          // done: PHI Statement phi_stmt_255
          // start:  PHI statement phi_stmt_258
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_258_sample_start_] 
          $T[phi_stmt_258_sample_completed_] 
          $T[phi_stmt_258_update_start_] 
          $T[phi_stmt_258_update_completed_] 
          $T[phi_stmt_258_sample_start__ps] 
          phi_stmt_258_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_258_sample_completed__ps] 
          phi_stmt_258_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_258_update_start__ps] 
          phi_stmt_258_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_258_update_completed__ps] 
          phi_stmt_258_update_completed_ <-& (phi_stmt_258_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_258_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_258_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_258_update_start_)
          $T[phi_stmt_258_loopback_trigger] 
          phi_stmt_258_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_258_loopback_sample_req] 
          $T[phi_stmt_258_loopback_sample_req_ps] 
          phi_stmt_258_loopback_sample_req <-& (phi_stmt_258_loopback_sample_req_ps)
          phi_stmt_258_loopback_sample_req &-> ($null)
          $T[phi_stmt_258_entry_trigger] 
          phi_stmt_258_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_258_entry_sample_req] 
          $T[phi_stmt_258_entry_sample_req_ps] 
          phi_stmt_258_entry_sample_req <-& (phi_stmt_258_entry_sample_req_ps)
          phi_stmt_258_entry_sample_req &-> ($null)
          phi_stmt_258_update_start_ o<-& (phi_stmt_258_update_completed_ 0)
          phi_stmt_258_sample_start_ o<-& (phi_stmt_258_sample_completed_ 1)
          $T[phi_stmt_258_merged_reqs] 
          $T[phi_stmt_258_phi_mux_ack] 
          $T[phi_stmt_258_phi_mux_ack_ps] 
          phi_stmt_258_phi_mux_ack_ps <-& (phi_stmt_258_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_258_update_completed_)
          $T[konst_260_sample_start__ps] 
          $T[konst_260_sample_completed__ps] 
          $T[konst_260_update_start__ps] 
          $T[konst_260_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_260_sample_start_] 
          $T[konst_260_sample_completed_] 
          konst_260_sample_completed_ <-& (konst_260_sample_start_)
          $T[konst_260_update_start_] 
          $T [konst_260_update_completed_] $delay 
          konst_260_update_completed_ <-& (konst_260_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_260_sample_start_ <-& (konst_260_sample_start__ps)
          konst_260_update_start_ <-& (konst_260_update_start__ps)
          // Phi complete dependency.
          konst_260_sample_completed__ps <-& (konst_260_sample_completed_)
          konst_260_update_completed__ps <-& (konst_260_update_completed_)
          $T[R_next_last_dest_id_261_sample_start__ps] 
          $T[R_next_last_dest_id_261_sample_completed__ps] 
          $T[R_next_last_dest_id_261_update_start__ps] 
          $T[R_next_last_dest_id_261_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_261_sample_start_] 
          $T[R_next_last_dest_id_261_sample_completed_] 
          $T[R_next_last_dest_id_261_update_start_] 
          $T[R_next_last_dest_id_261_update_completed_] 
          ;;[R_next_last_dest_id_261_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_261_sample_start_ &-> (R_next_last_dest_id_261_Sample)
          R_next_last_dest_id_261_sample_completed_ <-& (R_next_last_dest_id_261_Sample)
          ;;[R_next_last_dest_id_261_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_261_update_start_ &-> (R_next_last_dest_id_261_Update)
          R_next_last_dest_id_261_update_completed_ <-& (R_next_last_dest_id_261_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_261_sample_start_ <-& (R_next_last_dest_id_261_sample_start__ps)
          R_next_last_dest_id_261_update_start_ <-& (R_next_last_dest_id_261_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_261_sample_completed__ps <-& (R_next_last_dest_id_261_sample_completed_)
          R_next_last_dest_id_261_update_completed__ps <-& (R_next_last_dest_id_261_update_completed_)
          $phisequencer [ phi_stmt_258_phi_seq] : 
          phi_stmt_258_entry_trigger konst_260_sample_start__ps konst_260_sample_completed__ps konst_260_update_start__ps konst_260_update_completed__ps phi_stmt_258_loopback_trigger R_next_last_dest_id_261_sample_start__ps R_next_last_dest_id_261_sample_completed__ps R_next_last_dest_id_261_update_start__ps R_next_last_dest_id_261_update_completed__ps :
          phi_stmt_258_sample_start__ps phi_stmt_258_sample_completed__ps phi_stmt_258_update_start__ps phi_stmt_258_update_completed__ps :
          phi_stmt_258_entry_sample_req_ps phi_stmt_258_loopback_sample_req_ps : 
          phi_stmt_258_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_258
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 151
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 152
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 153
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 154
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 155
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 156
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 157
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 158
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_1
          $T[WPIPE_noblock_obuf_3_1_303_sample_start_] 
          $T[WPIPE_noblock_obuf_3_1_303_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_1_303_update_start_] 
          $T[WPIPE_noblock_obuf_3_1_303_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_1_303 with guard R_send_to_1_302
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_1_303_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_1_303_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_1_303_sample_start_ &-> (WPIPE_noblock_obuf_3_1_303_Sample)
          WPIPE_noblock_obuf_3_1_303_sample_completed_ <-& (WPIPE_noblock_obuf_3_1_303_Sample)
          WPIPE_noblock_obuf_3_1_303_update_start_ <-& (WPIPE_noblock_obuf_3_1_303_sample_completed_)
          WPIPE_noblock_obuf_3_1_303_update_start_ &-> (WPIPE_noblock_obuf_3_1_303_Update)
          WPIPE_noblock_obuf_3_1_303_update_completed_ <-& (WPIPE_noblock_obuf_3_1_303_Update)
          WPIPE_noblock_obuf_3_1_303_sample_start_ o<-& (WPIPE_noblock_obuf_3_1_303_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_1_303_sample_start_
          WPIPE_noblock_obuf_3_1_303_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_1_303_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_1_303_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 159
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 160
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_2
          $T[WPIPE_noblock_obuf_3_2_312_sample_start_] 
          $T[WPIPE_noblock_obuf_3_2_312_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_2_312_update_start_] 
          $T[WPIPE_noblock_obuf_3_2_312_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_2_312 with guard R_send_to_2_311
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_2_312_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_2_312_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_2_312_sample_start_ &-> (WPIPE_noblock_obuf_3_2_312_Sample)
          WPIPE_noblock_obuf_3_2_312_sample_completed_ <-& (WPIPE_noblock_obuf_3_2_312_Sample)
          WPIPE_noblock_obuf_3_2_312_update_start_ <-& (WPIPE_noblock_obuf_3_2_312_sample_completed_)
          WPIPE_noblock_obuf_3_2_312_update_start_ &-> (WPIPE_noblock_obuf_3_2_312_Update)
          WPIPE_noblock_obuf_3_2_312_update_completed_ <-& (WPIPE_noblock_obuf_3_2_312_Update)
          WPIPE_noblock_obuf_3_2_312_sample_start_ o<-& (WPIPE_noblock_obuf_3_2_312_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_2_312_sample_start_
          WPIPE_noblock_obuf_3_2_312_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_2_312_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_2_312_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 161
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 162
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_3
          $T[WPIPE_noblock_obuf_3_3_321_sample_start_] 
          $T[WPIPE_noblock_obuf_3_3_321_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_3_321_update_start_] 
          $T[WPIPE_noblock_obuf_3_3_321_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_3_321 with guard R_send_to_3_320
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_3_321_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_3_321_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_3_321_sample_start_ &-> (WPIPE_noblock_obuf_3_3_321_Sample)
          WPIPE_noblock_obuf_3_3_321_sample_completed_ <-& (WPIPE_noblock_obuf_3_3_321_Sample)
          WPIPE_noblock_obuf_3_3_321_update_start_ <-& (WPIPE_noblock_obuf_3_3_321_sample_completed_)
          WPIPE_noblock_obuf_3_3_321_update_start_ &-> (WPIPE_noblock_obuf_3_3_321_Update)
          WPIPE_noblock_obuf_3_3_321_update_completed_ <-& (WPIPE_noblock_obuf_3_3_321_Update)
          WPIPE_noblock_obuf_3_3_321_sample_start_ o<-& (WPIPE_noblock_obuf_3_3_321_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_3_321_sample_start_
          WPIPE_noblock_obuf_3_3_321_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_3_321_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_3_321_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 163
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 164
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_4
          $T[WPIPE_noblock_obuf_3_4_330_sample_start_] 
          $T[WPIPE_noblock_obuf_3_4_330_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_4_330_update_start_] 
          $T[WPIPE_noblock_obuf_3_4_330_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_4_330 with guard R_send_to_4_329
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_250_update_completed_)
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_255_update_completed_)
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_258_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_250_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          phi_stmt_258_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_4_330_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_4_330_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_4_330_sample_start_ &-> (WPIPE_noblock_obuf_3_4_330_Sample)
          WPIPE_noblock_obuf_3_4_330_sample_completed_ <-& (WPIPE_noblock_obuf_3_4_330_Sample)
          WPIPE_noblock_obuf_3_4_330_update_start_ <-& (WPIPE_noblock_obuf_3_4_330_sample_completed_)
          WPIPE_noblock_obuf_3_4_330_update_start_ &-> (WPIPE_noblock_obuf_3_4_330_Update)
          WPIPE_noblock_obuf_3_4_330_update_completed_ <-& (WPIPE_noblock_obuf_3_4_330_Update)
          WPIPE_noblock_obuf_3_4_330_sample_start_ o<-& (WPIPE_noblock_obuf_3_4_330_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_4_330_sample_start_
          WPIPE_noblock_obuf_3_4_330_sample_start_ <-& (phi_stmt_255_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_4_330_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_255_update_start_ o<-& (WPIPE_noblock_obuf_3_4_330_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_3
          // read-dependencies for pipe in_data_3
          // write-dependencies for pipe in_data_3
          // signal write dependencies for in_data_3
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_248__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_248_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_248__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_248_loop_body : condition_evaluated
        $bind do_while_stmt_248__entry__  => do_while_stmt_248_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_248_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_248__exit__)
      }
      do_while_stmt_248__entry__ |-> (do_while_stmt_248)
      do_while_stmt_248__exit__ <-| (do_while_stmt_248)
      do_while_stmt_248__entry__ <-| (branch_block_stmt_247__entry__)
      do_while_stmt_248__exit__ |-> (branch_block_stmt_247__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 143
    // constant-object-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // constant-object-declarations for block %inputPort_3_Daemon
    //  file .Aa/switch2x2.opt.aa, line 134
    // constant-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 141
    // 1 
    $constant $W[konst_334_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 143
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_253_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    // 0 
    $constant $W[konst_260_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_265_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_279_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_282_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_293_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_299_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_308_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_317_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_326_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 141
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 143
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    $W[next_count_down_285_254_buffered] : $int<16>
    // count_down
    $W[count_down_250] : $int<16>
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // in_data_3
    $W[RPIPE_in_data_3_257_wire] : $int<32>
    // input_word
    $W[input_word_255] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    $W[next_last_dest_id_291_261_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_258] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 151
    // new_packet
    $W[new_packet_267] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 152
    // dest_id
    $W[dest_id_271] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 153
    // pkt_length
    $W[pkt_length_275] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 154
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_280_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_283_wire] : $int<16>
    // next_count_down
    $W[next_count_down_285] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 155
    // next_last_dest_id
    $W[next_last_dest_id_291] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 156
    // data_to_outport
    $W[data_to_outport_296] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 157
    // send_to_1
    $W[send_to_1_301] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 158
    // noblock_obuf_3_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 159
    // send_to_2
    $W[send_to_2_310] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 160
    // noblock_obuf_3_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 161
    // send_to_3
    $W[send_to_3_319] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 162
    // noblock_obuf_3_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 163
    // send_to_4
    $W[send_to_4_328] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 164
    // noblock_obuf_3_4
    // datapath-instances for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 139
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 141
    ==0? [do_while_stmt_248_branch] (konst_334_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 143
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 144
    # := [next_count_down_285_254_buf] (next_count_down_285) (next_count_down_285_254_buffered)     $fullrate
    $buffering $out next_count_down_285_254_buf next_count_down_285_254_buffered  1
    # $phi [phi_stmt_250] (type_cast_253_wire_constant next_count_down_285_254_buffered) ( count_down_250 ) $fullrate
    // $buffering  $out phi_stmt_250 count_down_250 2
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 146
    // in_data_3
    $ioport $in [RPIPE_in_data_3_257_inst] (in_data_3) (RPIPE_in_data_3_257_wire)  $fullrate 
    $buffering $out RPIPE_in_data_3_257_inst RPIPE_in_data_3_257_wire 1
    # := [ssrc_phi_stmt_255] (RPIPE_in_data_3_257_wire) (input_word_255)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 148
    # := [next_last_dest_id_291_261_buf] (next_last_dest_id_291) (next_last_dest_id_291_261_buffered)     $fullrate
    $buffering $out next_last_dest_id_291_261_buf next_last_dest_id_291_261_buffered  1
    # $phi [phi_stmt_258] (konst_260_wire_constant next_last_dest_id_291_261_buffered) ( last_dest_id_258 ) $fullrate
    // $buffering  $out phi_stmt_258 last_dest_id_258 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 151
    // (count_down == 0 )
    ==[EQ_u16_u1_266_inst] (count_down_250 konst_265_wire_constant) (new_packet_267)   $flowthrough 
    $delay EQ_u16_u1_266_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 152
    // ( $slice input_word 31 24 ) 
    [:] [slice_270_inst] (input_word_255 31 24) (dest_id_271)  $flowthrough
    $delay slice_270_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 153
    // ( $slice input_word 23 8 ) 
    [:] [slice_274_inst] (input_word_255 23 8) (pkt_length_275)  $flowthrough
    $delay slice_274_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 154
    // (pkt_length - 1 )
    -[SUB_u16_u16_280_inst] (pkt_length_275 konst_279_wire_constant) (SUB_u16_u16_280_wire)   $flowthrough 
    $delay SUB_u16_u16_280_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_283_inst] (count_down_250 konst_282_wire_constant) (SUB_u16_u16_283_wire)   $flowthrough 
    $delay SUB_u16_u16_283_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_284_inst] (new_packet_267 SUB_u16_u16_280_wire SUB_u16_u16_283_wire) (next_count_down_285)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 155
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_290_inst] (new_packet_267 dest_id_271 last_dest_id_258) (next_last_dest_id_291)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 156
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_295_inst] (R_ONE_1_293_wire_constant input_word_255) (data_to_outport_296)   $flowthrough 
    $delay CONCAT_u1_u33_295_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 157
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_300_inst] (next_last_dest_id_291 konst_299_wire_constant) (send_to_1_301)   $flowthrough 
    $delay EQ_u8_u1_300_inst 0
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 158
    // noblock_obuf_3_1
    $ioport $out [WPIPE_noblock_obuf_3_1_303_inst]  (data_to_outport_296) (noblock_obuf_3_1) $guard ( send_to_1_301 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 159
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_309_inst] (next_last_dest_id_291 konst_308_wire_constant) (send_to_2_310)   $flowthrough 
    $delay EQ_u8_u1_309_inst 0
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 160
    // noblock_obuf_3_2
    $ioport $out [WPIPE_noblock_obuf_3_2_312_inst]  (data_to_outport_296) (noblock_obuf_3_2) $guard ( send_to_2_310 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 161
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_318_inst] (next_last_dest_id_291 konst_317_wire_constant) (send_to_3_319)   $flowthrough 
    $delay EQ_u8_u1_318_inst 0
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 162
    // noblock_obuf_3_3
    $ioport $out [WPIPE_noblock_obuf_3_3_321_inst]  (data_to_outport_296) (noblock_obuf_3_3) $guard ( send_to_3_319 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 163
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_327_inst] (next_last_dest_id_291 konst_326_wire_constant) (send_to_4_328)   $flowthrough 
    $delay EQ_u8_u1_327_inst 0
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 164
    // noblock_obuf_3_4
    $ioport $out [WPIPE_noblock_obuf_3_4_330_inst]  (data_to_outport_296) (noblock_obuf_3_4) $guard ( send_to_4_328 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_248
  //  file .Aa/switch2x2.opt.aa, line 141
  phi_stmt_250 <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_entry_sample_req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_loopback_sample_req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_250_phi_mux_ack)
  next_count_down_285_254_buf <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_count_down_254_Update/ack)
  // in_data_3
  RPIPE_in_data_3_257_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Sample/rr branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Update/cr) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Sample/ra branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/RPIPE_in_data_3_257_Update/ca)
  phi_stmt_258 <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_entry_sample_req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_loopback_sample_req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/phi_stmt_258_phi_mux_ack)
  next_last_dest_id_291_261_buf <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/R_next_last_dest_id_261_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 151
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 152
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 153
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 154
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 155
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 156
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 157
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 158
  // data_to_outport
  // noblock_obuf_3_1
  WPIPE_noblock_obuf_3_1_303_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_1_303_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 159
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 160
  // data_to_outport
  // noblock_obuf_3_2
  WPIPE_noblock_obuf_3_2_312_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_2_312_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 161
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 162
  // data_to_outport
  // noblock_obuf_3_3
  WPIPE_noblock_obuf_3_3_321_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_3_321_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 163
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 164
  // data_to_outport
  // noblock_obuf_3_4
  WPIPE_noblock_obuf_3_4_330_inst <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Sample/req branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Update/req) (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Sample/ack branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/WPIPE_noblock_obuf_3_4_330_Update/ack)
  do_while_stmt_248_branch <=> (branch_block_stmt_247/do_while_stmt_248/do_while_stmt_248_loop_body/condition_evaluated) (branch_block_stmt_247/do_while_stmt_248/loop_exit/ack branch_block_stmt_247/do_while_stmt_248/loop_taken/ack)
}
$module [inputPort_4_Daemon] 
{
  // pipe-declarations for block %inputPort_4_Daemon
  //  file .Aa/switch2x2.opt.aa, line 168
  // pipe-declarations for block %inputPort_4_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 173
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_338] // Branch Block  file .Aa/switch2x2.opt.aa, line 173
    {
      $P [branch_block_stmt_338__entry__]
      branch_block_stmt_338__entry__ <-| ($entry)
      $P [branch_block_stmt_338__exit__]
      branch_block_stmt_338__exit__ |-> ($exit)
      $P [do_while_stmt_339__entry__] 
      $P [do_while_stmt_339__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 175
      <o> [do_while_stmt_339]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_339__entry__] 
        $P[do_while_stmt_339__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_339_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_341
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_341_sample_start_] 
          $T[phi_stmt_341_sample_completed_] 
          $T[phi_stmt_341_update_start_] 
          $T[phi_stmt_341_update_completed_] 
          $T[phi_stmt_341_sample_start__ps] 
          phi_stmt_341_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_341_sample_completed__ps] 
          phi_stmt_341_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_341_update_start__ps] 
          phi_stmt_341_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_341_update_completed__ps] 
          phi_stmt_341_update_completed_ <-& (phi_stmt_341_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_341_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_341_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_341_update_start_)
          $T[phi_stmt_341_loopback_trigger] 
          phi_stmt_341_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_341_loopback_sample_req] 
          $T[phi_stmt_341_loopback_sample_req_ps] 
          phi_stmt_341_loopback_sample_req <-& (phi_stmt_341_loopback_sample_req_ps)
          phi_stmt_341_loopback_sample_req &-> ($null)
          $T[phi_stmt_341_entry_trigger] 
          phi_stmt_341_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_341_entry_sample_req] 
          $T[phi_stmt_341_entry_sample_req_ps] 
          phi_stmt_341_entry_sample_req <-& (phi_stmt_341_entry_sample_req_ps)
          phi_stmt_341_entry_sample_req &-> ($null)
          phi_stmt_341_update_start_ o<-& (phi_stmt_341_update_completed_ 0)
          phi_stmt_341_sample_start_ o<-& (phi_stmt_341_sample_completed_ 1)
          $T[phi_stmt_341_merged_reqs] 
          $T[phi_stmt_341_phi_mux_ack] 
          $T[phi_stmt_341_phi_mux_ack_ps] 
          phi_stmt_341_phi_mux_ack_ps <-& (phi_stmt_341_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_341_update_completed_)
          $T[type_cast_344_sample_start__ps] 
          $T[type_cast_344_sample_completed__ps] 
          $T[type_cast_344_update_start__ps] 
          $T[type_cast_344_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_344_sample_start_] 
          $T[type_cast_344_sample_completed_] 
          type_cast_344_sample_completed_ <-& (type_cast_344_sample_start_)
          $T[type_cast_344_update_start_] 
          $T [type_cast_344_update_completed_] $delay 
          type_cast_344_update_completed_ <-& (type_cast_344_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_344_sample_start_ <-& (type_cast_344_sample_start__ps)
          type_cast_344_update_start_ <-& (type_cast_344_update_start__ps)
          // Phi complete dependency.
          type_cast_344_sample_completed__ps <-& (type_cast_344_sample_completed_)
          type_cast_344_update_completed__ps <-& (type_cast_344_update_completed_)
          $T[R_next_count_down_345_sample_start__ps] 
          $T[R_next_count_down_345_sample_completed__ps] 
          $T[R_next_count_down_345_update_start__ps] 
          $T[R_next_count_down_345_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_345_sample_start_] 
          $T[R_next_count_down_345_sample_completed_] 
          $T[R_next_count_down_345_update_start_] 
          $T[R_next_count_down_345_update_completed_] 
          ;;[R_next_count_down_345_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_345_sample_start_ &-> (R_next_count_down_345_Sample)
          R_next_count_down_345_sample_completed_ <-& (R_next_count_down_345_Sample)
          ;;[R_next_count_down_345_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_345_update_start_ &-> (R_next_count_down_345_Update)
          R_next_count_down_345_update_completed_ <-& (R_next_count_down_345_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_345_sample_start_ <-& (R_next_count_down_345_sample_start__ps)
          R_next_count_down_345_update_start_ <-& (R_next_count_down_345_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_345_sample_completed__ps <-& (R_next_count_down_345_sample_completed_)
          R_next_count_down_345_update_completed__ps <-& (R_next_count_down_345_update_completed_)
          $phisequencer [ phi_stmt_341_phi_seq] : 
          phi_stmt_341_entry_trigger type_cast_344_sample_start__ps type_cast_344_sample_completed__ps type_cast_344_update_start__ps type_cast_344_update_completed__ps phi_stmt_341_loopback_trigger R_next_count_down_345_sample_start__ps R_next_count_down_345_sample_completed__ps R_next_count_down_345_update_start__ps R_next_count_down_345_update_completed__ps :
          phi_stmt_341_sample_start__ps phi_stmt_341_sample_completed__ps phi_stmt_341_update_start__ps phi_stmt_341_update_completed__ps :
          phi_stmt_341_entry_sample_req_ps phi_stmt_341_loopback_sample_req_ps : 
          phi_stmt_341_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_341
          // start:  single source PHI statement phi_stmt_346
          // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_346_sample_start_] 
          $T[phi_stmt_346_sample_completed_] 
          $T[phi_stmt_346_update_start_] 
          $T[phi_stmt_346_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_346_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_346_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_346_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_4
          $T[RPIPE_in_data_4_348_sample_start_] 
          $T[RPIPE_in_data_4_348_sample_completed_] 
          $T[RPIPE_in_data_4_348_update_start_] 
          $T[RPIPE_in_data_4_348_update_completed_] 
          ;;[RPIPE_in_data_4_348_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_4_348_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_4_348_sample_start_ &-> (RPIPE_in_data_4_348_Sample)
          RPIPE_in_data_4_348_sample_completed_ <-& (RPIPE_in_data_4_348_Sample)
          RPIPE_in_data_4_348_update_start_ <-& (RPIPE_in_data_4_348_sample_completed_)
          RPIPE_in_data_4_348_update_start_ &-> (RPIPE_in_data_4_348_Update)
          RPIPE_in_data_4_348_update_completed_ <-& (RPIPE_in_data_4_348_Update)
          RPIPE_in_data_4_348_sample_start_ o<-& (RPIPE_in_data_4_348_update_completed_ 0)
          // RAW reenables for in_data_4
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_4_348_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_4_348_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_4_348_update_start_)
          phi_stmt_346_update_completed_ <-& (RPIPE_in_data_4_348_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_346_update_completed_)
          // done: PHI Statement phi_stmt_346
          // start:  PHI statement phi_stmt_349
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_349_sample_start_] 
          $T[phi_stmt_349_sample_completed_] 
          $T[phi_stmt_349_update_start_] 
          $T[phi_stmt_349_update_completed_] 
          $T[phi_stmt_349_sample_start__ps] 
          phi_stmt_349_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_349_sample_completed__ps] 
          phi_stmt_349_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_349_update_start__ps] 
          phi_stmt_349_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_349_update_completed__ps] 
          phi_stmt_349_update_completed_ <-& (phi_stmt_349_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_349_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_349_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_349_update_start_)
          $T[phi_stmt_349_loopback_trigger] 
          phi_stmt_349_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_349_loopback_sample_req] 
          $T[phi_stmt_349_loopback_sample_req_ps] 
          phi_stmt_349_loopback_sample_req <-& (phi_stmt_349_loopback_sample_req_ps)
          phi_stmt_349_loopback_sample_req &-> ($null)
          $T[phi_stmt_349_entry_trigger] 
          phi_stmt_349_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_349_entry_sample_req] 
          $T[phi_stmt_349_entry_sample_req_ps] 
          phi_stmt_349_entry_sample_req <-& (phi_stmt_349_entry_sample_req_ps)
          phi_stmt_349_entry_sample_req &-> ($null)
          phi_stmt_349_update_start_ o<-& (phi_stmt_349_update_completed_ 0)
          phi_stmt_349_sample_start_ o<-& (phi_stmt_349_sample_completed_ 1)
          $T[phi_stmt_349_merged_reqs] 
          $T[phi_stmt_349_phi_mux_ack] 
          $T[phi_stmt_349_phi_mux_ack_ps] 
          phi_stmt_349_phi_mux_ack_ps <-& (phi_stmt_349_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_349_update_completed_)
          $T[konst_351_sample_start__ps] 
          $T[konst_351_sample_completed__ps] 
          $T[konst_351_update_start__ps] 
          $T[konst_351_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_351_sample_start_] 
          $T[konst_351_sample_completed_] 
          konst_351_sample_completed_ <-& (konst_351_sample_start_)
          $T[konst_351_update_start_] 
          $T [konst_351_update_completed_] $delay 
          konst_351_update_completed_ <-& (konst_351_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_351_sample_start_ <-& (konst_351_sample_start__ps)
          konst_351_update_start_ <-& (konst_351_update_start__ps)
          // Phi complete dependency.
          konst_351_sample_completed__ps <-& (konst_351_sample_completed_)
          konst_351_update_completed__ps <-& (konst_351_update_completed_)
          $T[R_next_last_dest_id_352_sample_start__ps] 
          $T[R_next_last_dest_id_352_sample_completed__ps] 
          $T[R_next_last_dest_id_352_update_start__ps] 
          $T[R_next_last_dest_id_352_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_352_sample_start_] 
          $T[R_next_last_dest_id_352_sample_completed_] 
          $T[R_next_last_dest_id_352_update_start_] 
          $T[R_next_last_dest_id_352_update_completed_] 
          ;;[R_next_last_dest_id_352_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_352_sample_start_ &-> (R_next_last_dest_id_352_Sample)
          R_next_last_dest_id_352_sample_completed_ <-& (R_next_last_dest_id_352_Sample)
          ;;[R_next_last_dest_id_352_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_352_update_start_ &-> (R_next_last_dest_id_352_Update)
          R_next_last_dest_id_352_update_completed_ <-& (R_next_last_dest_id_352_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_352_sample_start_ <-& (R_next_last_dest_id_352_sample_start__ps)
          R_next_last_dest_id_352_update_start_ <-& (R_next_last_dest_id_352_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_352_sample_completed__ps <-& (R_next_last_dest_id_352_sample_completed_)
          R_next_last_dest_id_352_update_completed__ps <-& (R_next_last_dest_id_352_update_completed_)
          $phisequencer [ phi_stmt_349_phi_seq] : 
          phi_stmt_349_entry_trigger konst_351_sample_start__ps konst_351_sample_completed__ps konst_351_update_start__ps konst_351_update_completed__ps phi_stmt_349_loopback_trigger R_next_last_dest_id_352_sample_start__ps R_next_last_dest_id_352_sample_completed__ps R_next_last_dest_id_352_update_start__ps R_next_last_dest_id_352_update_completed__ps :
          phi_stmt_349_sample_start__ps phi_stmt_349_sample_completed__ps phi_stmt_349_update_start__ps phi_stmt_349_update_completed__ps :
          phi_stmt_349_entry_sample_req_ps phi_stmt_349_loopback_sample_req_ps : 
          phi_stmt_349_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_349
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 185
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 186
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 187
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 188
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 189
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 190
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 191
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 192
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_1
          $T[WPIPE_noblock_obuf_4_1_394_sample_start_] 
          $T[WPIPE_noblock_obuf_4_1_394_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_1_394_update_start_] 
          $T[WPIPE_noblock_obuf_4_1_394_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_1_394 with guard R_send_to_1_393
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_1_394_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_1_394_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_1_394_sample_start_ &-> (WPIPE_noblock_obuf_4_1_394_Sample)
          WPIPE_noblock_obuf_4_1_394_sample_completed_ <-& (WPIPE_noblock_obuf_4_1_394_Sample)
          WPIPE_noblock_obuf_4_1_394_update_start_ <-& (WPIPE_noblock_obuf_4_1_394_sample_completed_)
          WPIPE_noblock_obuf_4_1_394_update_start_ &-> (WPIPE_noblock_obuf_4_1_394_Update)
          WPIPE_noblock_obuf_4_1_394_update_completed_ <-& (WPIPE_noblock_obuf_4_1_394_Update)
          WPIPE_noblock_obuf_4_1_394_sample_start_ o<-& (WPIPE_noblock_obuf_4_1_394_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_1_394_sample_start_
          WPIPE_noblock_obuf_4_1_394_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_1_394_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_1_394_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 193
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 194
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_2
          $T[WPIPE_noblock_obuf_4_2_403_sample_start_] 
          $T[WPIPE_noblock_obuf_4_2_403_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_2_403_update_start_] 
          $T[WPIPE_noblock_obuf_4_2_403_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_2_403 with guard R_send_to_2_402
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_2_403_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_2_403_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_2_403_sample_start_ &-> (WPIPE_noblock_obuf_4_2_403_Sample)
          WPIPE_noblock_obuf_4_2_403_sample_completed_ <-& (WPIPE_noblock_obuf_4_2_403_Sample)
          WPIPE_noblock_obuf_4_2_403_update_start_ <-& (WPIPE_noblock_obuf_4_2_403_sample_completed_)
          WPIPE_noblock_obuf_4_2_403_update_start_ &-> (WPIPE_noblock_obuf_4_2_403_Update)
          WPIPE_noblock_obuf_4_2_403_update_completed_ <-& (WPIPE_noblock_obuf_4_2_403_Update)
          WPIPE_noblock_obuf_4_2_403_sample_start_ o<-& (WPIPE_noblock_obuf_4_2_403_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_2_403_sample_start_
          WPIPE_noblock_obuf_4_2_403_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_2_403_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_2_403_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 195
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 196
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_3
          $T[WPIPE_noblock_obuf_4_3_412_sample_start_] 
          $T[WPIPE_noblock_obuf_4_3_412_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_3_412_update_start_] 
          $T[WPIPE_noblock_obuf_4_3_412_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_3_412 with guard R_send_to_3_411
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_3_412_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_3_412_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_3_412_sample_start_ &-> (WPIPE_noblock_obuf_4_3_412_Sample)
          WPIPE_noblock_obuf_4_3_412_sample_completed_ <-& (WPIPE_noblock_obuf_4_3_412_Sample)
          WPIPE_noblock_obuf_4_3_412_update_start_ <-& (WPIPE_noblock_obuf_4_3_412_sample_completed_)
          WPIPE_noblock_obuf_4_3_412_update_start_ &-> (WPIPE_noblock_obuf_4_3_412_Update)
          WPIPE_noblock_obuf_4_3_412_update_completed_ <-& (WPIPE_noblock_obuf_4_3_412_Update)
          WPIPE_noblock_obuf_4_3_412_sample_start_ o<-& (WPIPE_noblock_obuf_4_3_412_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_3_412_sample_start_
          WPIPE_noblock_obuf_4_3_412_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_3_412_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_3_412_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 197
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 198
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_4
          $T[WPIPE_noblock_obuf_4_4_421_sample_start_] 
          $T[WPIPE_noblock_obuf_4_4_421_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_4_421_update_start_] 
          $T[WPIPE_noblock_obuf_4_4_421_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_4_421 with guard R_send_to_4_420
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_349_update_completed_)
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_341_update_completed_)
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_346_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_349_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          phi_stmt_341_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_4_421_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_4_421_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_4_421_sample_start_ &-> (WPIPE_noblock_obuf_4_4_421_Sample)
          WPIPE_noblock_obuf_4_4_421_sample_completed_ <-& (WPIPE_noblock_obuf_4_4_421_Sample)
          WPIPE_noblock_obuf_4_4_421_update_start_ <-& (WPIPE_noblock_obuf_4_4_421_sample_completed_)
          WPIPE_noblock_obuf_4_4_421_update_start_ &-> (WPIPE_noblock_obuf_4_4_421_Update)
          WPIPE_noblock_obuf_4_4_421_update_completed_ <-& (WPIPE_noblock_obuf_4_4_421_Update)
          WPIPE_noblock_obuf_4_4_421_sample_start_ o<-& (WPIPE_noblock_obuf_4_4_421_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_4_421_sample_start_
          WPIPE_noblock_obuf_4_4_421_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_4_421_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_4_4_421_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_4
          // read-dependencies for pipe in_data_4
          // write-dependencies for pipe in_data_4
          // signal write dependencies for in_data_4
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_339__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_339_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_339__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_339_loop_body : condition_evaluated
        $bind do_while_stmt_339__entry__  => do_while_stmt_339_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_339_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_339__exit__)
      }
      do_while_stmt_339__entry__ |-> (do_while_stmt_339)
      do_while_stmt_339__exit__ <-| (do_while_stmt_339)
      do_while_stmt_339__entry__ <-| (branch_block_stmt_338__entry__)
      do_while_stmt_339__exit__ |-> (branch_block_stmt_338__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 177
    // constant-object-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // constant-object-declarations for block %inputPort_4_Daemon
    //  file .Aa/switch2x2.opt.aa, line 168
    // constant-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 175
    // 1 
    $constant $W[konst_425_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 177
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_344_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    // 0 
    $constant $W[konst_351_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_356_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_370_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_373_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_384_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_390_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_399_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_408_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_417_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 175
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 177
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    $W[next_count_down_376_345_buffered] : $int<16>
    // count_down
    $W[count_down_341] : $int<16>
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // in_data_4
    $W[RPIPE_in_data_4_348_wire] : $int<32>
    // input_word
    $W[input_word_346] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    $W[next_last_dest_id_382_352_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_349] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 185
    // new_packet
    $W[new_packet_358] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 186
    // dest_id
    $W[dest_id_362] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 187
    // pkt_length
    $W[pkt_length_366] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 188
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_371_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_374_wire] : $int<16>
    // next_count_down
    $W[next_count_down_376] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 189
    // next_last_dest_id
    $W[next_last_dest_id_382] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 190
    // data_to_outport
    $W[data_to_outport_387] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 191
    // send_to_1
    $W[send_to_1_392] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 192
    // noblock_obuf_4_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 193
    // send_to_2
    $W[send_to_2_401] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 194
    // noblock_obuf_4_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 195
    // send_to_3
    $W[send_to_3_410] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 196
    // noblock_obuf_4_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 197
    // send_to_4
    $W[send_to_4_419] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 198
    // noblock_obuf_4_4
    // datapath-instances for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 173
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 175
    ==0? [do_while_stmt_339_branch] (konst_425_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 177
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 178
    # := [next_count_down_376_345_buf] (next_count_down_376) (next_count_down_376_345_buffered)     $fullrate
    $buffering $out next_count_down_376_345_buf next_count_down_376_345_buffered  1
    # $phi [phi_stmt_341] (type_cast_344_wire_constant next_count_down_376_345_buffered) ( count_down_341 ) $fullrate
    // $buffering  $out phi_stmt_341 count_down_341 2
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 180
    // in_data_4
    $ioport $in [RPIPE_in_data_4_348_inst] (in_data_4) (RPIPE_in_data_4_348_wire)  $fullrate 
    $buffering $out RPIPE_in_data_4_348_inst RPIPE_in_data_4_348_wire 1
    # := [ssrc_phi_stmt_346] (RPIPE_in_data_4_348_wire) (input_word_346)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 182
    # := [next_last_dest_id_382_352_buf] (next_last_dest_id_382) (next_last_dest_id_382_352_buffered)     $fullrate
    $buffering $out next_last_dest_id_382_352_buf next_last_dest_id_382_352_buffered  1
    # $phi [phi_stmt_349] (konst_351_wire_constant next_last_dest_id_382_352_buffered) ( last_dest_id_349 ) $fullrate
    // $buffering  $out phi_stmt_349 last_dest_id_349 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 185
    // (count_down == 0 )
    ==[EQ_u16_u1_357_inst] (count_down_341 konst_356_wire_constant) (new_packet_358)   $flowthrough 
    $delay EQ_u16_u1_357_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 186
    // ( $slice input_word 31 24 ) 
    [:] [slice_361_inst] (input_word_346 31 24) (dest_id_362)  $flowthrough
    $delay slice_361_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 187
    // ( $slice input_word 23 8 ) 
    [:] [slice_365_inst] (input_word_346 23 8) (pkt_length_366)  $flowthrough
    $delay slice_365_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 188
    // (pkt_length - 1 )
    -[SUB_u16_u16_371_inst] (pkt_length_366 konst_370_wire_constant) (SUB_u16_u16_371_wire)   $flowthrough 
    $delay SUB_u16_u16_371_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_374_inst] (count_down_341 konst_373_wire_constant) (SUB_u16_u16_374_wire)   $flowthrough 
    $delay SUB_u16_u16_374_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_375_inst] (new_packet_358 SUB_u16_u16_371_wire SUB_u16_u16_374_wire) (next_count_down_376)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 189
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_381_inst] (new_packet_358 dest_id_362 last_dest_id_349) (next_last_dest_id_382)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 190
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_386_inst] (R_ONE_1_384_wire_constant input_word_346) (data_to_outport_387)   $flowthrough 
    $delay CONCAT_u1_u33_386_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 191
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_391_inst] (next_last_dest_id_382 konst_390_wire_constant) (send_to_1_392)   $flowthrough 
    $delay EQ_u8_u1_391_inst 0
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 192
    // noblock_obuf_4_1
    $ioport $out [WPIPE_noblock_obuf_4_1_394_inst]  (data_to_outport_387) (noblock_obuf_4_1) $guard ( send_to_1_392 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 193
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_400_inst] (next_last_dest_id_382 konst_399_wire_constant) (send_to_2_401)   $flowthrough 
    $delay EQ_u8_u1_400_inst 0
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 194
    // noblock_obuf_4_2
    $ioport $out [WPIPE_noblock_obuf_4_2_403_inst]  (data_to_outport_387) (noblock_obuf_4_2) $guard ( send_to_2_401 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 195
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_409_inst] (next_last_dest_id_382 konst_408_wire_constant) (send_to_3_410)   $flowthrough 
    $delay EQ_u8_u1_409_inst 0
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 196
    // noblock_obuf_4_3
    $ioport $out [WPIPE_noblock_obuf_4_3_412_inst]  (data_to_outport_387) (noblock_obuf_4_3) $guard ( send_to_3_410 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 197
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_418_inst] (next_last_dest_id_382 konst_417_wire_constant) (send_to_4_419)   $flowthrough 
    $delay EQ_u8_u1_418_inst 0
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 198
    // noblock_obuf_4_4
    $ioport $out [WPIPE_noblock_obuf_4_4_421_inst]  (data_to_outport_387) (noblock_obuf_4_4) $guard ( send_to_4_419 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_339
  //  file .Aa/switch2x2.opt.aa, line 175
  phi_stmt_341 <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_entry_sample_req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_loopback_sample_req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_341_phi_mux_ack)
  next_count_down_376_345_buf <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_count_down_345_Update/ack)
  // in_data_4
  RPIPE_in_data_4_348_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Sample/rr branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Update/cr) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Sample/ra branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/RPIPE_in_data_4_348_Update/ca)
  phi_stmt_349 <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_entry_sample_req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_loopback_sample_req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/phi_stmt_349_phi_mux_ack)
  next_last_dest_id_382_352_buf <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/R_next_last_dest_id_352_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 185
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 186
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 187
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 188
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 189
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 190
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 191
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 192
  // data_to_outport
  // noblock_obuf_4_1
  WPIPE_noblock_obuf_4_1_394_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_1_394_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 193
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 194
  // data_to_outport
  // noblock_obuf_4_2
  WPIPE_noblock_obuf_4_2_403_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_2_403_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 195
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 196
  // data_to_outport
  // noblock_obuf_4_3
  WPIPE_noblock_obuf_4_3_412_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_3_412_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 197
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 198
  // data_to_outport
  // noblock_obuf_4_4
  WPIPE_noblock_obuf_4_4_421_inst <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Sample/req branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Update/req) (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Sample/ack branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/WPIPE_noblock_obuf_4_4_421_Update/ack)
  do_while_stmt_339_branch <=> (branch_block_stmt_338/do_while_stmt_339/do_while_stmt_339_loop_body/condition_evaluated) (branch_block_stmt_338/do_while_stmt_339/loop_exit/ack branch_block_stmt_338/do_while_stmt_339/loop_taken/ack)
}
$volatile $module [prioritySelect] 
{
  $in down_counter:$int<8>
  // can point into 
  active_packet:$int<3>
  // can point into 
  pkt_priority:$int<3>
  // can point into 
  p1_valid:$int<1>
  // can point into 
  p2_valid:$int<1>
  // can point into 
  p3_valid:$int<1>
  // can point into 
  p4_valid:$int<1>
  // can point into 
  $out next_active_packet:$int<3>
  // can point into 
  next_pkt_priority:$int<3>
  // can point into 
  // pipe-declarations for block %prioritySelect
  //  file .Aa/switch2x2.opt.aa, line 202
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %prioritySelect
    //  file .Aa/switch2x2.opt.aa, line 202
    // 0 
    $constant $W[konst_440_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_448_wire_constant] : $int<3> := _b001// 1
    // 3 
    $constant $W[konst_460_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_469_wire_constant] : $int<3> := _b100// 4
    // 2 
    $constant $W[konst_483_wire_constant] : $int<3> := _b010// 2
    // 4 
    $constant $W[konst_495_wire_constant] : $int<3> := _b100// 4
    // 1 
    $constant $W[konst_504_wire_constant] : $int<3> := _b001// 1
    // 3 
    $constant $W[konst_518_wire_constant] : $int<3> := _b011// 3
    // 1 
    $constant $W[konst_530_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_539_wire_constant] : $int<3> := _b010// 2
    // 4 
    $constant $W[konst_553_wire_constant] : $int<3> := _b100// 4
    // 2 
    $constant $W[konst_565_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_574_wire_constant] : $int<3> := _b011// 3
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    // _b0 
    $constant $W[konst_587_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_1 1   _b0  ) 
    // 1 
    $constant $W[konst_590_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_591_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_2 2   _b0  ) 
    // 2 
    $constant $W[konst_595_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_596_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_3 3   _b0  ) 
    // 3 
    $constant $W[konst_600_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_601_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_4 4   _b0  ) 
    // 4 
    $constant $W[konst_604_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_605_wire_constant] : $int<3> := _b000// 0
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    // _b0 
    $constant $W[konst_620_wire_constant] : $int<3> := _b000// 0
    // ( $mux select_1 2   ( $mux select_2 3   ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  )  )  ) 
    // 2 
    $constant $W[konst_627_wire_constant] : $int<3> := _b010// 2
    // ( $mux select_2 3   ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  )  ) 
    // 3 
    $constant $W[konst_629_wire_constant] : $int<3> := _b011// 3
    // ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  ) 
    // 4 
    $constant $W[konst_631_wire_constant] : $int<3> := _b100// 4
    // ( $mux select_4 1   pkt_priority ) 
    // 1 
    $constant $W[konst_633_wire_constant] : $int<3> := _b001// 1
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 207
    // d0
    $W[d0_442] : $int<1>
    // 	select_1 := ((d0 & p1_valid) & (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 208
    // (d0 & p1_valid)
    $intermediate $W[AND_u1_u1_446_wire] : $int<1>
    // (pkt_priority == 1 )
    $intermediate $W[EQ_u3_u1_449_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_451_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_453_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_454_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_456_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_457_wire] : $int<1>
    // ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_458_wire] : $int<1>
    // (pkt_priority == 3 )
    $intermediate $W[EQ_u3_u1_461_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_463_wire] : $int<1>
    // ((pkt_priority == 3 ) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_464_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_466_wire] : $int<1>
    // (((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid ))
    $intermediate $W[AND_u1_u1_467_wire] : $int<1>
    // (pkt_priority == 4 )
    $intermediate $W[EQ_u3_u1_470_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_472_wire] : $int<1>
    // ((pkt_priority == 4 ) & ( ~ p4_valid ))
    $intermediate $W[AND_u1_u1_473_wire] : $int<1>
    // ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid )))
    $intermediate $W[OR_u1_u1_474_wire] : $int<1>
    // (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid ))))
    $intermediate $W[OR_u1_u1_475_wire] : $int<1>
    // select_1
    $W[select_1_477] : $int<1>
    // 	select_2 := ((d0 & p2_valid) & (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 209
    // (d0 & p2_valid)
    $intermediate $W[AND_u1_u1_481_wire] : $int<1>
    // (pkt_priority == 2 )
    $intermediate $W[EQ_u3_u1_484_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_486_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_488_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_489_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_491_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_492_wire] : $int<1>
    // ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_493_wire] : $int<1>
    // (pkt_priority == 4 )
    $intermediate $W[EQ_u3_u1_496_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_498_wire] : $int<1>
    // ((pkt_priority == 4 ) & ( ~ p4_valid ))
    $intermediate $W[AND_u1_u1_499_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_501_wire] : $int<1>
    // (((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_502_wire] : $int<1>
    // (pkt_priority == 1 )
    $intermediate $W[EQ_u3_u1_505_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_507_wire] : $int<1>
    // ((pkt_priority == 1 ) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_508_wire] : $int<1>
    // ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid )))
    $intermediate $W[OR_u1_u1_509_wire] : $int<1>
    // (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid ))))
    $intermediate $W[OR_u1_u1_510_wire] : $int<1>
    // select_2
    $W[select_2_512] : $int<1>
    // 	select_3 := ((d0 & p3_valid) & (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 210
    // (d0 & p3_valid)
    $intermediate $W[AND_u1_u1_516_wire] : $int<1>
    // (pkt_priority == 3 )
    $intermediate $W[EQ_u3_u1_519_wire] : $int<1>
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_521_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_523_wire] : $int<1>
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_524_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_526_wire] : $int<1>
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_527_wire] : $int<1>
    // ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid )))
    $intermediate $W[OR_u1_u1_528_wire] : $int<1>
    // (pkt_priority == 1 )
    $intermediate $W[EQ_u3_u1_531_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_533_wire] : $int<1>
    // ((pkt_priority == 1 ) & ( ~ p1_valid ))
    $intermediate $W[AND_u1_u1_534_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_536_wire] : $int<1>
    // (((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_537_wire] : $int<1>
    // (pkt_priority == 2 )
    $intermediate $W[EQ_u3_u1_540_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_542_wire] : $int<1>
    // ((pkt_priority == 2 ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_543_wire] : $int<1>
    // ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid )))
    $intermediate $W[OR_u1_u1_544_wire] : $int<1>
    // (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid ))))
    $intermediate $W[OR_u1_u1_545_wire] : $int<1>
    // select_3
    $W[select_3_547] : $int<1>
    // 	select_4 := ((d0 & p4_valid) & (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 211
    // (d0 & p4_valid)
    $intermediate $W[AND_u1_u1_551_wire] : $int<1>
    // (pkt_priority == 4 )
    $intermediate $W[EQ_u3_u1_554_wire] : $int<1>
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_556_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_558_wire] : $int<1>
    // (( ~ p1_valid ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_559_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_561_wire] : $int<1>
    // ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_562_wire] : $int<1>
    // ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_563_wire] : $int<1>
    // (pkt_priority == 2 )
    $intermediate $W[EQ_u3_u1_566_wire] : $int<1>
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_568_wire] : $int<1>
    // ((pkt_priority == 2 ) & ( ~ p2_valid ))
    $intermediate $W[AND_u1_u1_569_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_571_wire] : $int<1>
    // (((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_572_wire] : $int<1>
    // (pkt_priority == 3 )
    $intermediate $W[EQ_u3_u1_575_wire] : $int<1>
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_577_wire] : $int<1>
    // ((pkt_priority == 3 ) & ( ~ p3_valid ))
    $intermediate $W[AND_u1_u1_578_wire] : $int<1>
    // ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid )))
    $intermediate $W[OR_u1_u1_579_wire] : $int<1>
    // (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid ))))
    $intermediate $W[OR_u1_u1_580_wire] : $int<1>
    // select_4
    $W[select_4_582] : $int<1>
    // 	next_active_packet := (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 212
    // ( ~ d0 )
    $intermediate $W[NOT_u1_u1_585_wire] : $int<1>
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    $intermediate $W[MUX_588_wire] : $int<3>
    // ( $mux select_1 1   _b0  ) 
    $intermediate $W[MUX_592_wire] : $int<3>
    // (( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) )
    $intermediate $W[OR_u3_u3_593_wire] : $int<3>
    // ( $mux select_2 2   _b0  ) 
    $intermediate $W[MUX_597_wire] : $int<3>
    // ((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) )
    $intermediate $W[OR_u3_u3_598_wire] : $int<3>
    // ( $mux select_3 3   _b0  ) 
    $intermediate $W[MUX_602_wire] : $int<3>
    // ( $mux select_4 4   _b0  ) 
    $intermediate $W[MUX_606_wire] : $int<3>
    // (( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) )
    $intermediate $W[OR_u3_u3_607_wire] : $int<3>
    // ( ~ select_1 )
    $intermediate $W[NOT_u1_u1_609_wire] : $int<1>
    // ( ~ select_2 )
    $intermediate $W[NOT_u1_u1_611_wire] : $int<1>
    // (( ~ select_1 ) & ( ~ select_2 ))
    $intermediate $W[AND_u1_u1_612_wire] : $int<1>
    // ( ~ select_3 )
    $intermediate $W[NOT_u1_u1_614_wire] : $int<1>
    // ( ~ select_4 )
    $intermediate $W[NOT_u1_u1_616_wire] : $int<1>
    // (( ~ select_3 ) & ( ~ select_4 ))
    $intermediate $W[AND_u1_u1_617_wire] : $int<1>
    // ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 )))
    $intermediate $W[AND_u1_u1_618_wire] : $int<1>
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    $intermediate $W[MUX_621_wire] : $int<3>
    // ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )
    $intermediate $W[OR_u3_u3_622_wire] : $int<3>
    // next_active_packet
    // 	next_pkt_priority := ( $mux select_1 2   ( $mux select_2 3   ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  )  )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 213
    // ( $mux select_4 1   pkt_priority ) 
    $intermediate $W[MUX_635_wire] : $int<3>
    // ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  ) 
    $intermediate $W[MUX_636_wire] : $int<3>
    // ( $mux select_2 3   ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  )  ) 
    $intermediate $W[MUX_637_wire] : $int<3>
    // next_pkt_priority
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 207
    // (down_counter == 0 )
    ==[EQ_u8_u1_441_inst] (down_counter konst_440_wire_constant) (d0_442)   
    $buffering  $out EQ_u8_u1_441_inst d0_442 1
    $delay EQ_u8_u1_441_inst 1
    // 	select_1 := ((d0 & p1_valid) & (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 208
    // (d0 & p1_valid)
    &[AND_u1_u1_446_inst] (d0_442 p1_valid) (AND_u1_u1_446_wire)   $flowthrough 
    $delay AND_u1_u1_446_inst 0
    // (pkt_priority == 1 )
    ==[EQ_u3_u1_449_inst] (pkt_priority konst_448_wire_constant) (EQ_u3_u1_449_wire)   $flowthrough 
    $delay EQ_u3_u1_449_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_451_inst] (p4_valid) (NOT_u1_u1_451_wire)   $flowthrough
    $delay NOT_u1_u1_451_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_453_inst] (p2_valid) (NOT_u1_u1_453_wire)   $flowthrough
    $delay NOT_u1_u1_453_inst 0
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_454_inst] (NOT_u1_u1_451_wire NOT_u1_u1_453_wire) (AND_u1_u1_454_wire)   $flowthrough 
    $delay AND_u1_u1_454_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_456_inst] (p3_valid) (NOT_u1_u1_456_wire)   $flowthrough
    $delay NOT_u1_u1_456_inst 0
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_457_inst] (AND_u1_u1_454_wire NOT_u1_u1_456_wire) (AND_u1_u1_457_wire)   $flowthrough 
    $delay AND_u1_u1_457_inst 0
    // ((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_458_inst] (EQ_u3_u1_449_wire AND_u1_u1_457_wire) (OR_u1_u1_458_wire)   $flowthrough 
    $delay OR_u1_u1_458_inst 0
    // (pkt_priority == 3 )
    ==[EQ_u3_u1_461_inst] (pkt_priority konst_460_wire_constant) (EQ_u3_u1_461_wire)   $flowthrough 
    $delay EQ_u3_u1_461_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_463_inst] (p3_valid) (NOT_u1_u1_463_wire)   $flowthrough
    $delay NOT_u1_u1_463_inst 0
    // ((pkt_priority == 3 ) & ( ~ p3_valid ))
    &[AND_u1_u1_464_inst] (EQ_u3_u1_461_wire NOT_u1_u1_463_wire) (AND_u1_u1_464_wire)   $flowthrough 
    $delay AND_u1_u1_464_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_466_inst] (p4_valid) (NOT_u1_u1_466_wire)   $flowthrough
    $delay NOT_u1_u1_466_inst 0
    // (((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid ))
    &[AND_u1_u1_467_inst] (AND_u1_u1_464_wire NOT_u1_u1_466_wire) (AND_u1_u1_467_wire)   $flowthrough 
    $delay AND_u1_u1_467_inst 0
    // (pkt_priority == 4 )
    ==[EQ_u3_u1_470_inst] (pkt_priority konst_469_wire_constant) (EQ_u3_u1_470_wire)   $flowthrough 
    $delay EQ_u3_u1_470_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_472_inst] (p4_valid) (NOT_u1_u1_472_wire)   $flowthrough
    $delay NOT_u1_u1_472_inst 0
    // ((pkt_priority == 4 ) & ( ~ p4_valid ))
    &[AND_u1_u1_473_inst] (EQ_u3_u1_470_wire NOT_u1_u1_472_wire) (AND_u1_u1_473_wire)   $flowthrough 
    $delay AND_u1_u1_473_inst 0
    // ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid )))
    |[OR_u1_u1_474_inst] (AND_u1_u1_467_wire AND_u1_u1_473_wire) (OR_u1_u1_474_wire)   $flowthrough 
    $delay OR_u1_u1_474_inst 0
    // (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid ))))
    |[OR_u1_u1_475_inst] (OR_u1_u1_458_wire OR_u1_u1_474_wire) (OR_u1_u1_475_wire)   $flowthrough 
    $delay OR_u1_u1_475_inst 0
    // ((d0 & p1_valid) & (((pkt_priority == 1 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 3 ) & ( ~ p3_valid )) & ( ~ p4_valid )) | ((pkt_priority == 4 ) & ( ~ p4_valid )))))
    &[AND_u1_u1_476_inst] (AND_u1_u1_446_wire OR_u1_u1_475_wire) (select_1_477)   
    $buffering  $out AND_u1_u1_476_inst select_1_477 1
    $delay AND_u1_u1_476_inst 1
    // 	select_2 := ((d0 & p2_valid) & (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 209
    // (d0 & p2_valid)
    &[AND_u1_u1_481_inst] (d0_442 p2_valid) (AND_u1_u1_481_wire)   $flowthrough 
    $delay AND_u1_u1_481_inst 0
    // (pkt_priority == 2 )
    ==[EQ_u3_u1_484_inst] (pkt_priority konst_483_wire_constant) (EQ_u3_u1_484_wire)   $flowthrough 
    $delay EQ_u3_u1_484_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_486_inst] (p4_valid) (NOT_u1_u1_486_wire)   $flowthrough
    $delay NOT_u1_u1_486_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_488_inst] (p1_valid) (NOT_u1_u1_488_wire)   $flowthrough
    $delay NOT_u1_u1_488_inst 0
    // (( ~ p4_valid ) & ( ~ p1_valid ))
    &[AND_u1_u1_489_inst] (NOT_u1_u1_486_wire NOT_u1_u1_488_wire) (AND_u1_u1_489_wire)   $flowthrough 
    $delay AND_u1_u1_489_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_491_inst] (p3_valid) (NOT_u1_u1_491_wire)   $flowthrough
    $delay NOT_u1_u1_491_inst 0
    // ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_492_inst] (AND_u1_u1_489_wire NOT_u1_u1_491_wire) (AND_u1_u1_492_wire)   $flowthrough 
    $delay AND_u1_u1_492_inst 0
    // ((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_493_inst] (EQ_u3_u1_484_wire AND_u1_u1_492_wire) (OR_u1_u1_493_wire)   $flowthrough 
    $delay OR_u1_u1_493_inst 0
    // (pkt_priority == 4 )
    ==[EQ_u3_u1_496_inst] (pkt_priority konst_495_wire_constant) (EQ_u3_u1_496_wire)   $flowthrough 
    $delay EQ_u3_u1_496_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_498_inst] (p4_valid) (NOT_u1_u1_498_wire)   $flowthrough
    $delay NOT_u1_u1_498_inst 0
    // ((pkt_priority == 4 ) & ( ~ p4_valid ))
    &[AND_u1_u1_499_inst] (EQ_u3_u1_496_wire NOT_u1_u1_498_wire) (AND_u1_u1_499_wire)   $flowthrough 
    $delay AND_u1_u1_499_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_501_inst] (p1_valid) (NOT_u1_u1_501_wire)   $flowthrough
    $delay NOT_u1_u1_501_inst 0
    // (((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid ))
    &[AND_u1_u1_502_inst] (AND_u1_u1_499_wire NOT_u1_u1_501_wire) (AND_u1_u1_502_wire)   $flowthrough 
    $delay AND_u1_u1_502_inst 0
    // (pkt_priority == 1 )
    ==[EQ_u3_u1_505_inst] (pkt_priority konst_504_wire_constant) (EQ_u3_u1_505_wire)   $flowthrough 
    $delay EQ_u3_u1_505_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_507_inst] (p1_valid) (NOT_u1_u1_507_wire)   $flowthrough
    $delay NOT_u1_u1_507_inst 0
    // ((pkt_priority == 1 ) & ( ~ p1_valid ))
    &[AND_u1_u1_508_inst] (EQ_u3_u1_505_wire NOT_u1_u1_507_wire) (AND_u1_u1_508_wire)   $flowthrough 
    $delay AND_u1_u1_508_inst 0
    // ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid )))
    |[OR_u1_u1_509_inst] (AND_u1_u1_502_wire AND_u1_u1_508_wire) (OR_u1_u1_509_wire)   $flowthrough 
    $delay OR_u1_u1_509_inst 0
    // (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid ))))
    |[OR_u1_u1_510_inst] (OR_u1_u1_493_wire OR_u1_u1_509_wire) (OR_u1_u1_510_wire)   $flowthrough 
    $delay OR_u1_u1_510_inst 0
    // ((d0 & p2_valid) & (((pkt_priority == 2 ) | ((( ~ p4_valid ) & ( ~ p1_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 4 ) & ( ~ p4_valid )) & ( ~ p1_valid )) | ((pkt_priority == 1 ) & ( ~ p1_valid )))))
    &[AND_u1_u1_511_inst] (AND_u1_u1_481_wire OR_u1_u1_510_wire) (select_2_512)   
    $buffering  $out AND_u1_u1_511_inst select_2_512 1
    $delay AND_u1_u1_511_inst 1
    // 	select_3 := ((d0 & p3_valid) & (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 210
    // (d0 & p3_valid)
    &[AND_u1_u1_516_inst] (d0_442 p3_valid) (AND_u1_u1_516_wire)   $flowthrough 
    $delay AND_u1_u1_516_inst 0
    // (pkt_priority == 3 )
    ==[EQ_u3_u1_519_inst] (pkt_priority konst_518_wire_constant) (EQ_u3_u1_519_wire)   $flowthrough 
    $delay EQ_u3_u1_519_inst 0
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_521_inst] (p4_valid) (NOT_u1_u1_521_wire)   $flowthrough
    $delay NOT_u1_u1_521_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_523_inst] (p2_valid) (NOT_u1_u1_523_wire)   $flowthrough
    $delay NOT_u1_u1_523_inst 0
    // (( ~ p4_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_524_inst] (NOT_u1_u1_521_wire NOT_u1_u1_523_wire) (AND_u1_u1_524_wire)   $flowthrough 
    $delay AND_u1_u1_524_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_526_inst] (p1_valid) (NOT_u1_u1_526_wire)   $flowthrough
    $delay NOT_u1_u1_526_inst 0
    // ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))
    &[AND_u1_u1_527_inst] (AND_u1_u1_524_wire NOT_u1_u1_526_wire) (AND_u1_u1_527_wire)   $flowthrough 
    $delay AND_u1_u1_527_inst 0
    // ((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid )))
    |[OR_u1_u1_528_inst] (EQ_u3_u1_519_wire AND_u1_u1_527_wire) (OR_u1_u1_528_wire)   $flowthrough 
    $delay OR_u1_u1_528_inst 0
    // (pkt_priority == 1 )
    ==[EQ_u3_u1_531_inst] (pkt_priority konst_530_wire_constant) (EQ_u3_u1_531_wire)   $flowthrough 
    $delay EQ_u3_u1_531_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_533_inst] (p1_valid) (NOT_u1_u1_533_wire)   $flowthrough
    $delay NOT_u1_u1_533_inst 0
    // ((pkt_priority == 1 ) & ( ~ p1_valid ))
    &[AND_u1_u1_534_inst] (EQ_u3_u1_531_wire NOT_u1_u1_533_wire) (AND_u1_u1_534_wire)   $flowthrough 
    $delay AND_u1_u1_534_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_536_inst] (p2_valid) (NOT_u1_u1_536_wire)   $flowthrough
    $delay NOT_u1_u1_536_inst 0
    // (((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid ))
    &[AND_u1_u1_537_inst] (AND_u1_u1_534_wire NOT_u1_u1_536_wire) (AND_u1_u1_537_wire)   $flowthrough 
    $delay AND_u1_u1_537_inst 0
    // (pkt_priority == 2 )
    ==[EQ_u3_u1_540_inst] (pkt_priority konst_539_wire_constant) (EQ_u3_u1_540_wire)   $flowthrough 
    $delay EQ_u3_u1_540_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_542_inst] (p2_valid) (NOT_u1_u1_542_wire)   $flowthrough
    $delay NOT_u1_u1_542_inst 0
    // ((pkt_priority == 2 ) & ( ~ p2_valid ))
    &[AND_u1_u1_543_inst] (EQ_u3_u1_540_wire NOT_u1_u1_542_wire) (AND_u1_u1_543_wire)   $flowthrough 
    $delay AND_u1_u1_543_inst 0
    // ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid )))
    |[OR_u1_u1_544_inst] (AND_u1_u1_537_wire AND_u1_u1_543_wire) (OR_u1_u1_544_wire)   $flowthrough 
    $delay OR_u1_u1_544_inst 0
    // (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid ))))
    |[OR_u1_u1_545_inst] (OR_u1_u1_528_wire OR_u1_u1_544_wire) (OR_u1_u1_545_wire)   $flowthrough 
    $delay OR_u1_u1_545_inst 0
    // ((d0 & p3_valid) & (((pkt_priority == 3 ) | ((( ~ p4_valid ) & ( ~ p2_valid )) & ( ~ p1_valid ))) | ((((pkt_priority == 1 ) & ( ~ p1_valid )) & ( ~ p2_valid )) | ((pkt_priority == 2 ) & ( ~ p2_valid )))))
    &[AND_u1_u1_546_inst] (AND_u1_u1_516_wire OR_u1_u1_545_wire) (select_3_547)   
    $buffering  $out AND_u1_u1_546_inst select_3_547 1
    $delay AND_u1_u1_546_inst 1
    // 	select_4 := ((d0 & p4_valid) & (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid ))))) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 211
    // (d0 & p4_valid)
    &[AND_u1_u1_551_inst] (d0_442 p4_valid) (AND_u1_u1_551_wire)   $flowthrough 
    $delay AND_u1_u1_551_inst 0
    // (pkt_priority == 4 )
    ==[EQ_u3_u1_554_inst] (pkt_priority konst_553_wire_constant) (EQ_u3_u1_554_wire)   $flowthrough 
    $delay EQ_u3_u1_554_inst 0
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_556_inst] (p1_valid) (NOT_u1_u1_556_wire)   $flowthrough
    $delay NOT_u1_u1_556_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_558_inst] (p2_valid) (NOT_u1_u1_558_wire)   $flowthrough
    $delay NOT_u1_u1_558_inst 0
    // (( ~ p1_valid ) & ( ~ p2_valid ))
    &[AND_u1_u1_559_inst] (NOT_u1_u1_556_wire NOT_u1_u1_558_wire) (AND_u1_u1_559_wire)   $flowthrough 
    $delay AND_u1_u1_559_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_561_inst] (p3_valid) (NOT_u1_u1_561_wire)   $flowthrough
    $delay NOT_u1_u1_561_inst 0
    // ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_562_inst] (AND_u1_u1_559_wire NOT_u1_u1_561_wire) (AND_u1_u1_562_wire)   $flowthrough 
    $delay AND_u1_u1_562_inst 0
    // ((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid )))
    |[OR_u1_u1_563_inst] (EQ_u3_u1_554_wire AND_u1_u1_562_wire) (OR_u1_u1_563_wire)   $flowthrough 
    $delay OR_u1_u1_563_inst 0
    // (pkt_priority == 2 )
    ==[EQ_u3_u1_566_inst] (pkt_priority konst_565_wire_constant) (EQ_u3_u1_566_wire)   $flowthrough 
    $delay EQ_u3_u1_566_inst 0
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_568_inst] (p2_valid) (NOT_u1_u1_568_wire)   $flowthrough
    $delay NOT_u1_u1_568_inst 0
    // ((pkt_priority == 2 ) & ( ~ p2_valid ))
    &[AND_u1_u1_569_inst] (EQ_u3_u1_566_wire NOT_u1_u1_568_wire) (AND_u1_u1_569_wire)   $flowthrough 
    $delay AND_u1_u1_569_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_571_inst] (p3_valid) (NOT_u1_u1_571_wire)   $flowthrough
    $delay NOT_u1_u1_571_inst 0
    // (((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid ))
    &[AND_u1_u1_572_inst] (AND_u1_u1_569_wire NOT_u1_u1_571_wire) (AND_u1_u1_572_wire)   $flowthrough 
    $delay AND_u1_u1_572_inst 0
    // (pkt_priority == 3 )
    ==[EQ_u3_u1_575_inst] (pkt_priority konst_574_wire_constant) (EQ_u3_u1_575_wire)   $flowthrough 
    $delay EQ_u3_u1_575_inst 0
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_577_inst] (p3_valid) (NOT_u1_u1_577_wire)   $flowthrough
    $delay NOT_u1_u1_577_inst 0
    // ((pkt_priority == 3 ) & ( ~ p3_valid ))
    &[AND_u1_u1_578_inst] (EQ_u3_u1_575_wire NOT_u1_u1_577_wire) (AND_u1_u1_578_wire)   $flowthrough 
    $delay AND_u1_u1_578_inst 0
    // ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid )))
    |[OR_u1_u1_579_inst] (AND_u1_u1_572_wire AND_u1_u1_578_wire) (OR_u1_u1_579_wire)   $flowthrough 
    $delay OR_u1_u1_579_inst 0
    // (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid ))))
    |[OR_u1_u1_580_inst] (OR_u1_u1_563_wire OR_u1_u1_579_wire) (OR_u1_u1_580_wire)   $flowthrough 
    $delay OR_u1_u1_580_inst 0
    // ((d0 & p4_valid) & (((pkt_priority == 4 ) | ((( ~ p1_valid ) & ( ~ p2_valid )) & ( ~ p3_valid ))) | ((((pkt_priority == 2 ) & ( ~ p2_valid )) & ( ~ p3_valid )) | ((pkt_priority == 3 ) & ( ~ p3_valid )))))
    &[AND_u1_u1_581_inst] (AND_u1_u1_551_wire OR_u1_u1_580_wire) (select_4_582)   
    $buffering  $out AND_u1_u1_581_inst select_4_582 1
    $delay AND_u1_u1_581_inst 1
    // 	next_active_packet := (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 212
    // ( ~ d0 )
    ~ [NOT_u1_u1_585_inst] (d0_442) (NOT_u1_u1_585_wire)   $flowthrough
    $delay NOT_u1_u1_585_inst 0
    // ( $mux ( ~ d0 ) active_packet  _b0  ) 
    ? [MUX_588_inst] (NOT_u1_u1_585_wire active_packet konst_587_wire_constant) (MUX_588_wire)  $flowthrough
    // ( $mux select_1 1   _b0  ) 
    ? [MUX_592_inst] (select_1_477 konst_590_wire_constant konst_591_wire_constant) (MUX_592_wire)  $flowthrough
    // (( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) )
    |[OR_u3_u3_593_inst] (MUX_588_wire MUX_592_wire) (OR_u3_u3_593_wire)   $flowthrough 
    $delay OR_u3_u3_593_inst 0
    // ( $mux select_2 2   _b0  ) 
    ? [MUX_597_inst] (select_2_512 konst_595_wire_constant konst_596_wire_constant) (MUX_597_wire)  $flowthrough
    // ((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) )
    |[OR_u3_u3_598_inst] (OR_u3_u3_593_wire MUX_597_wire) (OR_u3_u3_598_wire)   $flowthrough 
    $delay OR_u3_u3_598_inst 0
    // ( $mux select_3 3   _b0  ) 
    ? [MUX_602_inst] (select_3_547 konst_600_wire_constant konst_601_wire_constant) (MUX_602_wire)  $flowthrough
    // ( $mux select_4 4   _b0  ) 
    ? [MUX_606_inst] (select_4_582 konst_604_wire_constant konst_605_wire_constant) (MUX_606_wire)  $flowthrough
    // (( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) )
    |[OR_u3_u3_607_inst] (MUX_602_wire MUX_606_wire) (OR_u3_u3_607_wire)   $flowthrough 
    $delay OR_u3_u3_607_inst 0
    // ( ~ select_1 )
    ~ [NOT_u1_u1_609_inst] (select_1_477) (NOT_u1_u1_609_wire)   $flowthrough
    $delay NOT_u1_u1_609_inst 0
    // ( ~ select_2 )
    ~ [NOT_u1_u1_611_inst] (select_2_512) (NOT_u1_u1_611_wire)   $flowthrough
    $delay NOT_u1_u1_611_inst 0
    // (( ~ select_1 ) & ( ~ select_2 ))
    &[AND_u1_u1_612_inst] (NOT_u1_u1_609_wire NOT_u1_u1_611_wire) (AND_u1_u1_612_wire)   $flowthrough 
    $delay AND_u1_u1_612_inst 0
    // ( ~ select_3 )
    ~ [NOT_u1_u1_614_inst] (select_3_547) (NOT_u1_u1_614_wire)   $flowthrough
    $delay NOT_u1_u1_614_inst 0
    // ( ~ select_4 )
    ~ [NOT_u1_u1_616_inst] (select_4_582) (NOT_u1_u1_616_wire)   $flowthrough
    $delay NOT_u1_u1_616_inst 0
    // (( ~ select_3 ) & ( ~ select_4 ))
    &[AND_u1_u1_617_inst] (NOT_u1_u1_614_wire NOT_u1_u1_616_wire) (AND_u1_u1_617_wire)   $flowthrough 
    $delay AND_u1_u1_617_inst 0
    // ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 )))
    &[AND_u1_u1_618_inst] (AND_u1_u1_612_wire AND_u1_u1_617_wire) (AND_u1_u1_618_wire)   $flowthrough 
    $delay AND_u1_u1_618_inst 0
    // ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) 
    ? [MUX_621_inst] (AND_u1_u1_618_wire active_packet konst_620_wire_constant) (MUX_621_wire)  $flowthrough
    // ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) )
    |[OR_u3_u3_622_inst] (OR_u3_u3_607_wire MUX_621_wire) (OR_u3_u3_622_wire)   $flowthrough 
    $delay OR_u3_u3_622_inst 0
    // (((( $mux ( ~ d0 ) active_packet  _b0  )  | ( $mux select_1 1   _b0  ) ) | ( $mux select_2 2   _b0  ) ) | ((( $mux select_3 3   _b0  )  | ( $mux select_4 4   _b0  ) ) | ( $mux ((( ~ select_1 ) & ( ~ select_2 )) & (( ~ select_3 ) & ( ~ select_4 ))) active_packet  _b0  ) ))
    |[OR_u3_u3_623_inst] (OR_u3_u3_598_wire OR_u3_u3_622_wire) (next_active_packet)   
    $buffering  $out OR_u3_u3_623_inst next_active_packet 1
    $delay OR_u3_u3_623_inst 1
    // 	next_pkt_priority := ( $mux select_1 2   ( $mux select_2 3   ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  )  )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 213
    // ( $mux select_4 1   pkt_priority ) 
    ? [MUX_635_inst] (select_4_582 konst_633_wire_constant pkt_priority) (MUX_635_wire)  $flowthrough
    // ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  ) 
    ? [MUX_636_inst] (select_3_547 konst_631_wire_constant MUX_635_wire) (MUX_636_wire)  $flowthrough
    // ( $mux select_2 3   ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  )  ) 
    ? [MUX_637_inst] (select_2_512 konst_629_wire_constant MUX_636_wire) (MUX_637_wire)  $flowthrough
    // ( $mux select_1 2   ( $mux select_2 3   ( $mux select_3 4   ( $mux select_4 1   pkt_priority )  )  )  ) 
    ? [MUX_638_inst] (select_1_477 konst_627_wire_constant MUX_637_wire) (next_pkt_priority) 
    $buffering  $out MUX_638_inst next_pkt_priority 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [outputPort_1_Daemon] 
{
  // pipe-declarations for block %outputPort_1_Daemon
  //  file .Aa/switch2x2.opt.aa, line 215
  // pipe-declarations for block %outputPort_1_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 220
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_642] // Branch Block  file .Aa/switch2x2.opt.aa, line 220
    {
      $P [branch_block_stmt_642__entry__]
      branch_block_stmt_642__entry__ <-| ($entry)
      $P [branch_block_stmt_642__exit__]
      branch_block_stmt_642__exit__ |-> ($exit)
      $P [do_while_stmt_643__entry__] 
      $P [do_while_stmt_643__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 222
      <o> [do_while_stmt_643]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_643__entry__] 
        $P[do_while_stmt_643__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_643_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_645
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_645_sample_start_] 
          $T[phi_stmt_645_sample_completed_] 
          $T[phi_stmt_645_update_start_] 
          $T[phi_stmt_645_update_completed_] 
          $T[phi_stmt_645_sample_start__ps] 
          phi_stmt_645_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_645_sample_completed__ps] 
          phi_stmt_645_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_645_update_start__ps] 
          phi_stmt_645_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_645_update_completed__ps] 
          phi_stmt_645_update_completed_ <-& (phi_stmt_645_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_645_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_645_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_645_update_start_)
          $T[phi_stmt_645_loopback_trigger] 
          phi_stmt_645_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_645_loopback_sample_req] 
          $T[phi_stmt_645_loopback_sample_req_ps] 
          phi_stmt_645_loopback_sample_req <-& (phi_stmt_645_loopback_sample_req_ps)
          phi_stmt_645_loopback_sample_req &-> ($null)
          $T[phi_stmt_645_entry_trigger] 
          phi_stmt_645_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_645_entry_sample_req] 
          $T[phi_stmt_645_entry_sample_req_ps] 
          phi_stmt_645_entry_sample_req <-& (phi_stmt_645_entry_sample_req_ps)
          phi_stmt_645_entry_sample_req &-> ($null)
          phi_stmt_645_update_start_ o<-& (phi_stmt_645_update_completed_ 0)
          phi_stmt_645_sample_start_ o<-& (phi_stmt_645_sample_completed_ 1)
          $T[phi_stmt_645_merged_reqs] 
          $T[phi_stmt_645_phi_mux_ack] 
          $T[phi_stmt_645_phi_mux_ack_ps] 
          phi_stmt_645_phi_mux_ack_ps <-& (phi_stmt_645_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_645_update_completed_)
          $T[R_ZERO_8_647_sample_start__ps] 
          $T[R_ZERO_8_647_sample_completed__ps] 
          $T[R_ZERO_8_647_update_start__ps] 
          $T[R_ZERO_8_647_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_647_sample_start_] 
          $T[R_ZERO_8_647_sample_completed_] 
          R_ZERO_8_647_sample_completed_ <-& (R_ZERO_8_647_sample_start_)
          $T[R_ZERO_8_647_update_start_] 
          $T [R_ZERO_8_647_update_completed_] $delay 
          R_ZERO_8_647_update_completed_ <-& (R_ZERO_8_647_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_647_sample_start_ <-& (R_ZERO_8_647_sample_start__ps)
          R_ZERO_8_647_update_start_ <-& (R_ZERO_8_647_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_647_sample_completed__ps <-& (R_ZERO_8_647_sample_completed_)
          R_ZERO_8_647_update_completed__ps <-& (R_ZERO_8_647_update_completed_)
          $T[R_next_down_counter_648_sample_start__ps] 
          $T[R_next_down_counter_648_sample_completed__ps] 
          $T[R_next_down_counter_648_update_start__ps] 
          $T[R_next_down_counter_648_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_648_sample_start_] 
          $T[R_next_down_counter_648_sample_completed_] 
          $T[R_next_down_counter_648_update_start_] 
          $T[R_next_down_counter_648_update_completed_] 
          ;;[R_next_down_counter_648_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_648_sample_start_ &-> (R_next_down_counter_648_Sample)
          R_next_down_counter_648_sample_completed_ <-& (R_next_down_counter_648_Sample)
          ;;[R_next_down_counter_648_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_648_update_start_ &-> (R_next_down_counter_648_Update)
          R_next_down_counter_648_update_completed_ <-& (R_next_down_counter_648_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_648_sample_start_ <-& (R_next_down_counter_648_sample_start__ps)
          R_next_down_counter_648_update_start_ <-& (R_next_down_counter_648_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_648_sample_completed__ps <-& (R_next_down_counter_648_sample_completed_)
          R_next_down_counter_648_update_completed__ps <-& (R_next_down_counter_648_update_completed_)
          $phisequencer [ phi_stmt_645_phi_seq] : 
          phi_stmt_645_entry_trigger R_ZERO_8_647_sample_start__ps R_ZERO_8_647_sample_completed__ps R_ZERO_8_647_update_start__ps R_ZERO_8_647_update_completed__ps phi_stmt_645_loopback_trigger R_next_down_counter_648_sample_start__ps R_next_down_counter_648_sample_completed__ps R_next_down_counter_648_update_start__ps R_next_down_counter_648_update_completed__ps :
          phi_stmt_645_sample_start__ps phi_stmt_645_sample_completed__ps phi_stmt_645_update_start__ps phi_stmt_645_update_completed__ps :
          phi_stmt_645_entry_sample_req_ps phi_stmt_645_loopback_sample_req_ps : 
          phi_stmt_645_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_645
          // start:  PHI statement phi_stmt_649
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_649_sample_start_] 
          $T[phi_stmt_649_sample_completed_] 
          $T[phi_stmt_649_update_start_] 
          $T[phi_stmt_649_update_completed_] 
          $T[phi_stmt_649_sample_start__ps] 
          phi_stmt_649_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_649_sample_completed__ps] 
          phi_stmt_649_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_649_update_start__ps] 
          phi_stmt_649_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_649_update_completed__ps] 
          phi_stmt_649_update_completed_ <-& (phi_stmt_649_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_649_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_649_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_649_update_start_)
          $T[phi_stmt_649_loopback_trigger] 
          phi_stmt_649_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_649_loopback_sample_req] 
          $T[phi_stmt_649_loopback_sample_req_ps] 
          phi_stmt_649_loopback_sample_req <-& (phi_stmt_649_loopback_sample_req_ps)
          phi_stmt_649_loopback_sample_req &-> ($null)
          $T[phi_stmt_649_entry_trigger] 
          phi_stmt_649_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_649_entry_sample_req] 
          $T[phi_stmt_649_entry_sample_req_ps] 
          phi_stmt_649_entry_sample_req <-& (phi_stmt_649_entry_sample_req_ps)
          phi_stmt_649_entry_sample_req &-> ($null)
          phi_stmt_649_update_start_ o<-& (phi_stmt_649_update_completed_ 0)
          phi_stmt_649_sample_start_ o<-& (phi_stmt_649_sample_completed_ 1)
          $T[phi_stmt_649_merged_reqs] 
          $T[phi_stmt_649_phi_mux_ack] 
          $T[phi_stmt_649_phi_mux_ack_ps] 
          phi_stmt_649_phi_mux_ack_ps <-& (phi_stmt_649_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_649_update_completed_)
          $T[R_ZERO_33_651_sample_start__ps] 
          $T[R_ZERO_33_651_sample_completed__ps] 
          $T[R_ZERO_33_651_update_start__ps] 
          $T[R_ZERO_33_651_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_651_sample_start_] 
          $T[R_ZERO_33_651_sample_completed_] 
          R_ZERO_33_651_sample_completed_ <-& (R_ZERO_33_651_sample_start_)
          $T[R_ZERO_33_651_update_start_] 
          $T [R_ZERO_33_651_update_completed_] $delay 
          R_ZERO_33_651_update_completed_ <-& (R_ZERO_33_651_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_651_sample_start_ <-& (R_ZERO_33_651_sample_start__ps)
          R_ZERO_33_651_update_start_ <-& (R_ZERO_33_651_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_651_sample_completed__ps <-& (R_ZERO_33_651_sample_completed_)
          R_ZERO_33_651_update_completed__ps <-& (R_ZERO_33_651_update_completed_)
          $T[RPIPE_noblock_obuf_1_1_653_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_653_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_1_653_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_653_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_1
          $T[RPIPE_noblock_obuf_1_1_653_sample_start_] 
          $T[RPIPE_noblock_obuf_1_1_653_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_1_653_update_start_] 
          $T[RPIPE_noblock_obuf_1_1_653_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_1_653 with guard R_read_from_1_652
          // root phi_stmt_649 not in visited_elements
          // root phi_stmt_654 not in visited_elements
          // root phi_stmt_659 not in visited_elements
          // root phi_stmt_664 not in visited_elements
          // root phi_stmt_669 not in visited_elements
          // root phi_stmt_673 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_1_653_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_1_653_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_1_653_sample_start_ &-> (RPIPE_noblock_obuf_1_1_653_Sample)
          RPIPE_noblock_obuf_1_1_653_sample_completed_ <-& (RPIPE_noblock_obuf_1_1_653_Sample)
          RPIPE_noblock_obuf_1_1_653_update_start_ <-& (RPIPE_noblock_obuf_1_1_653_sample_completed_)
          RPIPE_noblock_obuf_1_1_653_update_start_ &-> (RPIPE_noblock_obuf_1_1_653_Update)
          RPIPE_noblock_obuf_1_1_653_update_completed_ <-& (RPIPE_noblock_obuf_1_1_653_Update)
          RPIPE_noblock_obuf_1_1_653_sample_start_ o<-& (RPIPE_noblock_obuf_1_1_653_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_1_653_sample_start_ <-& (RPIPE_noblock_obuf_1_1_653_sample_start__ps)
          RPIPE_noblock_obuf_1_1_653_update_start_ <-& (RPIPE_noblock_obuf_1_1_653_update_start__ps)
          // RAW reenables for noblock_obuf_1_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_1_653_sample_completed__ps <-& (RPIPE_noblock_obuf_1_1_653_sample_completed_)
          RPIPE_noblock_obuf_1_1_653_update_completed__ps <-& (RPIPE_noblock_obuf_1_1_653_update_completed_)
          $phisequencer [ phi_stmt_649_phi_seq] : 
          phi_stmt_649_entry_trigger R_ZERO_33_651_sample_start__ps R_ZERO_33_651_sample_completed__ps R_ZERO_33_651_update_start__ps R_ZERO_33_651_update_completed__ps phi_stmt_649_loopback_trigger RPIPE_noblock_obuf_1_1_653_sample_start__ps RPIPE_noblock_obuf_1_1_653_sample_completed__ps RPIPE_noblock_obuf_1_1_653_update_start__ps RPIPE_noblock_obuf_1_1_653_update_completed__ps :
          phi_stmt_649_sample_start__ps phi_stmt_649_sample_completed__ps phi_stmt_649_update_start__ps phi_stmt_649_update_completed__ps :
          phi_stmt_649_entry_sample_req_ps phi_stmt_649_loopback_sample_req_ps : 
          phi_stmt_649_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_649
          // start:  PHI statement phi_stmt_654
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_654_sample_start_] 
          $T[phi_stmt_654_sample_completed_] 
          $T[phi_stmt_654_update_start_] 
          $T[phi_stmt_654_update_completed_] 
          $T[phi_stmt_654_sample_start__ps] 
          phi_stmt_654_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_654_sample_completed__ps] 
          phi_stmt_654_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_654_update_start__ps] 
          phi_stmt_654_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_654_update_completed__ps] 
          phi_stmt_654_update_completed_ <-& (phi_stmt_654_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_654_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_654_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_654_update_start_)
          $T[phi_stmt_654_loopback_trigger] 
          phi_stmt_654_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_654_loopback_sample_req] 
          $T[phi_stmt_654_loopback_sample_req_ps] 
          phi_stmt_654_loopback_sample_req <-& (phi_stmt_654_loopback_sample_req_ps)
          phi_stmt_654_loopback_sample_req &-> ($null)
          $T[phi_stmt_654_entry_trigger] 
          phi_stmt_654_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_654_entry_sample_req] 
          $T[phi_stmt_654_entry_sample_req_ps] 
          phi_stmt_654_entry_sample_req <-& (phi_stmt_654_entry_sample_req_ps)
          phi_stmt_654_entry_sample_req &-> ($null)
          phi_stmt_654_update_start_ o<-& (phi_stmt_654_update_completed_ 0)
          phi_stmt_654_sample_start_ o<-& (phi_stmt_654_sample_completed_ 1)
          $T[phi_stmt_654_merged_reqs] 
          $T[phi_stmt_654_phi_mux_ack] 
          $T[phi_stmt_654_phi_mux_ack_ps] 
          phi_stmt_654_phi_mux_ack_ps <-& (phi_stmt_654_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_654_update_completed_)
          $T[R_ZERO_33_656_sample_start__ps] 
          $T[R_ZERO_33_656_sample_completed__ps] 
          $T[R_ZERO_33_656_update_start__ps] 
          $T[R_ZERO_33_656_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_656_sample_start_] 
          $T[R_ZERO_33_656_sample_completed_] 
          R_ZERO_33_656_sample_completed_ <-& (R_ZERO_33_656_sample_start_)
          $T[R_ZERO_33_656_update_start_] 
          $T [R_ZERO_33_656_update_completed_] $delay 
          R_ZERO_33_656_update_completed_ <-& (R_ZERO_33_656_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_656_sample_start_ <-& (R_ZERO_33_656_sample_start__ps)
          R_ZERO_33_656_update_start_ <-& (R_ZERO_33_656_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_656_sample_completed__ps <-& (R_ZERO_33_656_sample_completed_)
          R_ZERO_33_656_update_completed__ps <-& (R_ZERO_33_656_update_completed_)
          $T[RPIPE_noblock_obuf_2_1_658_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_658_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_1_658_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_658_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_1
          $T[RPIPE_noblock_obuf_2_1_658_sample_start_] 
          $T[RPIPE_noblock_obuf_2_1_658_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_1_658_update_start_] 
          $T[RPIPE_noblock_obuf_2_1_658_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_1_658 with guard R_read_from_2_657
          // root phi_stmt_654 not in visited_elements
          // root phi_stmt_659 not in visited_elements
          // root phi_stmt_664 not in visited_elements
          // root phi_stmt_669 not in visited_elements
          // root phi_stmt_673 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_1_658_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_1_658_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_1_658_sample_start_ &-> (RPIPE_noblock_obuf_2_1_658_Sample)
          RPIPE_noblock_obuf_2_1_658_sample_completed_ <-& (RPIPE_noblock_obuf_2_1_658_Sample)
          RPIPE_noblock_obuf_2_1_658_update_start_ <-& (RPIPE_noblock_obuf_2_1_658_sample_completed_)
          RPIPE_noblock_obuf_2_1_658_update_start_ &-> (RPIPE_noblock_obuf_2_1_658_Update)
          RPIPE_noblock_obuf_2_1_658_update_completed_ <-& (RPIPE_noblock_obuf_2_1_658_Update)
          RPIPE_noblock_obuf_2_1_658_sample_start_ o<-& (RPIPE_noblock_obuf_2_1_658_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_1_658_sample_start_ <-& (RPIPE_noblock_obuf_2_1_658_sample_start__ps)
          RPIPE_noblock_obuf_2_1_658_update_start_ <-& (RPIPE_noblock_obuf_2_1_658_update_start__ps)
          // RAW reenables for noblock_obuf_2_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_1_658_sample_completed__ps <-& (RPIPE_noblock_obuf_2_1_658_sample_completed_)
          RPIPE_noblock_obuf_2_1_658_update_completed__ps <-& (RPIPE_noblock_obuf_2_1_658_update_completed_)
          $phisequencer [ phi_stmt_654_phi_seq] : 
          phi_stmt_654_entry_trigger R_ZERO_33_656_sample_start__ps R_ZERO_33_656_sample_completed__ps R_ZERO_33_656_update_start__ps R_ZERO_33_656_update_completed__ps phi_stmt_654_loopback_trigger RPIPE_noblock_obuf_2_1_658_sample_start__ps RPIPE_noblock_obuf_2_1_658_sample_completed__ps RPIPE_noblock_obuf_2_1_658_update_start__ps RPIPE_noblock_obuf_2_1_658_update_completed__ps :
          phi_stmt_654_sample_start__ps phi_stmt_654_sample_completed__ps phi_stmt_654_update_start__ps phi_stmt_654_update_completed__ps :
          phi_stmt_654_entry_sample_req_ps phi_stmt_654_loopback_sample_req_ps : 
          phi_stmt_654_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_654
          // start:  PHI statement phi_stmt_659
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_659_sample_start_] 
          $T[phi_stmt_659_sample_completed_] 
          $T[phi_stmt_659_update_start_] 
          $T[phi_stmt_659_update_completed_] 
          $T[phi_stmt_659_sample_start__ps] 
          phi_stmt_659_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_659_sample_completed__ps] 
          phi_stmt_659_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_659_update_start__ps] 
          phi_stmt_659_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_659_update_completed__ps] 
          phi_stmt_659_update_completed_ <-& (phi_stmt_659_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_659_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_659_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_659_update_start_)
          $T[phi_stmt_659_loopback_trigger] 
          phi_stmt_659_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_659_loopback_sample_req] 
          $T[phi_stmt_659_loopback_sample_req_ps] 
          phi_stmt_659_loopback_sample_req <-& (phi_stmt_659_loopback_sample_req_ps)
          phi_stmt_659_loopback_sample_req &-> ($null)
          $T[phi_stmt_659_entry_trigger] 
          phi_stmt_659_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_659_entry_sample_req] 
          $T[phi_stmt_659_entry_sample_req_ps] 
          phi_stmt_659_entry_sample_req <-& (phi_stmt_659_entry_sample_req_ps)
          phi_stmt_659_entry_sample_req &-> ($null)
          phi_stmt_659_update_start_ o<-& (phi_stmt_659_update_completed_ 0)
          phi_stmt_659_sample_start_ o<-& (phi_stmt_659_sample_completed_ 1)
          $T[phi_stmt_659_merged_reqs] 
          $T[phi_stmt_659_phi_mux_ack] 
          $T[phi_stmt_659_phi_mux_ack_ps] 
          phi_stmt_659_phi_mux_ack_ps <-& (phi_stmt_659_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_659_update_completed_)
          $T[R_ZERO_33_661_sample_start__ps] 
          $T[R_ZERO_33_661_sample_completed__ps] 
          $T[R_ZERO_33_661_update_start__ps] 
          $T[R_ZERO_33_661_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_661_sample_start_] 
          $T[R_ZERO_33_661_sample_completed_] 
          R_ZERO_33_661_sample_completed_ <-& (R_ZERO_33_661_sample_start_)
          $T[R_ZERO_33_661_update_start_] 
          $T [R_ZERO_33_661_update_completed_] $delay 
          R_ZERO_33_661_update_completed_ <-& (R_ZERO_33_661_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_661_sample_start_ <-& (R_ZERO_33_661_sample_start__ps)
          R_ZERO_33_661_update_start_ <-& (R_ZERO_33_661_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_661_sample_completed__ps <-& (R_ZERO_33_661_sample_completed_)
          R_ZERO_33_661_update_completed__ps <-& (R_ZERO_33_661_update_completed_)
          $T[RPIPE_noblock_obuf_3_1_663_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_663_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_1_663_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_663_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_1
          $T[RPIPE_noblock_obuf_3_1_663_sample_start_] 
          $T[RPIPE_noblock_obuf_3_1_663_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_1_663_update_start_] 
          $T[RPIPE_noblock_obuf_3_1_663_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_1_663 with guard R_read_from_3_662
          // root phi_stmt_659 not in visited_elements
          // root phi_stmt_664 not in visited_elements
          // root phi_stmt_669 not in visited_elements
          // root phi_stmt_673 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_1_663_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_1_663_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_1_663_sample_start_ &-> (RPIPE_noblock_obuf_3_1_663_Sample)
          RPIPE_noblock_obuf_3_1_663_sample_completed_ <-& (RPIPE_noblock_obuf_3_1_663_Sample)
          RPIPE_noblock_obuf_3_1_663_update_start_ <-& (RPIPE_noblock_obuf_3_1_663_sample_completed_)
          RPIPE_noblock_obuf_3_1_663_update_start_ &-> (RPIPE_noblock_obuf_3_1_663_Update)
          RPIPE_noblock_obuf_3_1_663_update_completed_ <-& (RPIPE_noblock_obuf_3_1_663_Update)
          RPIPE_noblock_obuf_3_1_663_sample_start_ o<-& (RPIPE_noblock_obuf_3_1_663_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_1_663_sample_start_ <-& (RPIPE_noblock_obuf_3_1_663_sample_start__ps)
          RPIPE_noblock_obuf_3_1_663_update_start_ <-& (RPIPE_noblock_obuf_3_1_663_update_start__ps)
          // RAW reenables for noblock_obuf_3_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_1_663_sample_completed__ps <-& (RPIPE_noblock_obuf_3_1_663_sample_completed_)
          RPIPE_noblock_obuf_3_1_663_update_completed__ps <-& (RPIPE_noblock_obuf_3_1_663_update_completed_)
          $phisequencer [ phi_stmt_659_phi_seq] : 
          phi_stmt_659_entry_trigger R_ZERO_33_661_sample_start__ps R_ZERO_33_661_sample_completed__ps R_ZERO_33_661_update_start__ps R_ZERO_33_661_update_completed__ps phi_stmt_659_loopback_trigger RPIPE_noblock_obuf_3_1_663_sample_start__ps RPIPE_noblock_obuf_3_1_663_sample_completed__ps RPIPE_noblock_obuf_3_1_663_update_start__ps RPIPE_noblock_obuf_3_1_663_update_completed__ps :
          phi_stmt_659_sample_start__ps phi_stmt_659_sample_completed__ps phi_stmt_659_update_start__ps phi_stmt_659_update_completed__ps :
          phi_stmt_659_entry_sample_req_ps phi_stmt_659_loopback_sample_req_ps : 
          phi_stmt_659_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_659
          // start:  PHI statement phi_stmt_664
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_664_sample_start_] 
          $T[phi_stmt_664_sample_completed_] 
          $T[phi_stmt_664_update_start_] 
          $T[phi_stmt_664_update_completed_] 
          $T[phi_stmt_664_sample_start__ps] 
          phi_stmt_664_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_664_sample_completed__ps] 
          phi_stmt_664_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_664_update_start__ps] 
          phi_stmt_664_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_664_update_completed__ps] 
          phi_stmt_664_update_completed_ <-& (phi_stmt_664_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_664_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_664_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_664_update_start_)
          $T[phi_stmt_664_loopback_trigger] 
          phi_stmt_664_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_664_loopback_sample_req] 
          $T[phi_stmt_664_loopback_sample_req_ps] 
          phi_stmt_664_loopback_sample_req <-& (phi_stmt_664_loopback_sample_req_ps)
          phi_stmt_664_loopback_sample_req &-> ($null)
          $T[phi_stmt_664_entry_trigger] 
          phi_stmt_664_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_664_entry_sample_req] 
          $T[phi_stmt_664_entry_sample_req_ps] 
          phi_stmt_664_entry_sample_req <-& (phi_stmt_664_entry_sample_req_ps)
          phi_stmt_664_entry_sample_req &-> ($null)
          phi_stmt_664_update_start_ o<-& (phi_stmt_664_update_completed_ 0)
          phi_stmt_664_sample_start_ o<-& (phi_stmt_664_sample_completed_ 1)
          $T[phi_stmt_664_merged_reqs] 
          $T[phi_stmt_664_phi_mux_ack] 
          $T[phi_stmt_664_phi_mux_ack_ps] 
          phi_stmt_664_phi_mux_ack_ps <-& (phi_stmt_664_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_664_update_completed_)
          $T[R_ZERO_33_666_sample_start__ps] 
          $T[R_ZERO_33_666_sample_completed__ps] 
          $T[R_ZERO_33_666_update_start__ps] 
          $T[R_ZERO_33_666_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_666_sample_start_] 
          $T[R_ZERO_33_666_sample_completed_] 
          R_ZERO_33_666_sample_completed_ <-& (R_ZERO_33_666_sample_start_)
          $T[R_ZERO_33_666_update_start_] 
          $T [R_ZERO_33_666_update_completed_] $delay 
          R_ZERO_33_666_update_completed_ <-& (R_ZERO_33_666_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_666_sample_start_ <-& (R_ZERO_33_666_sample_start__ps)
          R_ZERO_33_666_update_start_ <-& (R_ZERO_33_666_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_666_sample_completed__ps <-& (R_ZERO_33_666_sample_completed_)
          R_ZERO_33_666_update_completed__ps <-& (R_ZERO_33_666_update_completed_)
          $T[RPIPE_noblock_obuf_4_1_668_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_668_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_1_668_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_668_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_1
          $T[RPIPE_noblock_obuf_4_1_668_sample_start_] 
          $T[RPIPE_noblock_obuf_4_1_668_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_1_668_update_start_] 
          $T[RPIPE_noblock_obuf_4_1_668_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_1_668 with guard R_read_from_4_667
          // root phi_stmt_664 not in visited_elements
          // root phi_stmt_669 not in visited_elements
          // root phi_stmt_673 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_1_668_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_1_668_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_1_668_sample_start_ &-> (RPIPE_noblock_obuf_4_1_668_Sample)
          RPIPE_noblock_obuf_4_1_668_sample_completed_ <-& (RPIPE_noblock_obuf_4_1_668_Sample)
          RPIPE_noblock_obuf_4_1_668_update_start_ <-& (RPIPE_noblock_obuf_4_1_668_sample_completed_)
          RPIPE_noblock_obuf_4_1_668_update_start_ &-> (RPIPE_noblock_obuf_4_1_668_Update)
          RPIPE_noblock_obuf_4_1_668_update_completed_ <-& (RPIPE_noblock_obuf_4_1_668_Update)
          RPIPE_noblock_obuf_4_1_668_sample_start_ o<-& (RPIPE_noblock_obuf_4_1_668_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_1_668_sample_start_ <-& (RPIPE_noblock_obuf_4_1_668_sample_start__ps)
          RPIPE_noblock_obuf_4_1_668_update_start_ <-& (RPIPE_noblock_obuf_4_1_668_update_start__ps)
          // RAW reenables for noblock_obuf_4_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_1_668_sample_completed__ps <-& (RPIPE_noblock_obuf_4_1_668_sample_completed_)
          RPIPE_noblock_obuf_4_1_668_update_completed__ps <-& (RPIPE_noblock_obuf_4_1_668_update_completed_)
          $phisequencer [ phi_stmt_664_phi_seq] : 
          phi_stmt_664_entry_trigger R_ZERO_33_666_sample_start__ps R_ZERO_33_666_sample_completed__ps R_ZERO_33_666_update_start__ps R_ZERO_33_666_update_completed__ps phi_stmt_664_loopback_trigger RPIPE_noblock_obuf_4_1_668_sample_start__ps RPIPE_noblock_obuf_4_1_668_sample_completed__ps RPIPE_noblock_obuf_4_1_668_update_start__ps RPIPE_noblock_obuf_4_1_668_update_completed__ps :
          phi_stmt_664_sample_start__ps phi_stmt_664_sample_completed__ps phi_stmt_664_update_start__ps phi_stmt_664_update_completed__ps :
          phi_stmt_664_entry_sample_req_ps phi_stmt_664_loopback_sample_req_ps : 
          phi_stmt_664_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_664
          // start:  PHI statement phi_stmt_669
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_669_sample_start_] 
          $T[phi_stmt_669_sample_completed_] 
          $T[phi_stmt_669_update_start_] 
          $T[phi_stmt_669_update_completed_] 
          $T[phi_stmt_669_sample_start__ps] 
          phi_stmt_669_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_669_sample_completed__ps] 
          phi_stmt_669_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_669_update_start__ps] 
          phi_stmt_669_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_669_update_completed__ps] 
          phi_stmt_669_update_completed_ <-& (phi_stmt_669_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_669_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_669_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_669_update_start_)
          $T[phi_stmt_669_loopback_trigger] 
          phi_stmt_669_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_669_loopback_sample_req] 
          $T[phi_stmt_669_loopback_sample_req_ps] 
          phi_stmt_669_loopback_sample_req <-& (phi_stmt_669_loopback_sample_req_ps)
          phi_stmt_669_loopback_sample_req &-> ($null)
          $T[phi_stmt_669_entry_trigger] 
          phi_stmt_669_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_669_entry_sample_req] 
          $T[phi_stmt_669_entry_sample_req_ps] 
          phi_stmt_669_entry_sample_req <-& (phi_stmt_669_entry_sample_req_ps)
          phi_stmt_669_entry_sample_req &-> ($null)
          phi_stmt_669_update_start_ o<-& (phi_stmt_669_update_completed_ 0)
          phi_stmt_669_sample_start_ o<-& (phi_stmt_669_sample_completed_ 1)
          $T[phi_stmt_669_merged_reqs] 
          $T[phi_stmt_669_phi_mux_ack] 
          $T[phi_stmt_669_phi_mux_ack_ps] 
          phi_stmt_669_phi_mux_ack_ps <-& (phi_stmt_669_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_669_update_completed_)
          $T[R_ZERO_3_671_sample_start__ps] 
          $T[R_ZERO_3_671_sample_completed__ps] 
          $T[R_ZERO_3_671_update_start__ps] 
          $T[R_ZERO_3_671_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_671_sample_start_] 
          $T[R_ZERO_3_671_sample_completed_] 
          R_ZERO_3_671_sample_completed_ <-& (R_ZERO_3_671_sample_start_)
          $T[R_ZERO_3_671_update_start_] 
          $T [R_ZERO_3_671_update_completed_] $delay 
          R_ZERO_3_671_update_completed_ <-& (R_ZERO_3_671_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_671_sample_start_ <-& (R_ZERO_3_671_sample_start__ps)
          R_ZERO_3_671_update_start_ <-& (R_ZERO_3_671_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_671_sample_completed__ps <-& (R_ZERO_3_671_sample_completed_)
          R_ZERO_3_671_update_completed__ps <-& (R_ZERO_3_671_update_completed_)
          $T[R_next_active_packet_672_sample_start__ps] 
          $T[R_next_active_packet_672_sample_completed__ps] 
          $T[R_next_active_packet_672_update_start__ps] 
          $T[R_next_active_packet_672_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_672_sample_start_] 
          $T[R_next_active_packet_672_sample_completed_] 
          $T[R_next_active_packet_672_update_start_] 
          $T[R_next_active_packet_672_update_completed_] 
          ;;[R_next_active_packet_672_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_672_sample_start_ &-> (R_next_active_packet_672_Sample)
          R_next_active_packet_672_sample_completed_ <-& (R_next_active_packet_672_Sample)
          ;;[R_next_active_packet_672_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_672_update_start_ &-> (R_next_active_packet_672_Update)
          R_next_active_packet_672_update_completed_ <-& (R_next_active_packet_672_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_672_sample_start_ <-& (R_next_active_packet_672_sample_start__ps)
          R_next_active_packet_672_update_start_ <-& (R_next_active_packet_672_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_672_sample_completed__ps <-& (R_next_active_packet_672_sample_completed_)
          R_next_active_packet_672_update_completed__ps <-& (R_next_active_packet_672_update_completed_)
          $phisequencer [ phi_stmt_669_phi_seq] : 
          phi_stmt_669_entry_trigger R_ZERO_3_671_sample_start__ps R_ZERO_3_671_sample_completed__ps R_ZERO_3_671_update_start__ps R_ZERO_3_671_update_completed__ps phi_stmt_669_loopback_trigger R_next_active_packet_672_sample_start__ps R_next_active_packet_672_sample_completed__ps R_next_active_packet_672_update_start__ps R_next_active_packet_672_update_completed__ps :
          phi_stmt_669_sample_start__ps phi_stmt_669_sample_completed__ps phi_stmt_669_update_start__ps phi_stmt_669_update_completed__ps :
          phi_stmt_669_entry_sample_req_ps phi_stmt_669_loopback_sample_req_ps : 
          phi_stmt_669_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_669
          // start:  PHI statement phi_stmt_673
          // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_673_sample_start_] 
          $T[phi_stmt_673_sample_completed_] 
          $T[phi_stmt_673_update_start_] 
          $T[phi_stmt_673_update_completed_] 
          $T[phi_stmt_673_sample_start__ps] 
          phi_stmt_673_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_673_sample_completed__ps] 
          phi_stmt_673_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_673_update_start__ps] 
          phi_stmt_673_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_673_update_completed__ps] 
          phi_stmt_673_update_completed_ <-& (phi_stmt_673_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_673_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_673_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_673_update_start_)
          $T[phi_stmt_673_loopback_trigger] 
          phi_stmt_673_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_673_loopback_sample_req] 
          $T[phi_stmt_673_loopback_sample_req_ps] 
          phi_stmt_673_loopback_sample_req <-& (phi_stmt_673_loopback_sample_req_ps)
          phi_stmt_673_loopback_sample_req &-> ($null)
          $T[phi_stmt_673_entry_trigger] 
          phi_stmt_673_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_673_entry_sample_req] 
          $T[phi_stmt_673_entry_sample_req_ps] 
          phi_stmt_673_entry_sample_req <-& (phi_stmt_673_entry_sample_req_ps)
          phi_stmt_673_entry_sample_req &-> ($null)
          phi_stmt_673_update_start_ o<-& (phi_stmt_673_update_completed_ 0)
          phi_stmt_673_sample_start_ o<-& (phi_stmt_673_sample_completed_ 1)
          $T[phi_stmt_673_merged_reqs] 
          $T[phi_stmt_673_phi_mux_ack] 
          $T[phi_stmt_673_phi_mux_ack_ps] 
          phi_stmt_673_phi_mux_ack_ps <-& (phi_stmt_673_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_673_update_completed_)
          $T[R_ONE_3_675_sample_start__ps] 
          $T[R_ONE_3_675_sample_completed__ps] 
          $T[R_ONE_3_675_update_start__ps] 
          $T[R_ONE_3_675_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ONE_3_675_sample_start_] 
          $T[R_ONE_3_675_sample_completed_] 
          R_ONE_3_675_sample_completed_ <-& (R_ONE_3_675_sample_start_)
          $T[R_ONE_3_675_update_start_] 
          $T [R_ONE_3_675_update_completed_] $delay 
          R_ONE_3_675_update_completed_ <-& (R_ONE_3_675_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ONE_3_675_sample_start_ <-& (R_ONE_3_675_sample_start__ps)
          R_ONE_3_675_update_start_ <-& (R_ONE_3_675_update_start__ps)
          // Phi complete dependency.
          R_ONE_3_675_sample_completed__ps <-& (R_ONE_3_675_sample_completed_)
          R_ONE_3_675_update_completed__ps <-& (R_ONE_3_675_update_completed_)
          $T[R_next_pkt_priority_676_sample_start__ps] 
          $T[R_next_pkt_priority_676_sample_completed__ps] 
          $T[R_next_pkt_priority_676_update_start__ps] 
          $T[R_next_pkt_priority_676_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_676_sample_start_] 
          $T[R_next_pkt_priority_676_sample_completed_] 
          $T[R_next_pkt_priority_676_update_start_] 
          $T[R_next_pkt_priority_676_update_completed_] 
          ;;[R_next_pkt_priority_676_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_676_sample_start_ &-> (R_next_pkt_priority_676_Sample)
          R_next_pkt_priority_676_sample_completed_ <-& (R_next_pkt_priority_676_Sample)
          ;;[R_next_pkt_priority_676_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_676_update_start_ &-> (R_next_pkt_priority_676_Update)
          R_next_pkt_priority_676_update_completed_ <-& (R_next_pkt_priority_676_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_676_sample_start_ <-& (R_next_pkt_priority_676_sample_start__ps)
          R_next_pkt_priority_676_update_start_ <-& (R_next_pkt_priority_676_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_676_sample_completed__ps <-& (R_next_pkt_priority_676_sample_completed_)
          R_next_pkt_priority_676_update_completed__ps <-& (R_next_pkt_priority_676_update_completed_)
          $phisequencer [ phi_stmt_673_phi_seq] : 
          phi_stmt_673_entry_trigger R_ONE_3_675_sample_start__ps R_ONE_3_675_sample_completed__ps R_ONE_3_675_update_start__ps R_ONE_3_675_update_completed__ps phi_stmt_673_loopback_trigger R_next_pkt_priority_676_sample_start__ps R_next_pkt_priority_676_sample_completed__ps R_next_pkt_priority_676_update_start__ps R_next_pkt_priority_676_update_completed__ps :
          phi_stmt_673_sample_start__ps phi_stmt_673_sample_completed__ps phi_stmt_673_update_start__ps phi_stmt_673_update_completed__ps :
          phi_stmt_673_entry_sample_req_ps phi_stmt_673_loopback_sample_req_ps : 
          phi_stmt_673_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_673
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 240
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 241
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 242
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 243
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 244
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 245
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 246
          // volatile! 
          // Source expression
          // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
          // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
          // (p1_valid | p2_valid)
          // p1_valid
          // p2_valid
          // (p3_valid | p4_valid)
          // p3_valid
          // p4_valid
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 247
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 248
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 249
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 250
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 251
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 252
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 253
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 254
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_1
          $T[WPIPE_out_data_1_856_sample_start_] 
          $T[WPIPE_out_data_1_856_sample_completed_] 
          $T[WPIPE_out_data_1_856_update_start_] 
          $T[WPIPE_out_data_1_856_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_1_856 with guard R_send_flag_855
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_645_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_649_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_654_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_659_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_664_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_669_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_673_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_645_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_649_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_654_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_659_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_664_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_669_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_673_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          ;;[WPIPE_out_data_1_856_Sample] 
          {
            // pipe write sample-start out_data_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_1_856_Update] 
          {
            // pipe write update (complete) out_data_1
            $T [req] $T [ack] 
          }
          WPIPE_out_data_1_856_sample_start_ &-> (WPIPE_out_data_1_856_Sample)
          WPIPE_out_data_1_856_sample_completed_ <-& (WPIPE_out_data_1_856_Sample)
          WPIPE_out_data_1_856_update_start_ <-& (WPIPE_out_data_1_856_sample_completed_)
          WPIPE_out_data_1_856_update_start_ &-> (WPIPE_out_data_1_856_Update)
          WPIPE_out_data_1_856_update_completed_ <-& (WPIPE_out_data_1_856_Update)
          WPIPE_out_data_1_856_sample_start_ o<-& (WPIPE_out_data_1_856_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_1_856_sample_start_
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_645_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_649_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_654_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_659_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_664_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_669_update_completed_)
          WPIPE_out_data_1_856_sample_start_ <-& (phi_stmt_673_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_1_856_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_645_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_649_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_654_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_659_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_664_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_669_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          phi_stmt_673_update_start_ o<-& (WPIPE_out_data_1_856_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe out_data_1
          // read-dependencies for pipe out_data_1
          // write-dependencies for pipe out_data_1
          // signal write dependencies for out_data_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_643__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_643_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_643__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_643_loop_body : condition_evaluated
        $bind do_while_stmt_643__entry__  => do_while_stmt_643_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_643_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_643__exit__)
      }
      do_while_stmt_643__entry__ |-> (do_while_stmt_643)
      do_while_stmt_643__exit__ <-| (do_while_stmt_643)
      do_while_stmt_643__entry__ <-| (branch_block_stmt_642__entry__)
      do_while_stmt_643__exit__ |-> (branch_block_stmt_642__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 224
    // constant-object-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // constant-object-declarations for block %outputPort_1_Daemon
    //  file .Aa/switch2x2.opt.aa, line 215
    // constant-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 222
    // 1 
    $constant $W[konst_860_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 224
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    // ZERO_8
    $constant $W[R_ZERO_8_647_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // ZERO_33
    $constant $W[R_ZERO_33_651_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // ZERO_33
    $constant $W[R_ZERO_33_656_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // ZERO_33
    $constant $W[R_ZERO_33_661_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // ZERO_33
    $constant $W[R_ZERO_33_666_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    // ZERO_3
    $constant $W[R_ZERO_3_671_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    // ONE_3
    $constant $W[R_ONE_3_675_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_680_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_685_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_690_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_695_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_700_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_703_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_706_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_709_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_713_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_716_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_719_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_722_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    // 0 
    $constant $W[konst_746_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_752_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_755_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_765_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_773_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_781_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_789_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_795_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_799_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_802_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_806_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_810_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_814_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_817_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_821_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_828_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_831_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_834_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_837_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_841_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_844_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_847_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_850_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 222
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 224
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    $W[next_down_counter_760_648_buffered] : $int<8>
    // down_counter
    $W[down_counter_645] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // noblock_obuf_1_1
    $W[RPIPE_noblock_obuf_1_1_653_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_649] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // noblock_obuf_2_1
    $W[RPIPE_noblock_obuf_2_1_658_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_654] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // noblock_obuf_3_1
    $W[RPIPE_noblock_obuf_3_1_663_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_659] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // noblock_obuf_4_1
    $W[RPIPE_noblock_obuf_4_1_668_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_664] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    $W[next_active_packet_736_672_buffered] : $int<3>
    // active_packet
    $W[active_packet_669] : $int<3>
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    $W[next_pkt_priority_736_676_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_673] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 240
    // p1_valid
    $W[p1_valid_682] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 241
    // p2_valid
    $W[p2_valid_687] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 242
    // p3_valid
    $W[p3_valid_692] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 243
    // p4_valid
    $W[p4_valid_697] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 244
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_701_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_704_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_707_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_710_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_711_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_714_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_717_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_720_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_723_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_724_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_726] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    // next_active_packet
    $W[next_active_packet_736] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_736] : $int<3>
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 246
    // (p1_valid | p2_valid)
    $intermediate $W[OR_u1_u1_740_wire] : $int<1>
    // (p3_valid | p4_valid)
    $intermediate $W[OR_u1_u1_743_wire] : $int<1>
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    $intermediate $W[OR_u1_u1_744_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_747_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_749] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 247
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_756_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_758_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_760] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 248
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_763_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_766_wire] : $int<1>
    // read_from_1
    $W[read_from_1_768] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 249
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_771_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_774_wire] : $int<1>
    // read_from_2
    $W[read_from_2_776] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 250
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_779_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_782_wire] : $int<1>
    // read_from_3
    $W[read_from_3_784] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 251
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_787_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_790_wire] : $int<1>
    // read_from_4
    $W[read_from_4_792] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 252
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_796_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_798_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_800_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_803_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_805_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_807_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_808_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_811_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_813_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_815_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_818_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_820_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_822_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_823_wire] : $int<32>
    // data_to_out
    $W[data_to_out_825] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 253
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_829_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_832_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_835_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_838_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_839_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_842_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_845_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_848_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_851_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_852_wire] : $int<1>
    // send_flag
    $W[send_flag_854] : $int<1>
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 254
    // out_data_1
    // datapath-instances for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 220
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 222
    ==0? [do_while_stmt_643_branch] (konst_860_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 224
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 225
    # := [next_down_counter_760_648_buf] (next_down_counter_760) (next_down_counter_760_648_buffered)     $fullrate
    $buffering $out next_down_counter_760_648_buf next_down_counter_760_648_buffered  1
    # $phi [phi_stmt_645] (R_ZERO_8_647_wire_constant next_down_counter_760_648_buffered) ( down_counter_645 ) $fullrate
    // $buffering  $out phi_stmt_645 down_counter_645 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 227
    // noblock_obuf_1_1
    $ioport $in [RPIPE_noblock_obuf_1_1_653_inst] (noblock_obuf_1_1) (RPIPE_noblock_obuf_1_1_653_wire) $guard ( read_from_1_768 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_1_653_inst RPIPE_noblock_obuf_1_1_653_wire 1
    # $phi [phi_stmt_649] (R_ZERO_33_651_wire_constant RPIPE_noblock_obuf_1_1_653_wire) ( pkt_1_e_word_649 ) $fullrate
    // $buffering  $out phi_stmt_649 pkt_1_e_word_649 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 229
    // noblock_obuf_2_1
    $ioport $in [RPIPE_noblock_obuf_2_1_658_inst] (noblock_obuf_2_1) (RPIPE_noblock_obuf_2_1_658_wire) $guard ( read_from_2_776 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_1_658_inst RPIPE_noblock_obuf_2_1_658_wire 1
    # $phi [phi_stmt_654] (R_ZERO_33_656_wire_constant RPIPE_noblock_obuf_2_1_658_wire) ( pkt_2_e_word_654 ) $fullrate
    // $buffering  $out phi_stmt_654 pkt_2_e_word_654 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 231
    // noblock_obuf_3_1
    $ioport $in [RPIPE_noblock_obuf_3_1_663_inst] (noblock_obuf_3_1) (RPIPE_noblock_obuf_3_1_663_wire) $guard ( read_from_3_784 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_1_663_inst RPIPE_noblock_obuf_3_1_663_wire 1
    # $phi [phi_stmt_659] (R_ZERO_33_661_wire_constant RPIPE_noblock_obuf_3_1_663_wire) ( pkt_3_e_word_659 ) $fullrate
    // $buffering  $out phi_stmt_659 pkt_3_e_word_659 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 233
    // noblock_obuf_4_1
    $ioport $in [RPIPE_noblock_obuf_4_1_668_inst] (noblock_obuf_4_1) (RPIPE_noblock_obuf_4_1_668_wire) $guard ( read_from_4_792 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_1_668_inst RPIPE_noblock_obuf_4_1_668_wire 1
    # $phi [phi_stmt_664] (R_ZERO_33_666_wire_constant RPIPE_noblock_obuf_4_1_668_wire) ( pkt_4_e_word_664 ) $fullrate
    // $buffering  $out phi_stmt_664 pkt_4_e_word_664 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 235
    # := [next_active_packet_736_672_buf] (next_active_packet_736) (next_active_packet_736_672_buffered)     $fullrate
    $buffering $out next_active_packet_736_672_buf next_active_packet_736_672_buffered  1
    # $phi [phi_stmt_669] (R_ZERO_3_671_wire_constant next_active_packet_736_672_buffered) ( active_packet_669 ) $fullrate
    // $buffering  $out phi_stmt_669 active_packet_669 2
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 237
    # := [next_pkt_priority_736_676_buf] (next_pkt_priority_736) (next_pkt_priority_736_676_buffered)     $fullrate
    $buffering $out next_pkt_priority_736_676_buf next_pkt_priority_736_676_buffered  1
    # $phi [phi_stmt_673] (R_ONE_3_675_wire_constant next_pkt_priority_736_676_buffered) ( pkt_priority_673 ) $fullrate
    // $buffering  $out phi_stmt_673 pkt_priority_673 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 240
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_681_inst] (pkt_1_e_word_649 konst_680_wire_constant) (p1_valid_682)   $flowthrough 
    $delay BITSEL_u33_u1_681_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 241
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_686_inst] (pkt_2_e_word_654 konst_685_wire_constant) (p2_valid_687)   $flowthrough 
    $delay BITSEL_u33_u1_686_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 242
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_691_inst] (pkt_3_e_word_659 konst_690_wire_constant) (p3_valid_692)   $flowthrough 
    $delay BITSEL_u33_u1_691_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 243
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_696_inst] (pkt_4_e_word_664 konst_695_wire_constant) (p4_valid_697)   $flowthrough 
    $delay BITSEL_u33_u1_696_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 244
    // (active_packet == 1 )
    ==[EQ_u3_u1_701_inst] (active_packet_669 konst_700_wire_constant) (EQ_u3_u1_701_wire)   $flowthrough 
    $delay EQ_u3_u1_701_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_704_inst] (EQ_u3_u1_701_wire p1_valid_682 konst_703_wire_constant) (MUX_704_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_707_inst] (active_packet_669 konst_706_wire_constant) (EQ_u3_u1_707_wire)   $flowthrough 
    $delay EQ_u3_u1_707_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_710_inst] (EQ_u3_u1_707_wire p2_valid_687 konst_709_wire_constant) (MUX_710_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_711_inst] (MUX_704_wire MUX_710_wire) (OR_u1_u1_711_wire)   $flowthrough 
    $delay OR_u1_u1_711_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_714_inst] (active_packet_669 konst_713_wire_constant) (EQ_u3_u1_714_wire)   $flowthrough 
    $delay EQ_u3_u1_714_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_717_inst] (EQ_u3_u1_714_wire p3_valid_692 konst_716_wire_constant) (MUX_717_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_720_inst] (active_packet_669 konst_719_wire_constant) (EQ_u3_u1_720_wire)   $flowthrough 
    $delay EQ_u3_u1_720_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_723_inst] (EQ_u3_u1_720_wire p4_valid_697 konst_722_wire_constant) (MUX_723_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_724_inst] (MUX_717_wire MUX_723_wire) (OR_u1_u1_724_wire)   $flowthrough 
    $delay OR_u1_u1_724_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_725_inst] (OR_u1_u1_711_wire OR_u1_u1_724_wire) (valid_active_pkt_word_read_726)   $flowthrough 
    $delay OR_u1_u1_725_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 245
    $call [call_stmt_736_call] $module prioritySelect(down_counter_645 active_packet_669 pkt_priority_673 p1_valid_682 p2_valid_687 p3_valid_692 p4_valid_697) (next_active_packet_736 next_pkt_priority_736)   $flowthrough $fullrate
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 246
    // (p1_valid | p2_valid)
    |[OR_u1_u1_740_inst] (p1_valid_682 p2_valid_687) (OR_u1_u1_740_wire)   $flowthrough 
    $delay OR_u1_u1_740_inst 0
    // (p3_valid | p4_valid)
    |[OR_u1_u1_743_inst] (p3_valid_692 p4_valid_697) (OR_u1_u1_743_wire)   $flowthrough 
    $delay OR_u1_u1_743_inst 0
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    |[OR_u1_u1_744_inst] (OR_u1_u1_740_wire OR_u1_u1_743_wire) (OR_u1_u1_744_wire)   $flowthrough 
    $delay OR_u1_u1_744_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_747_inst] (down_counter_645 konst_746_wire_constant) (EQ_u8_u1_747_wire)   $flowthrough 
    $delay EQ_u8_u1_747_inst 0
    // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
    &[AND_u1_u1_748_inst] (OR_u1_u1_744_wire EQ_u8_u1_747_wire) (started_new_packet_749)   $flowthrough 
    $delay AND_u1_u1_748_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 247
    // (down_counter - 1 )
    -[SUB_u8_u8_756_inst] (down_counter_645 konst_755_wire_constant) (SUB_u8_u8_756_wire)   $flowthrough 
    $delay SUB_u8_u8_756_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_758_inst] (valid_active_pkt_word_read_726 SUB_u8_u8_756_wire down_counter_645) (MUX_758_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_759_inst] (started_new_packet_749 konst_752_wire_constant MUX_758_wire) (next_down_counter_760)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 248
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_763_inst] (p1_valid_682) (NOT_u1_u1_763_wire)   $flowthrough
    $delay NOT_u1_u1_763_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_766_inst] (next_active_packet_736 konst_765_wire_constant) (EQ_u3_u1_766_wire)   $flowthrough 
    $delay EQ_u3_u1_766_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_767_inst] (NOT_u1_u1_763_wire EQ_u3_u1_766_wire) (read_from_1_768)   $flowthrough 
    $delay OR_u1_u1_767_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 249
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_771_inst] (p2_valid_687) (NOT_u1_u1_771_wire)   $flowthrough
    $delay NOT_u1_u1_771_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_774_inst] (next_active_packet_736 konst_773_wire_constant) (EQ_u3_u1_774_wire)   $flowthrough 
    $delay EQ_u3_u1_774_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_775_inst] (NOT_u1_u1_771_wire EQ_u3_u1_774_wire) (read_from_2_776)   $flowthrough 
    $delay OR_u1_u1_775_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 250
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_779_inst] (p3_valid_692) (NOT_u1_u1_779_wire)   $flowthrough
    $delay NOT_u1_u1_779_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_782_inst] (next_active_packet_736 konst_781_wire_constant) (EQ_u3_u1_782_wire)   $flowthrough 
    $delay EQ_u3_u1_782_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_783_inst] (NOT_u1_u1_779_wire EQ_u3_u1_782_wire) (read_from_3_784)   $flowthrough 
    $delay OR_u1_u1_783_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 251
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_787_inst] (p4_valid_697) (NOT_u1_u1_787_wire)   $flowthrough
    $delay NOT_u1_u1_787_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_790_inst] (next_active_packet_736 konst_789_wire_constant) (EQ_u3_u1_790_wire)   $flowthrough 
    $delay EQ_u3_u1_790_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_791_inst] (NOT_u1_u1_787_wire EQ_u3_u1_790_wire) (read_from_4_792)   $flowthrough 
    $delay OR_u1_u1_791_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 252
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_796_inst] (next_active_packet_736 konst_795_wire_constant) (EQ_u3_u1_796_wire)   $flowthrough 
    $delay EQ_u3_u1_796_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_798_inst] (pkt_1_e_word_649 31 0) (slice_798_wire)  $flowthrough
    $delay slice_798_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_800_inst] (EQ_u3_u1_796_wire slice_798_wire konst_799_wire_constant) (MUX_800_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_803_inst] (next_active_packet_736 konst_802_wire_constant) (EQ_u3_u1_803_wire)   $flowthrough 
    $delay EQ_u3_u1_803_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_805_inst] (pkt_2_e_word_654 31 0) (slice_805_wire)  $flowthrough
    $delay slice_805_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_807_inst] (EQ_u3_u1_803_wire slice_805_wire konst_806_wire_constant) (MUX_807_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_808_inst] (MUX_800_wire MUX_807_wire) (OR_u32_u32_808_wire)   $flowthrough 
    $delay OR_u32_u32_808_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_811_inst] (next_active_packet_736 konst_810_wire_constant) (EQ_u3_u1_811_wire)   $flowthrough 
    $delay EQ_u3_u1_811_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_813_inst] (pkt_3_e_word_659 31 0) (slice_813_wire)  $flowthrough
    $delay slice_813_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_815_inst] (EQ_u3_u1_811_wire slice_813_wire konst_814_wire_constant) (MUX_815_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_818_inst] (next_active_packet_736 konst_817_wire_constant) (EQ_u3_u1_818_wire)   $flowthrough 
    $delay EQ_u3_u1_818_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_820_inst] (pkt_4_e_word_664 31 0) (slice_820_wire)  $flowthrough
    $delay slice_820_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_822_inst] (EQ_u3_u1_818_wire slice_820_wire konst_821_wire_constant) (MUX_822_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_823_inst] (MUX_815_wire MUX_822_wire) (OR_u32_u32_823_wire)   $flowthrough 
    $delay OR_u32_u32_823_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_824_inst] (OR_u32_u32_808_wire OR_u32_u32_823_wire) (data_to_out_825)   $flowthrough 
    $delay OR_u32_u32_824_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 253
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_829_inst] (next_active_packet_736 konst_828_wire_constant) (EQ_u3_u1_829_wire)   $flowthrough 
    $delay EQ_u3_u1_829_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_832_inst] (EQ_u3_u1_829_wire p1_valid_682 konst_831_wire_constant) (MUX_832_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_835_inst] (next_active_packet_736 konst_834_wire_constant) (EQ_u3_u1_835_wire)   $flowthrough 
    $delay EQ_u3_u1_835_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_838_inst] (EQ_u3_u1_835_wire p2_valid_687 konst_837_wire_constant) (MUX_838_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_839_inst] (MUX_832_wire MUX_838_wire) (OR_u1_u1_839_wire)   $flowthrough 
    $delay OR_u1_u1_839_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_842_inst] (next_active_packet_736 konst_841_wire_constant) (EQ_u3_u1_842_wire)   $flowthrough 
    $delay EQ_u3_u1_842_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_845_inst] (EQ_u3_u1_842_wire p3_valid_692 konst_844_wire_constant) (MUX_845_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_848_inst] (next_active_packet_736 konst_847_wire_constant) (EQ_u3_u1_848_wire)   $flowthrough 
    $delay EQ_u3_u1_848_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_851_inst] (EQ_u3_u1_848_wire p4_valid_697 konst_850_wire_constant) (MUX_851_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_852_inst] (MUX_845_wire MUX_851_wire) (OR_u1_u1_852_wire)   $flowthrough 
    $delay OR_u1_u1_852_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_853_inst] (OR_u1_u1_839_wire OR_u1_u1_852_wire) (send_flag_854)   $flowthrough 
    $delay OR_u1_u1_853_inst 0
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 254
    // out_data_1
    $ioport $out [WPIPE_out_data_1_856_inst]  (data_to_out_825) (out_data_1) $guard ( send_flag_854 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_643
  //  file .Aa/switch2x2.opt.aa, line 222
  phi_stmt_645 <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_645_entry_sample_req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_645_loopback_sample_req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_645_phi_mux_ack)
  next_down_counter_760_648_buf <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_down_counter_648_Sample/req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_down_counter_648_Update/req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_down_counter_648_Sample/ack branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_down_counter_648_Update/ack)
  phi_stmt_649 <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_649_entry_sample_req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_649_loopback_sample_req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_649_phi_mux_ack)
  // noblock_obuf_1_1
  RPIPE_noblock_obuf_1_1_653_inst <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_1_1_653_Sample/rr branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_1_1_653_Update/cr) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_1_1_653_Sample/ra branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_1_1_653_Update/ca)
  phi_stmt_654 <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_654_entry_sample_req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_654_loopback_sample_req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_654_phi_mux_ack)
  // noblock_obuf_2_1
  RPIPE_noblock_obuf_2_1_658_inst <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_2_1_658_Sample/rr branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_2_1_658_Update/cr) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_2_1_658_Sample/ra branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_2_1_658_Update/ca)
  phi_stmt_659 <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_659_entry_sample_req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_659_loopback_sample_req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_659_phi_mux_ack)
  // noblock_obuf_3_1
  RPIPE_noblock_obuf_3_1_663_inst <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_3_1_663_Sample/rr branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_3_1_663_Update/cr) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_3_1_663_Sample/ra branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_3_1_663_Update/ca)
  phi_stmt_664 <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_664_entry_sample_req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_664_loopback_sample_req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_664_phi_mux_ack)
  // noblock_obuf_4_1
  RPIPE_noblock_obuf_4_1_668_inst <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_4_1_668_Sample/rr branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_4_1_668_Update/cr) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_4_1_668_Sample/ra branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/RPIPE_noblock_obuf_4_1_668_Update/ca)
  phi_stmt_669 <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_669_entry_sample_req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_669_loopback_sample_req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_669_phi_mux_ack)
  next_active_packet_736_672_buf <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_active_packet_672_Sample/req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_active_packet_672_Update/req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_active_packet_672_Sample/ack branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_active_packet_672_Update/ack)
  phi_stmt_673 <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_673_entry_sample_req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_673_loopback_sample_req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/phi_stmt_673_phi_mux_ack)
  next_pkt_priority_736_676_buf <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_pkt_priority_676_Sample/req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_pkt_priority_676_Update/req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_pkt_priority_676_Sample/ack branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/R_next_pkt_priority_676_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 240
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 241
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 242
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 243
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 244
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 245
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 246
  // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
  // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
  // (p1_valid | p2_valid)
  // p1_valid
  // p2_valid
  // (p3_valid | p4_valid)
  // p3_valid
  // p4_valid
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 247
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 248
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 249
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 250
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 251
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 252
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 253
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 254
  // data_to_out
  // out_data_1
  WPIPE_out_data_1_856_inst <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/WPIPE_out_data_1_856_Sample/req branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/WPIPE_out_data_1_856_Update/req) (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/WPIPE_out_data_1_856_Sample/ack branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/WPIPE_out_data_1_856_Update/ack)
  do_while_stmt_643_branch <=> (branch_block_stmt_642/do_while_stmt_643/do_while_stmt_643_loop_body/condition_evaluated) (branch_block_stmt_642/do_while_stmt_643/loop_exit/ack branch_block_stmt_642/do_while_stmt_643/loop_taken/ack)
}
$module [outputPort_2_Daemon] 
{
  // pipe-declarations for block %outputPort_2_Daemon
  //  file .Aa/switch2x2.opt.aa, line 258
  // pipe-declarations for block %outputPort_2_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 263
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_864] // Branch Block  file .Aa/switch2x2.opt.aa, line 263
    {
      $P [branch_block_stmt_864__entry__]
      branch_block_stmt_864__entry__ <-| ($entry)
      $P [branch_block_stmt_864__exit__]
      branch_block_stmt_864__exit__ |-> ($exit)
      $P [do_while_stmt_865__entry__] 
      $P [do_while_stmt_865__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 265
      <o> [do_while_stmt_865]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_865__entry__] 
        $P[do_while_stmt_865__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_865_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_867
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_867_sample_start_] 
          $T[phi_stmt_867_sample_completed_] 
          $T[phi_stmt_867_update_start_] 
          $T[phi_stmt_867_update_completed_] 
          $T[phi_stmt_867_sample_start__ps] 
          phi_stmt_867_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_867_sample_completed__ps] 
          phi_stmt_867_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_867_update_start__ps] 
          phi_stmt_867_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_867_update_completed__ps] 
          phi_stmt_867_update_completed_ <-& (phi_stmt_867_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_867_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_867_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_867_update_start_)
          $T[phi_stmt_867_loopback_trigger] 
          phi_stmt_867_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_867_loopback_sample_req] 
          $T[phi_stmt_867_loopback_sample_req_ps] 
          phi_stmt_867_loopback_sample_req <-& (phi_stmt_867_loopback_sample_req_ps)
          phi_stmt_867_loopback_sample_req &-> ($null)
          $T[phi_stmt_867_entry_trigger] 
          phi_stmt_867_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_867_entry_sample_req] 
          $T[phi_stmt_867_entry_sample_req_ps] 
          phi_stmt_867_entry_sample_req <-& (phi_stmt_867_entry_sample_req_ps)
          phi_stmt_867_entry_sample_req &-> ($null)
          phi_stmt_867_update_start_ o<-& (phi_stmt_867_update_completed_ 0)
          phi_stmt_867_sample_start_ o<-& (phi_stmt_867_sample_completed_ 1)
          $T[phi_stmt_867_merged_reqs] 
          $T[phi_stmt_867_phi_mux_ack] 
          $T[phi_stmt_867_phi_mux_ack_ps] 
          phi_stmt_867_phi_mux_ack_ps <-& (phi_stmt_867_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_867_update_completed_)
          $T[R_ZERO_8_869_sample_start__ps] 
          $T[R_ZERO_8_869_sample_completed__ps] 
          $T[R_ZERO_8_869_update_start__ps] 
          $T[R_ZERO_8_869_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_869_sample_start_] 
          $T[R_ZERO_8_869_sample_completed_] 
          R_ZERO_8_869_sample_completed_ <-& (R_ZERO_8_869_sample_start_)
          $T[R_ZERO_8_869_update_start_] 
          $T [R_ZERO_8_869_update_completed_] $delay 
          R_ZERO_8_869_update_completed_ <-& (R_ZERO_8_869_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_869_sample_start_ <-& (R_ZERO_8_869_sample_start__ps)
          R_ZERO_8_869_update_start_ <-& (R_ZERO_8_869_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_869_sample_completed__ps <-& (R_ZERO_8_869_sample_completed_)
          R_ZERO_8_869_update_completed__ps <-& (R_ZERO_8_869_update_completed_)
          $T[R_next_down_counter_870_sample_start__ps] 
          $T[R_next_down_counter_870_sample_completed__ps] 
          $T[R_next_down_counter_870_update_start__ps] 
          $T[R_next_down_counter_870_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_870_sample_start_] 
          $T[R_next_down_counter_870_sample_completed_] 
          $T[R_next_down_counter_870_update_start_] 
          $T[R_next_down_counter_870_update_completed_] 
          ;;[R_next_down_counter_870_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_870_sample_start_ &-> (R_next_down_counter_870_Sample)
          R_next_down_counter_870_sample_completed_ <-& (R_next_down_counter_870_Sample)
          ;;[R_next_down_counter_870_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_870_update_start_ &-> (R_next_down_counter_870_Update)
          R_next_down_counter_870_update_completed_ <-& (R_next_down_counter_870_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_870_sample_start_ <-& (R_next_down_counter_870_sample_start__ps)
          R_next_down_counter_870_update_start_ <-& (R_next_down_counter_870_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_870_sample_completed__ps <-& (R_next_down_counter_870_sample_completed_)
          R_next_down_counter_870_update_completed__ps <-& (R_next_down_counter_870_update_completed_)
          $phisequencer [ phi_stmt_867_phi_seq] : 
          phi_stmt_867_entry_trigger R_ZERO_8_869_sample_start__ps R_ZERO_8_869_sample_completed__ps R_ZERO_8_869_update_start__ps R_ZERO_8_869_update_completed__ps phi_stmt_867_loopback_trigger R_next_down_counter_870_sample_start__ps R_next_down_counter_870_sample_completed__ps R_next_down_counter_870_update_start__ps R_next_down_counter_870_update_completed__ps :
          phi_stmt_867_sample_start__ps phi_stmt_867_sample_completed__ps phi_stmt_867_update_start__ps phi_stmt_867_update_completed__ps :
          phi_stmt_867_entry_sample_req_ps phi_stmt_867_loopback_sample_req_ps : 
          phi_stmt_867_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_867
          // start:  PHI statement phi_stmt_871
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_871_sample_start_] 
          $T[phi_stmt_871_sample_completed_] 
          $T[phi_stmt_871_update_start_] 
          $T[phi_stmt_871_update_completed_] 
          $T[phi_stmt_871_sample_start__ps] 
          phi_stmt_871_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_871_sample_completed__ps] 
          phi_stmt_871_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_871_update_start__ps] 
          phi_stmt_871_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_871_update_completed__ps] 
          phi_stmt_871_update_completed_ <-& (phi_stmt_871_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_871_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_871_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_871_update_start_)
          $T[phi_stmt_871_loopback_trigger] 
          phi_stmt_871_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_871_loopback_sample_req] 
          $T[phi_stmt_871_loopback_sample_req_ps] 
          phi_stmt_871_loopback_sample_req <-& (phi_stmt_871_loopback_sample_req_ps)
          phi_stmt_871_loopback_sample_req &-> ($null)
          $T[phi_stmt_871_entry_trigger] 
          phi_stmt_871_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_871_entry_sample_req] 
          $T[phi_stmt_871_entry_sample_req_ps] 
          phi_stmt_871_entry_sample_req <-& (phi_stmt_871_entry_sample_req_ps)
          phi_stmt_871_entry_sample_req &-> ($null)
          phi_stmt_871_update_start_ o<-& (phi_stmt_871_update_completed_ 0)
          phi_stmt_871_sample_start_ o<-& (phi_stmt_871_sample_completed_ 1)
          $T[phi_stmt_871_merged_reqs] 
          $T[phi_stmt_871_phi_mux_ack] 
          $T[phi_stmt_871_phi_mux_ack_ps] 
          phi_stmt_871_phi_mux_ack_ps <-& (phi_stmt_871_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_871_update_completed_)
          $T[R_ZERO_33_873_sample_start__ps] 
          $T[R_ZERO_33_873_sample_completed__ps] 
          $T[R_ZERO_33_873_update_start__ps] 
          $T[R_ZERO_33_873_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_873_sample_start_] 
          $T[R_ZERO_33_873_sample_completed_] 
          R_ZERO_33_873_sample_completed_ <-& (R_ZERO_33_873_sample_start_)
          $T[R_ZERO_33_873_update_start_] 
          $T [R_ZERO_33_873_update_completed_] $delay 
          R_ZERO_33_873_update_completed_ <-& (R_ZERO_33_873_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_873_sample_start_ <-& (R_ZERO_33_873_sample_start__ps)
          R_ZERO_33_873_update_start_ <-& (R_ZERO_33_873_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_873_sample_completed__ps <-& (R_ZERO_33_873_sample_completed_)
          R_ZERO_33_873_update_completed__ps <-& (R_ZERO_33_873_update_completed_)
          $T[RPIPE_noblock_obuf_1_2_875_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_875_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_2_875_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_875_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_2
          $T[RPIPE_noblock_obuf_1_2_875_sample_start_] 
          $T[RPIPE_noblock_obuf_1_2_875_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_2_875_update_start_] 
          $T[RPIPE_noblock_obuf_1_2_875_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_2_875 with guard R_read_from_1_874
          // root phi_stmt_871 not in visited_elements
          // root phi_stmt_876 not in visited_elements
          // root phi_stmt_881 not in visited_elements
          // root phi_stmt_886 not in visited_elements
          // root phi_stmt_891 not in visited_elements
          // root phi_stmt_895 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_2_875_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_2_875_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_2_875_sample_start_ &-> (RPIPE_noblock_obuf_1_2_875_Sample)
          RPIPE_noblock_obuf_1_2_875_sample_completed_ <-& (RPIPE_noblock_obuf_1_2_875_Sample)
          RPIPE_noblock_obuf_1_2_875_update_start_ <-& (RPIPE_noblock_obuf_1_2_875_sample_completed_)
          RPIPE_noblock_obuf_1_2_875_update_start_ &-> (RPIPE_noblock_obuf_1_2_875_Update)
          RPIPE_noblock_obuf_1_2_875_update_completed_ <-& (RPIPE_noblock_obuf_1_2_875_Update)
          RPIPE_noblock_obuf_1_2_875_sample_start_ o<-& (RPIPE_noblock_obuf_1_2_875_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_2_875_sample_start_ <-& (RPIPE_noblock_obuf_1_2_875_sample_start__ps)
          RPIPE_noblock_obuf_1_2_875_update_start_ <-& (RPIPE_noblock_obuf_1_2_875_update_start__ps)
          // RAW reenables for noblock_obuf_1_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_2_875_sample_completed__ps <-& (RPIPE_noblock_obuf_1_2_875_sample_completed_)
          RPIPE_noblock_obuf_1_2_875_update_completed__ps <-& (RPIPE_noblock_obuf_1_2_875_update_completed_)
          $phisequencer [ phi_stmt_871_phi_seq] : 
          phi_stmt_871_entry_trigger R_ZERO_33_873_sample_start__ps R_ZERO_33_873_sample_completed__ps R_ZERO_33_873_update_start__ps R_ZERO_33_873_update_completed__ps phi_stmt_871_loopback_trigger RPIPE_noblock_obuf_1_2_875_sample_start__ps RPIPE_noblock_obuf_1_2_875_sample_completed__ps RPIPE_noblock_obuf_1_2_875_update_start__ps RPIPE_noblock_obuf_1_2_875_update_completed__ps :
          phi_stmt_871_sample_start__ps phi_stmt_871_sample_completed__ps phi_stmt_871_update_start__ps phi_stmt_871_update_completed__ps :
          phi_stmt_871_entry_sample_req_ps phi_stmt_871_loopback_sample_req_ps : 
          phi_stmt_871_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_871
          // start:  PHI statement phi_stmt_876
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_876_sample_start_] 
          $T[phi_stmt_876_sample_completed_] 
          $T[phi_stmt_876_update_start_] 
          $T[phi_stmt_876_update_completed_] 
          $T[phi_stmt_876_sample_start__ps] 
          phi_stmt_876_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_876_sample_completed__ps] 
          phi_stmt_876_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_876_update_start__ps] 
          phi_stmt_876_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_876_update_completed__ps] 
          phi_stmt_876_update_completed_ <-& (phi_stmt_876_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_876_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_876_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_876_update_start_)
          $T[phi_stmt_876_loopback_trigger] 
          phi_stmt_876_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_876_loopback_sample_req] 
          $T[phi_stmt_876_loopback_sample_req_ps] 
          phi_stmt_876_loopback_sample_req <-& (phi_stmt_876_loopback_sample_req_ps)
          phi_stmt_876_loopback_sample_req &-> ($null)
          $T[phi_stmt_876_entry_trigger] 
          phi_stmt_876_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_876_entry_sample_req] 
          $T[phi_stmt_876_entry_sample_req_ps] 
          phi_stmt_876_entry_sample_req <-& (phi_stmt_876_entry_sample_req_ps)
          phi_stmt_876_entry_sample_req &-> ($null)
          phi_stmt_876_update_start_ o<-& (phi_stmt_876_update_completed_ 0)
          phi_stmt_876_sample_start_ o<-& (phi_stmt_876_sample_completed_ 1)
          $T[phi_stmt_876_merged_reqs] 
          $T[phi_stmt_876_phi_mux_ack] 
          $T[phi_stmt_876_phi_mux_ack_ps] 
          phi_stmt_876_phi_mux_ack_ps <-& (phi_stmt_876_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_876_update_completed_)
          $T[R_ZERO_33_878_sample_start__ps] 
          $T[R_ZERO_33_878_sample_completed__ps] 
          $T[R_ZERO_33_878_update_start__ps] 
          $T[R_ZERO_33_878_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_878_sample_start_] 
          $T[R_ZERO_33_878_sample_completed_] 
          R_ZERO_33_878_sample_completed_ <-& (R_ZERO_33_878_sample_start_)
          $T[R_ZERO_33_878_update_start_] 
          $T [R_ZERO_33_878_update_completed_] $delay 
          R_ZERO_33_878_update_completed_ <-& (R_ZERO_33_878_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_878_sample_start_ <-& (R_ZERO_33_878_sample_start__ps)
          R_ZERO_33_878_update_start_ <-& (R_ZERO_33_878_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_878_sample_completed__ps <-& (R_ZERO_33_878_sample_completed_)
          R_ZERO_33_878_update_completed__ps <-& (R_ZERO_33_878_update_completed_)
          $T[RPIPE_noblock_obuf_2_2_880_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_880_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_2_880_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_880_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_2
          $T[RPIPE_noblock_obuf_2_2_880_sample_start_] 
          $T[RPIPE_noblock_obuf_2_2_880_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_2_880_update_start_] 
          $T[RPIPE_noblock_obuf_2_2_880_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_2_880 with guard R_read_from_2_879
          // root phi_stmt_876 not in visited_elements
          // root phi_stmt_881 not in visited_elements
          // root phi_stmt_886 not in visited_elements
          // root phi_stmt_891 not in visited_elements
          // root phi_stmt_895 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_2_880_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_2_880_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_2_880_sample_start_ &-> (RPIPE_noblock_obuf_2_2_880_Sample)
          RPIPE_noblock_obuf_2_2_880_sample_completed_ <-& (RPIPE_noblock_obuf_2_2_880_Sample)
          RPIPE_noblock_obuf_2_2_880_update_start_ <-& (RPIPE_noblock_obuf_2_2_880_sample_completed_)
          RPIPE_noblock_obuf_2_2_880_update_start_ &-> (RPIPE_noblock_obuf_2_2_880_Update)
          RPIPE_noblock_obuf_2_2_880_update_completed_ <-& (RPIPE_noblock_obuf_2_2_880_Update)
          RPIPE_noblock_obuf_2_2_880_sample_start_ o<-& (RPIPE_noblock_obuf_2_2_880_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_2_880_sample_start_ <-& (RPIPE_noblock_obuf_2_2_880_sample_start__ps)
          RPIPE_noblock_obuf_2_2_880_update_start_ <-& (RPIPE_noblock_obuf_2_2_880_update_start__ps)
          // RAW reenables for noblock_obuf_2_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_2_880_sample_completed__ps <-& (RPIPE_noblock_obuf_2_2_880_sample_completed_)
          RPIPE_noblock_obuf_2_2_880_update_completed__ps <-& (RPIPE_noblock_obuf_2_2_880_update_completed_)
          $phisequencer [ phi_stmt_876_phi_seq] : 
          phi_stmt_876_entry_trigger R_ZERO_33_878_sample_start__ps R_ZERO_33_878_sample_completed__ps R_ZERO_33_878_update_start__ps R_ZERO_33_878_update_completed__ps phi_stmt_876_loopback_trigger RPIPE_noblock_obuf_2_2_880_sample_start__ps RPIPE_noblock_obuf_2_2_880_sample_completed__ps RPIPE_noblock_obuf_2_2_880_update_start__ps RPIPE_noblock_obuf_2_2_880_update_completed__ps :
          phi_stmt_876_sample_start__ps phi_stmt_876_sample_completed__ps phi_stmt_876_update_start__ps phi_stmt_876_update_completed__ps :
          phi_stmt_876_entry_sample_req_ps phi_stmt_876_loopback_sample_req_ps : 
          phi_stmt_876_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_876
          // start:  PHI statement phi_stmt_881
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_881_sample_start_] 
          $T[phi_stmt_881_sample_completed_] 
          $T[phi_stmt_881_update_start_] 
          $T[phi_stmt_881_update_completed_] 
          $T[phi_stmt_881_sample_start__ps] 
          phi_stmt_881_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_881_sample_completed__ps] 
          phi_stmt_881_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_881_update_start__ps] 
          phi_stmt_881_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_881_update_completed__ps] 
          phi_stmt_881_update_completed_ <-& (phi_stmt_881_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_881_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_881_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_881_update_start_)
          $T[phi_stmt_881_loopback_trigger] 
          phi_stmt_881_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_881_loopback_sample_req] 
          $T[phi_stmt_881_loopback_sample_req_ps] 
          phi_stmt_881_loopback_sample_req <-& (phi_stmt_881_loopback_sample_req_ps)
          phi_stmt_881_loopback_sample_req &-> ($null)
          $T[phi_stmt_881_entry_trigger] 
          phi_stmt_881_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_881_entry_sample_req] 
          $T[phi_stmt_881_entry_sample_req_ps] 
          phi_stmt_881_entry_sample_req <-& (phi_stmt_881_entry_sample_req_ps)
          phi_stmt_881_entry_sample_req &-> ($null)
          phi_stmt_881_update_start_ o<-& (phi_stmt_881_update_completed_ 0)
          phi_stmt_881_sample_start_ o<-& (phi_stmt_881_sample_completed_ 1)
          $T[phi_stmt_881_merged_reqs] 
          $T[phi_stmt_881_phi_mux_ack] 
          $T[phi_stmt_881_phi_mux_ack_ps] 
          phi_stmt_881_phi_mux_ack_ps <-& (phi_stmt_881_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_881_update_completed_)
          $T[R_ZERO_33_883_sample_start__ps] 
          $T[R_ZERO_33_883_sample_completed__ps] 
          $T[R_ZERO_33_883_update_start__ps] 
          $T[R_ZERO_33_883_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_883_sample_start_] 
          $T[R_ZERO_33_883_sample_completed_] 
          R_ZERO_33_883_sample_completed_ <-& (R_ZERO_33_883_sample_start_)
          $T[R_ZERO_33_883_update_start_] 
          $T [R_ZERO_33_883_update_completed_] $delay 
          R_ZERO_33_883_update_completed_ <-& (R_ZERO_33_883_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_883_sample_start_ <-& (R_ZERO_33_883_sample_start__ps)
          R_ZERO_33_883_update_start_ <-& (R_ZERO_33_883_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_883_sample_completed__ps <-& (R_ZERO_33_883_sample_completed_)
          R_ZERO_33_883_update_completed__ps <-& (R_ZERO_33_883_update_completed_)
          $T[RPIPE_noblock_obuf_3_2_885_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_885_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_2_885_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_885_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_2
          $T[RPIPE_noblock_obuf_3_2_885_sample_start_] 
          $T[RPIPE_noblock_obuf_3_2_885_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_2_885_update_start_] 
          $T[RPIPE_noblock_obuf_3_2_885_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_2_885 with guard R_read_from_3_884
          // root phi_stmt_881 not in visited_elements
          // root phi_stmt_886 not in visited_elements
          // root phi_stmt_891 not in visited_elements
          // root phi_stmt_895 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_2_885_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_2_885_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_2_885_sample_start_ &-> (RPIPE_noblock_obuf_3_2_885_Sample)
          RPIPE_noblock_obuf_3_2_885_sample_completed_ <-& (RPIPE_noblock_obuf_3_2_885_Sample)
          RPIPE_noblock_obuf_3_2_885_update_start_ <-& (RPIPE_noblock_obuf_3_2_885_sample_completed_)
          RPIPE_noblock_obuf_3_2_885_update_start_ &-> (RPIPE_noblock_obuf_3_2_885_Update)
          RPIPE_noblock_obuf_3_2_885_update_completed_ <-& (RPIPE_noblock_obuf_3_2_885_Update)
          RPIPE_noblock_obuf_3_2_885_sample_start_ o<-& (RPIPE_noblock_obuf_3_2_885_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_2_885_sample_start_ <-& (RPIPE_noblock_obuf_3_2_885_sample_start__ps)
          RPIPE_noblock_obuf_3_2_885_update_start_ <-& (RPIPE_noblock_obuf_3_2_885_update_start__ps)
          // RAW reenables for noblock_obuf_3_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_2_885_sample_completed__ps <-& (RPIPE_noblock_obuf_3_2_885_sample_completed_)
          RPIPE_noblock_obuf_3_2_885_update_completed__ps <-& (RPIPE_noblock_obuf_3_2_885_update_completed_)
          $phisequencer [ phi_stmt_881_phi_seq] : 
          phi_stmt_881_entry_trigger R_ZERO_33_883_sample_start__ps R_ZERO_33_883_sample_completed__ps R_ZERO_33_883_update_start__ps R_ZERO_33_883_update_completed__ps phi_stmt_881_loopback_trigger RPIPE_noblock_obuf_3_2_885_sample_start__ps RPIPE_noblock_obuf_3_2_885_sample_completed__ps RPIPE_noblock_obuf_3_2_885_update_start__ps RPIPE_noblock_obuf_3_2_885_update_completed__ps :
          phi_stmt_881_sample_start__ps phi_stmt_881_sample_completed__ps phi_stmt_881_update_start__ps phi_stmt_881_update_completed__ps :
          phi_stmt_881_entry_sample_req_ps phi_stmt_881_loopback_sample_req_ps : 
          phi_stmt_881_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_881
          // start:  PHI statement phi_stmt_886
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_886_sample_start_] 
          $T[phi_stmt_886_sample_completed_] 
          $T[phi_stmt_886_update_start_] 
          $T[phi_stmt_886_update_completed_] 
          $T[phi_stmt_886_sample_start__ps] 
          phi_stmt_886_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_886_sample_completed__ps] 
          phi_stmt_886_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_886_update_start__ps] 
          phi_stmt_886_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_886_update_completed__ps] 
          phi_stmt_886_update_completed_ <-& (phi_stmt_886_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_886_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_886_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_886_update_start_)
          $T[phi_stmt_886_loopback_trigger] 
          phi_stmt_886_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_886_loopback_sample_req] 
          $T[phi_stmt_886_loopback_sample_req_ps] 
          phi_stmt_886_loopback_sample_req <-& (phi_stmt_886_loopback_sample_req_ps)
          phi_stmt_886_loopback_sample_req &-> ($null)
          $T[phi_stmt_886_entry_trigger] 
          phi_stmt_886_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_886_entry_sample_req] 
          $T[phi_stmt_886_entry_sample_req_ps] 
          phi_stmt_886_entry_sample_req <-& (phi_stmt_886_entry_sample_req_ps)
          phi_stmt_886_entry_sample_req &-> ($null)
          phi_stmt_886_update_start_ o<-& (phi_stmt_886_update_completed_ 0)
          phi_stmt_886_sample_start_ o<-& (phi_stmt_886_sample_completed_ 1)
          $T[phi_stmt_886_merged_reqs] 
          $T[phi_stmt_886_phi_mux_ack] 
          $T[phi_stmt_886_phi_mux_ack_ps] 
          phi_stmt_886_phi_mux_ack_ps <-& (phi_stmt_886_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_886_update_completed_)
          $T[R_ZERO_33_888_sample_start__ps] 
          $T[R_ZERO_33_888_sample_completed__ps] 
          $T[R_ZERO_33_888_update_start__ps] 
          $T[R_ZERO_33_888_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_888_sample_start_] 
          $T[R_ZERO_33_888_sample_completed_] 
          R_ZERO_33_888_sample_completed_ <-& (R_ZERO_33_888_sample_start_)
          $T[R_ZERO_33_888_update_start_] 
          $T [R_ZERO_33_888_update_completed_] $delay 
          R_ZERO_33_888_update_completed_ <-& (R_ZERO_33_888_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_888_sample_start_ <-& (R_ZERO_33_888_sample_start__ps)
          R_ZERO_33_888_update_start_ <-& (R_ZERO_33_888_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_888_sample_completed__ps <-& (R_ZERO_33_888_sample_completed_)
          R_ZERO_33_888_update_completed__ps <-& (R_ZERO_33_888_update_completed_)
          $T[RPIPE_noblock_obuf_4_2_890_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_890_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_2_890_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_890_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_2
          $T[RPIPE_noblock_obuf_4_2_890_sample_start_] 
          $T[RPIPE_noblock_obuf_4_2_890_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_2_890_update_start_] 
          $T[RPIPE_noblock_obuf_4_2_890_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_2_890 with guard R_read_from_4_889
          // root phi_stmt_886 not in visited_elements
          // root phi_stmt_891 not in visited_elements
          // root phi_stmt_895 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_2_890_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_2_890_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_2_890_sample_start_ &-> (RPIPE_noblock_obuf_4_2_890_Sample)
          RPIPE_noblock_obuf_4_2_890_sample_completed_ <-& (RPIPE_noblock_obuf_4_2_890_Sample)
          RPIPE_noblock_obuf_4_2_890_update_start_ <-& (RPIPE_noblock_obuf_4_2_890_sample_completed_)
          RPIPE_noblock_obuf_4_2_890_update_start_ &-> (RPIPE_noblock_obuf_4_2_890_Update)
          RPIPE_noblock_obuf_4_2_890_update_completed_ <-& (RPIPE_noblock_obuf_4_2_890_Update)
          RPIPE_noblock_obuf_4_2_890_sample_start_ o<-& (RPIPE_noblock_obuf_4_2_890_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_2_890_sample_start_ <-& (RPIPE_noblock_obuf_4_2_890_sample_start__ps)
          RPIPE_noblock_obuf_4_2_890_update_start_ <-& (RPIPE_noblock_obuf_4_2_890_update_start__ps)
          // RAW reenables for noblock_obuf_4_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_2_890_sample_completed__ps <-& (RPIPE_noblock_obuf_4_2_890_sample_completed_)
          RPIPE_noblock_obuf_4_2_890_update_completed__ps <-& (RPIPE_noblock_obuf_4_2_890_update_completed_)
          $phisequencer [ phi_stmt_886_phi_seq] : 
          phi_stmt_886_entry_trigger R_ZERO_33_888_sample_start__ps R_ZERO_33_888_sample_completed__ps R_ZERO_33_888_update_start__ps R_ZERO_33_888_update_completed__ps phi_stmt_886_loopback_trigger RPIPE_noblock_obuf_4_2_890_sample_start__ps RPIPE_noblock_obuf_4_2_890_sample_completed__ps RPIPE_noblock_obuf_4_2_890_update_start__ps RPIPE_noblock_obuf_4_2_890_update_completed__ps :
          phi_stmt_886_sample_start__ps phi_stmt_886_sample_completed__ps phi_stmt_886_update_start__ps phi_stmt_886_update_completed__ps :
          phi_stmt_886_entry_sample_req_ps phi_stmt_886_loopback_sample_req_ps : 
          phi_stmt_886_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_886
          // start:  PHI statement phi_stmt_891
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_891_sample_start_] 
          $T[phi_stmt_891_sample_completed_] 
          $T[phi_stmt_891_update_start_] 
          $T[phi_stmt_891_update_completed_] 
          $T[phi_stmt_891_sample_start__ps] 
          phi_stmt_891_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_891_sample_completed__ps] 
          phi_stmt_891_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_891_update_start__ps] 
          phi_stmt_891_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_891_update_completed__ps] 
          phi_stmt_891_update_completed_ <-& (phi_stmt_891_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_891_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_891_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_891_update_start_)
          $T[phi_stmt_891_loopback_trigger] 
          phi_stmt_891_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_891_loopback_sample_req] 
          $T[phi_stmt_891_loopback_sample_req_ps] 
          phi_stmt_891_loopback_sample_req <-& (phi_stmt_891_loopback_sample_req_ps)
          phi_stmt_891_loopback_sample_req &-> ($null)
          $T[phi_stmt_891_entry_trigger] 
          phi_stmt_891_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_891_entry_sample_req] 
          $T[phi_stmt_891_entry_sample_req_ps] 
          phi_stmt_891_entry_sample_req <-& (phi_stmt_891_entry_sample_req_ps)
          phi_stmt_891_entry_sample_req &-> ($null)
          phi_stmt_891_update_start_ o<-& (phi_stmt_891_update_completed_ 0)
          phi_stmt_891_sample_start_ o<-& (phi_stmt_891_sample_completed_ 1)
          $T[phi_stmt_891_merged_reqs] 
          $T[phi_stmt_891_phi_mux_ack] 
          $T[phi_stmt_891_phi_mux_ack_ps] 
          phi_stmt_891_phi_mux_ack_ps <-& (phi_stmt_891_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_891_update_completed_)
          $T[R_ZERO_3_893_sample_start__ps] 
          $T[R_ZERO_3_893_sample_completed__ps] 
          $T[R_ZERO_3_893_update_start__ps] 
          $T[R_ZERO_3_893_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_893_sample_start_] 
          $T[R_ZERO_3_893_sample_completed_] 
          R_ZERO_3_893_sample_completed_ <-& (R_ZERO_3_893_sample_start_)
          $T[R_ZERO_3_893_update_start_] 
          $T [R_ZERO_3_893_update_completed_] $delay 
          R_ZERO_3_893_update_completed_ <-& (R_ZERO_3_893_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_893_sample_start_ <-& (R_ZERO_3_893_sample_start__ps)
          R_ZERO_3_893_update_start_ <-& (R_ZERO_3_893_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_893_sample_completed__ps <-& (R_ZERO_3_893_sample_completed_)
          R_ZERO_3_893_update_completed__ps <-& (R_ZERO_3_893_update_completed_)
          $T[R_next_active_packet_894_sample_start__ps] 
          $T[R_next_active_packet_894_sample_completed__ps] 
          $T[R_next_active_packet_894_update_start__ps] 
          $T[R_next_active_packet_894_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_894_sample_start_] 
          $T[R_next_active_packet_894_sample_completed_] 
          $T[R_next_active_packet_894_update_start_] 
          $T[R_next_active_packet_894_update_completed_] 
          ;;[R_next_active_packet_894_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_894_sample_start_ &-> (R_next_active_packet_894_Sample)
          R_next_active_packet_894_sample_completed_ <-& (R_next_active_packet_894_Sample)
          ;;[R_next_active_packet_894_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_894_update_start_ &-> (R_next_active_packet_894_Update)
          R_next_active_packet_894_update_completed_ <-& (R_next_active_packet_894_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_894_sample_start_ <-& (R_next_active_packet_894_sample_start__ps)
          R_next_active_packet_894_update_start_ <-& (R_next_active_packet_894_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_894_sample_completed__ps <-& (R_next_active_packet_894_sample_completed_)
          R_next_active_packet_894_update_completed__ps <-& (R_next_active_packet_894_update_completed_)
          $phisequencer [ phi_stmt_891_phi_seq] : 
          phi_stmt_891_entry_trigger R_ZERO_3_893_sample_start__ps R_ZERO_3_893_sample_completed__ps R_ZERO_3_893_update_start__ps R_ZERO_3_893_update_completed__ps phi_stmt_891_loopback_trigger R_next_active_packet_894_sample_start__ps R_next_active_packet_894_sample_completed__ps R_next_active_packet_894_update_start__ps R_next_active_packet_894_update_completed__ps :
          phi_stmt_891_sample_start__ps phi_stmt_891_sample_completed__ps phi_stmt_891_update_start__ps phi_stmt_891_update_completed__ps :
          phi_stmt_891_entry_sample_req_ps phi_stmt_891_loopback_sample_req_ps : 
          phi_stmt_891_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_891
          // start:  PHI statement phi_stmt_895
          // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_895_sample_start_] 
          $T[phi_stmt_895_sample_completed_] 
          $T[phi_stmt_895_update_start_] 
          $T[phi_stmt_895_update_completed_] 
          $T[phi_stmt_895_sample_start__ps] 
          phi_stmt_895_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_895_sample_completed__ps] 
          phi_stmt_895_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_895_update_start__ps] 
          phi_stmt_895_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_895_update_completed__ps] 
          phi_stmt_895_update_completed_ <-& (phi_stmt_895_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_895_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_895_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_895_update_start_)
          $T[phi_stmt_895_loopback_trigger] 
          phi_stmt_895_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_895_loopback_sample_req] 
          $T[phi_stmt_895_loopback_sample_req_ps] 
          phi_stmt_895_loopback_sample_req <-& (phi_stmt_895_loopback_sample_req_ps)
          phi_stmt_895_loopback_sample_req &-> ($null)
          $T[phi_stmt_895_entry_trigger] 
          phi_stmt_895_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_895_entry_sample_req] 
          $T[phi_stmt_895_entry_sample_req_ps] 
          phi_stmt_895_entry_sample_req <-& (phi_stmt_895_entry_sample_req_ps)
          phi_stmt_895_entry_sample_req &-> ($null)
          phi_stmt_895_update_start_ o<-& (phi_stmt_895_update_completed_ 0)
          phi_stmt_895_sample_start_ o<-& (phi_stmt_895_sample_completed_ 1)
          $T[phi_stmt_895_merged_reqs] 
          $T[phi_stmt_895_phi_mux_ack] 
          $T[phi_stmt_895_phi_mux_ack_ps] 
          phi_stmt_895_phi_mux_ack_ps <-& (phi_stmt_895_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_895_update_completed_)
          $T[R_ONE_3_897_sample_start__ps] 
          $T[R_ONE_3_897_sample_completed__ps] 
          $T[R_ONE_3_897_update_start__ps] 
          $T[R_ONE_3_897_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ONE_3_897_sample_start_] 
          $T[R_ONE_3_897_sample_completed_] 
          R_ONE_3_897_sample_completed_ <-& (R_ONE_3_897_sample_start_)
          $T[R_ONE_3_897_update_start_] 
          $T [R_ONE_3_897_update_completed_] $delay 
          R_ONE_3_897_update_completed_ <-& (R_ONE_3_897_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ONE_3_897_sample_start_ <-& (R_ONE_3_897_sample_start__ps)
          R_ONE_3_897_update_start_ <-& (R_ONE_3_897_update_start__ps)
          // Phi complete dependency.
          R_ONE_3_897_sample_completed__ps <-& (R_ONE_3_897_sample_completed_)
          R_ONE_3_897_update_completed__ps <-& (R_ONE_3_897_update_completed_)
          $T[R_next_pkt_priority_898_sample_start__ps] 
          $T[R_next_pkt_priority_898_sample_completed__ps] 
          $T[R_next_pkt_priority_898_update_start__ps] 
          $T[R_next_pkt_priority_898_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_898_sample_start_] 
          $T[R_next_pkt_priority_898_sample_completed_] 
          $T[R_next_pkt_priority_898_update_start_] 
          $T[R_next_pkt_priority_898_update_completed_] 
          ;;[R_next_pkt_priority_898_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_898_sample_start_ &-> (R_next_pkt_priority_898_Sample)
          R_next_pkt_priority_898_sample_completed_ <-& (R_next_pkt_priority_898_Sample)
          ;;[R_next_pkt_priority_898_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_898_update_start_ &-> (R_next_pkt_priority_898_Update)
          R_next_pkt_priority_898_update_completed_ <-& (R_next_pkt_priority_898_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_898_sample_start_ <-& (R_next_pkt_priority_898_sample_start__ps)
          R_next_pkt_priority_898_update_start_ <-& (R_next_pkt_priority_898_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_898_sample_completed__ps <-& (R_next_pkt_priority_898_sample_completed_)
          R_next_pkt_priority_898_update_completed__ps <-& (R_next_pkt_priority_898_update_completed_)
          $phisequencer [ phi_stmt_895_phi_seq] : 
          phi_stmt_895_entry_trigger R_ONE_3_897_sample_start__ps R_ONE_3_897_sample_completed__ps R_ONE_3_897_update_start__ps R_ONE_3_897_update_completed__ps phi_stmt_895_loopback_trigger R_next_pkt_priority_898_sample_start__ps R_next_pkt_priority_898_sample_completed__ps R_next_pkt_priority_898_update_start__ps R_next_pkt_priority_898_update_completed__ps :
          phi_stmt_895_sample_start__ps phi_stmt_895_sample_completed__ps phi_stmt_895_update_start__ps phi_stmt_895_update_completed__ps :
          phi_stmt_895_entry_sample_req_ps phi_stmt_895_loopback_sample_req_ps : 
          phi_stmt_895_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_895
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 283
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 284
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 285
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 286
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 287
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 288
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 289
          // volatile! 
          // Source expression
          // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
          // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
          // (p1_valid | p2_valid)
          // p1_valid
          // p2_valid
          // (p3_valid | p4_valid)
          // p3_valid
          // p4_valid
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 290
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 291
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 292
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 293
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 294
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 295
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 296
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 297
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_2
          $T[WPIPE_out_data_2_1078_sample_start_] 
          $T[WPIPE_out_data_2_1078_sample_completed_] 
          $T[WPIPE_out_data_2_1078_update_start_] 
          $T[WPIPE_out_data_2_1078_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_2_1078 with guard R_send_flag_1077
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_867_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_871_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_876_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_881_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_886_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_891_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_895_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_867_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_871_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_876_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_881_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_886_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_891_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_895_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          ;;[WPIPE_out_data_2_1078_Sample] 
          {
            // pipe write sample-start out_data_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_2_1078_Update] 
          {
            // pipe write update (complete) out_data_2
            $T [req] $T [ack] 
          }
          WPIPE_out_data_2_1078_sample_start_ &-> (WPIPE_out_data_2_1078_Sample)
          WPIPE_out_data_2_1078_sample_completed_ <-& (WPIPE_out_data_2_1078_Sample)
          WPIPE_out_data_2_1078_update_start_ <-& (WPIPE_out_data_2_1078_sample_completed_)
          WPIPE_out_data_2_1078_update_start_ &-> (WPIPE_out_data_2_1078_Update)
          WPIPE_out_data_2_1078_update_completed_ <-& (WPIPE_out_data_2_1078_Update)
          WPIPE_out_data_2_1078_sample_start_ o<-& (WPIPE_out_data_2_1078_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1078_sample_start_
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_867_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_871_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_876_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_881_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_886_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_891_update_completed_)
          WPIPE_out_data_2_1078_sample_start_ <-& (phi_stmt_895_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1078_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_867_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_871_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_876_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_881_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_886_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_891_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          phi_stmt_895_update_start_ o<-& (WPIPE_out_data_2_1078_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe out_data_2
          // read-dependencies for pipe out_data_2
          // write-dependencies for pipe out_data_2
          // signal write dependencies for out_data_2
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_865__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_865_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_865__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_865_loop_body : condition_evaluated
        $bind do_while_stmt_865__entry__  => do_while_stmt_865_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_865_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_865__exit__)
      }
      do_while_stmt_865__entry__ |-> (do_while_stmt_865)
      do_while_stmt_865__exit__ <-| (do_while_stmt_865)
      do_while_stmt_865__entry__ <-| (branch_block_stmt_864__entry__)
      do_while_stmt_865__exit__ |-> (branch_block_stmt_864__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 267
    // constant-object-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 263
    // constant-object-declarations for block %outputPort_2_Daemon
    //  file .Aa/switch2x2.opt.aa, line 258
    // constant-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 263
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 265
    // 1 
    $constant $W[konst_1082_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 267
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 268
    // ZERO_8
    $constant $W[R_ZERO_8_869_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 270
    // ZERO_33
    $constant $W[R_ZERO_33_873_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 272
    // ZERO_33
    $constant $W[R_ZERO_33_878_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 274
    // ZERO_33
    $constant $W[R_ZERO_33_883_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 276
    // ZERO_33
    $constant $W[R_ZERO_33_888_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 278
    // ZERO_3
    $constant $W[R_ZERO_3_893_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 280
    // ONE_3
    $constant $W[R_ONE_3_897_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_902_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_907_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_912_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_917_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_922_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_925_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_928_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_931_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_935_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_938_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_941_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_944_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 288
    // 0 
    $constant $W[konst_968_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_974_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_977_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_987_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_995_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1003_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1011_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1017_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1021_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1024_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1028_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1032_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1036_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1039_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1043_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1050_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1053_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1056_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1059_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1063_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1066_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1069_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1072_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 263
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 265
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 267
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 268
    $W[next_down_counter_982_870_buffered] : $int<8>
    // down_counter
    $W[down_counter_867] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 270
    // noblock_obuf_1_2
    $W[RPIPE_noblock_obuf_1_2_875_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_871] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 272
    // noblock_obuf_2_2
    $W[RPIPE_noblock_obuf_2_2_880_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_876] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 274
    // noblock_obuf_3_2
    $W[RPIPE_noblock_obuf_3_2_885_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_881] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 276
    // noblock_obuf_4_2
    $W[RPIPE_noblock_obuf_4_2_890_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_886] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 278
    $W[next_active_packet_958_894_buffered] : $int<3>
    // active_packet
    $W[active_packet_891] : $int<3>
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 280
    $W[next_pkt_priority_958_898_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_895] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 283
    // p1_valid
    $W[p1_valid_904] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 284
    // p2_valid
    $W[p2_valid_909] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 285
    // p3_valid
    $W[p3_valid_914] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 286
    // p4_valid
    $W[p4_valid_919] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 287
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_923_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_926_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_929_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_932_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_933_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_936_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_939_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_942_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_945_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_946_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_948] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 288
    // next_active_packet
    $W[next_active_packet_958] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_958] : $int<3>
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 289
    // (p1_valid | p2_valid)
    $intermediate $W[OR_u1_u1_962_wire] : $int<1>
    // (p3_valid | p4_valid)
    $intermediate $W[OR_u1_u1_965_wire] : $int<1>
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    $intermediate $W[OR_u1_u1_966_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_969_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_971] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 290
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_978_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_980_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_982] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 291
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_985_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_988_wire] : $int<1>
    // read_from_1
    $W[read_from_1_990] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 292
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_993_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_996_wire] : $int<1>
    // read_from_2
    $W[read_from_2_998] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 293
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1001_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1004_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1006] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 294
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1009_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1012_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1014] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 295
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1018_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1020_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1022_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1025_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1027_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1029_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1030_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1033_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1035_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1037_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1040_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1042_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1044_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1045_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1047] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 296
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1051_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1054_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1057_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1060_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1061_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1064_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1067_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1070_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1073_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1074_wire] : $int<1>
    // send_flag
    $W[send_flag_1076] : $int<1>
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 297
    // out_data_2
    // datapath-instances for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 263
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 265
    ==0? [do_while_stmt_865_branch] (konst_1082_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 267
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 268
    # := [next_down_counter_982_870_buf] (next_down_counter_982) (next_down_counter_982_870_buffered)     $fullrate
    $buffering $out next_down_counter_982_870_buf next_down_counter_982_870_buffered  1
    # $phi [phi_stmt_867] (R_ZERO_8_869_wire_constant next_down_counter_982_870_buffered) ( down_counter_867 ) $fullrate
    // $buffering  $out phi_stmt_867 down_counter_867 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 270
    // noblock_obuf_1_2
    $ioport $in [RPIPE_noblock_obuf_1_2_875_inst] (noblock_obuf_1_2) (RPIPE_noblock_obuf_1_2_875_wire) $guard ( read_from_1_990 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_2_875_inst RPIPE_noblock_obuf_1_2_875_wire 1
    # $phi [phi_stmt_871] (R_ZERO_33_873_wire_constant RPIPE_noblock_obuf_1_2_875_wire) ( pkt_1_e_word_871 ) $fullrate
    // $buffering  $out phi_stmt_871 pkt_1_e_word_871 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 272
    // noblock_obuf_2_2
    $ioport $in [RPIPE_noblock_obuf_2_2_880_inst] (noblock_obuf_2_2) (RPIPE_noblock_obuf_2_2_880_wire) $guard ( read_from_2_998 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_2_880_inst RPIPE_noblock_obuf_2_2_880_wire 1
    # $phi [phi_stmt_876] (R_ZERO_33_878_wire_constant RPIPE_noblock_obuf_2_2_880_wire) ( pkt_2_e_word_876 ) $fullrate
    // $buffering  $out phi_stmt_876 pkt_2_e_word_876 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 274
    // noblock_obuf_3_2
    $ioport $in [RPIPE_noblock_obuf_3_2_885_inst] (noblock_obuf_3_2) (RPIPE_noblock_obuf_3_2_885_wire) $guard ( read_from_3_1006 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_2_885_inst RPIPE_noblock_obuf_3_2_885_wire 1
    # $phi [phi_stmt_881] (R_ZERO_33_883_wire_constant RPIPE_noblock_obuf_3_2_885_wire) ( pkt_3_e_word_881 ) $fullrate
    // $buffering  $out phi_stmt_881 pkt_3_e_word_881 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 276
    // noblock_obuf_4_2
    $ioport $in [RPIPE_noblock_obuf_4_2_890_inst] (noblock_obuf_4_2) (RPIPE_noblock_obuf_4_2_890_wire) $guard ( read_from_4_1014 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_2_890_inst RPIPE_noblock_obuf_4_2_890_wire 1
    # $phi [phi_stmt_886] (R_ZERO_33_888_wire_constant RPIPE_noblock_obuf_4_2_890_wire) ( pkt_4_e_word_886 ) $fullrate
    // $buffering  $out phi_stmt_886 pkt_4_e_word_886 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 278
    # := [next_active_packet_958_894_buf] (next_active_packet_958) (next_active_packet_958_894_buffered)     $fullrate
    $buffering $out next_active_packet_958_894_buf next_active_packet_958_894_buffered  1
    # $phi [phi_stmt_891] (R_ZERO_3_893_wire_constant next_active_packet_958_894_buffered) ( active_packet_891 ) $fullrate
    // $buffering  $out phi_stmt_891 active_packet_891 2
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 280
    # := [next_pkt_priority_958_898_buf] (next_pkt_priority_958) (next_pkt_priority_958_898_buffered)     $fullrate
    $buffering $out next_pkt_priority_958_898_buf next_pkt_priority_958_898_buffered  1
    # $phi [phi_stmt_895] (R_ONE_3_897_wire_constant next_pkt_priority_958_898_buffered) ( pkt_priority_895 ) $fullrate
    // $buffering  $out phi_stmt_895 pkt_priority_895 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 283
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_903_inst] (pkt_1_e_word_871 konst_902_wire_constant) (p1_valid_904)   $flowthrough 
    $delay BITSEL_u33_u1_903_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 284
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_908_inst] (pkt_2_e_word_876 konst_907_wire_constant) (p2_valid_909)   $flowthrough 
    $delay BITSEL_u33_u1_908_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 285
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_913_inst] (pkt_3_e_word_881 konst_912_wire_constant) (p3_valid_914)   $flowthrough 
    $delay BITSEL_u33_u1_913_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 286
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_918_inst] (pkt_4_e_word_886 konst_917_wire_constant) (p4_valid_919)   $flowthrough 
    $delay BITSEL_u33_u1_918_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 287
    // (active_packet == 1 )
    ==[EQ_u3_u1_923_inst] (active_packet_891 konst_922_wire_constant) (EQ_u3_u1_923_wire)   $flowthrough 
    $delay EQ_u3_u1_923_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_926_inst] (EQ_u3_u1_923_wire p1_valid_904 konst_925_wire_constant) (MUX_926_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_929_inst] (active_packet_891 konst_928_wire_constant) (EQ_u3_u1_929_wire)   $flowthrough 
    $delay EQ_u3_u1_929_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_932_inst] (EQ_u3_u1_929_wire p2_valid_909 konst_931_wire_constant) (MUX_932_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_933_inst] (MUX_926_wire MUX_932_wire) (OR_u1_u1_933_wire)   $flowthrough 
    $delay OR_u1_u1_933_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_936_inst] (active_packet_891 konst_935_wire_constant) (EQ_u3_u1_936_wire)   $flowthrough 
    $delay EQ_u3_u1_936_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_939_inst] (EQ_u3_u1_936_wire p3_valid_914 konst_938_wire_constant) (MUX_939_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_942_inst] (active_packet_891 konst_941_wire_constant) (EQ_u3_u1_942_wire)   $flowthrough 
    $delay EQ_u3_u1_942_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_945_inst] (EQ_u3_u1_942_wire p4_valid_919 konst_944_wire_constant) (MUX_945_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_946_inst] (MUX_939_wire MUX_945_wire) (OR_u1_u1_946_wire)   $flowthrough 
    $delay OR_u1_u1_946_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_947_inst] (OR_u1_u1_933_wire OR_u1_u1_946_wire) (valid_active_pkt_word_read_948)   $flowthrough 
    $delay OR_u1_u1_947_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 288
    $call [call_stmt_958_call] $module prioritySelect(down_counter_867 active_packet_891 pkt_priority_895 p1_valid_904 p2_valid_909 p3_valid_914 p4_valid_919) (next_active_packet_958 next_pkt_priority_958)   $flowthrough $fullrate
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 289
    // (p1_valid | p2_valid)
    |[OR_u1_u1_962_inst] (p1_valid_904 p2_valid_909) (OR_u1_u1_962_wire)   $flowthrough 
    $delay OR_u1_u1_962_inst 0
    // (p3_valid | p4_valid)
    |[OR_u1_u1_965_inst] (p3_valid_914 p4_valid_919) (OR_u1_u1_965_wire)   $flowthrough 
    $delay OR_u1_u1_965_inst 0
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    |[OR_u1_u1_966_inst] (OR_u1_u1_962_wire OR_u1_u1_965_wire) (OR_u1_u1_966_wire)   $flowthrough 
    $delay OR_u1_u1_966_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_969_inst] (down_counter_867 konst_968_wire_constant) (EQ_u8_u1_969_wire)   $flowthrough 
    $delay EQ_u8_u1_969_inst 0
    // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
    &[AND_u1_u1_970_inst] (OR_u1_u1_966_wire EQ_u8_u1_969_wire) (started_new_packet_971)   $flowthrough 
    $delay AND_u1_u1_970_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 290
    // (down_counter - 1 )
    -[SUB_u8_u8_978_inst] (down_counter_867 konst_977_wire_constant) (SUB_u8_u8_978_wire)   $flowthrough 
    $delay SUB_u8_u8_978_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_980_inst] (valid_active_pkt_word_read_948 SUB_u8_u8_978_wire down_counter_867) (MUX_980_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_981_inst] (started_new_packet_971 konst_974_wire_constant MUX_980_wire) (next_down_counter_982)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 291
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_985_inst] (p1_valid_904) (NOT_u1_u1_985_wire)   $flowthrough
    $delay NOT_u1_u1_985_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_988_inst] (next_active_packet_958 konst_987_wire_constant) (EQ_u3_u1_988_wire)   $flowthrough 
    $delay EQ_u3_u1_988_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_989_inst] (NOT_u1_u1_985_wire EQ_u3_u1_988_wire) (read_from_1_990)   $flowthrough 
    $delay OR_u1_u1_989_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 292
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_993_inst] (p2_valid_909) (NOT_u1_u1_993_wire)   $flowthrough
    $delay NOT_u1_u1_993_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_996_inst] (next_active_packet_958 konst_995_wire_constant) (EQ_u3_u1_996_wire)   $flowthrough 
    $delay EQ_u3_u1_996_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_997_inst] (NOT_u1_u1_993_wire EQ_u3_u1_996_wire) (read_from_2_998)   $flowthrough 
    $delay OR_u1_u1_997_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 293
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1001_inst] (p3_valid_914) (NOT_u1_u1_1001_wire)   $flowthrough
    $delay NOT_u1_u1_1001_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1004_inst] (next_active_packet_958 konst_1003_wire_constant) (EQ_u3_u1_1004_wire)   $flowthrough 
    $delay EQ_u3_u1_1004_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1005_inst] (NOT_u1_u1_1001_wire EQ_u3_u1_1004_wire) (read_from_3_1006)   $flowthrough 
    $delay OR_u1_u1_1005_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 294
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1009_inst] (p4_valid_919) (NOT_u1_u1_1009_wire)   $flowthrough
    $delay NOT_u1_u1_1009_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1012_inst] (next_active_packet_958 konst_1011_wire_constant) (EQ_u3_u1_1012_wire)   $flowthrough 
    $delay EQ_u3_u1_1012_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1013_inst] (NOT_u1_u1_1009_wire EQ_u3_u1_1012_wire) (read_from_4_1014)   $flowthrough 
    $delay OR_u1_u1_1013_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 295
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1018_inst] (next_active_packet_958 konst_1017_wire_constant) (EQ_u3_u1_1018_wire)   $flowthrough 
    $delay EQ_u3_u1_1018_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1020_inst] (pkt_1_e_word_871 31 0) (slice_1020_wire)  $flowthrough
    $delay slice_1020_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1022_inst] (EQ_u3_u1_1018_wire slice_1020_wire konst_1021_wire_constant) (MUX_1022_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1025_inst] (next_active_packet_958 konst_1024_wire_constant) (EQ_u3_u1_1025_wire)   $flowthrough 
    $delay EQ_u3_u1_1025_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1027_inst] (pkt_2_e_word_876 31 0) (slice_1027_wire)  $flowthrough
    $delay slice_1027_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1029_inst] (EQ_u3_u1_1025_wire slice_1027_wire konst_1028_wire_constant) (MUX_1029_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1030_inst] (MUX_1022_wire MUX_1029_wire) (OR_u32_u32_1030_wire)   $flowthrough 
    $delay OR_u32_u32_1030_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1033_inst] (next_active_packet_958 konst_1032_wire_constant) (EQ_u3_u1_1033_wire)   $flowthrough 
    $delay EQ_u3_u1_1033_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1035_inst] (pkt_3_e_word_881 31 0) (slice_1035_wire)  $flowthrough
    $delay slice_1035_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1037_inst] (EQ_u3_u1_1033_wire slice_1035_wire konst_1036_wire_constant) (MUX_1037_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1040_inst] (next_active_packet_958 konst_1039_wire_constant) (EQ_u3_u1_1040_wire)   $flowthrough 
    $delay EQ_u3_u1_1040_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1042_inst] (pkt_4_e_word_886 31 0) (slice_1042_wire)  $flowthrough
    $delay slice_1042_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1044_inst] (EQ_u3_u1_1040_wire slice_1042_wire konst_1043_wire_constant) (MUX_1044_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1045_inst] (MUX_1037_wire MUX_1044_wire) (OR_u32_u32_1045_wire)   $flowthrough 
    $delay OR_u32_u32_1045_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1046_inst] (OR_u32_u32_1030_wire OR_u32_u32_1045_wire) (data_to_out_1047)   $flowthrough 
    $delay OR_u32_u32_1046_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 296
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1051_inst] (next_active_packet_958 konst_1050_wire_constant) (EQ_u3_u1_1051_wire)   $flowthrough 
    $delay EQ_u3_u1_1051_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1054_inst] (EQ_u3_u1_1051_wire p1_valid_904 konst_1053_wire_constant) (MUX_1054_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1057_inst] (next_active_packet_958 konst_1056_wire_constant) (EQ_u3_u1_1057_wire)   $flowthrough 
    $delay EQ_u3_u1_1057_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1060_inst] (EQ_u3_u1_1057_wire p2_valid_909 konst_1059_wire_constant) (MUX_1060_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1061_inst] (MUX_1054_wire MUX_1060_wire) (OR_u1_u1_1061_wire)   $flowthrough 
    $delay OR_u1_u1_1061_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1064_inst] (next_active_packet_958 konst_1063_wire_constant) (EQ_u3_u1_1064_wire)   $flowthrough 
    $delay EQ_u3_u1_1064_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1067_inst] (EQ_u3_u1_1064_wire p3_valid_914 konst_1066_wire_constant) (MUX_1067_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1070_inst] (next_active_packet_958 konst_1069_wire_constant) (EQ_u3_u1_1070_wire)   $flowthrough 
    $delay EQ_u3_u1_1070_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1073_inst] (EQ_u3_u1_1070_wire p4_valid_919 konst_1072_wire_constant) (MUX_1073_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1074_inst] (MUX_1067_wire MUX_1073_wire) (OR_u1_u1_1074_wire)   $flowthrough 
    $delay OR_u1_u1_1074_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1075_inst] (OR_u1_u1_1061_wire OR_u1_u1_1074_wire) (send_flag_1076)   $flowthrough 
    $delay OR_u1_u1_1075_inst 0
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 297
    // out_data_2
    $ioport $out [WPIPE_out_data_2_1078_inst]  (data_to_out_1047) (out_data_2) $guard ( send_flag_1076 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_865
  //  file .Aa/switch2x2.opt.aa, line 265
  phi_stmt_867 <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_867_entry_sample_req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_867_loopback_sample_req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_867_phi_mux_ack)
  next_down_counter_982_870_buf <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_down_counter_870_Sample/req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_down_counter_870_Update/req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_down_counter_870_Sample/ack branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_down_counter_870_Update/ack)
  phi_stmt_871 <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_871_entry_sample_req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_871_loopback_sample_req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_871_phi_mux_ack)
  // noblock_obuf_1_2
  RPIPE_noblock_obuf_1_2_875_inst <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_1_2_875_Sample/rr branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_1_2_875_Update/cr) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_1_2_875_Sample/ra branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_1_2_875_Update/ca)
  phi_stmt_876 <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_876_entry_sample_req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_876_loopback_sample_req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_876_phi_mux_ack)
  // noblock_obuf_2_2
  RPIPE_noblock_obuf_2_2_880_inst <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_2_2_880_Sample/rr branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_2_2_880_Update/cr) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_2_2_880_Sample/ra branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_2_2_880_Update/ca)
  phi_stmt_881 <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_881_entry_sample_req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_881_loopback_sample_req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_881_phi_mux_ack)
  // noblock_obuf_3_2
  RPIPE_noblock_obuf_3_2_885_inst <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_3_2_885_Sample/rr branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_3_2_885_Update/cr) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_3_2_885_Sample/ra branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_3_2_885_Update/ca)
  phi_stmt_886 <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_886_entry_sample_req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_886_loopback_sample_req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_886_phi_mux_ack)
  // noblock_obuf_4_2
  RPIPE_noblock_obuf_4_2_890_inst <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_4_2_890_Sample/rr branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_4_2_890_Update/cr) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_4_2_890_Sample/ra branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/RPIPE_noblock_obuf_4_2_890_Update/ca)
  phi_stmt_891 <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_891_entry_sample_req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_891_loopback_sample_req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_891_phi_mux_ack)
  next_active_packet_958_894_buf <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_active_packet_894_Sample/req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_active_packet_894_Update/req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_active_packet_894_Sample/ack branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_active_packet_894_Update/ack)
  phi_stmt_895 <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_895_entry_sample_req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_895_loopback_sample_req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/phi_stmt_895_phi_mux_ack)
  next_pkt_priority_958_898_buf <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_pkt_priority_898_Sample/req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_pkt_priority_898_Update/req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_pkt_priority_898_Sample/ack branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/R_next_pkt_priority_898_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 283
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 284
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 285
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 286
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 287
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 288
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 289
  // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
  // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
  // (p1_valid | p2_valid)
  // p1_valid
  // p2_valid
  // (p3_valid | p4_valid)
  // p3_valid
  // p4_valid
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 290
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 291
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 292
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 293
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 294
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 295
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 296
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 297
  // data_to_out
  // out_data_2
  WPIPE_out_data_2_1078_inst <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/WPIPE_out_data_2_1078_Sample/req branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/WPIPE_out_data_2_1078_Update/req) (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/WPIPE_out_data_2_1078_Sample/ack branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/WPIPE_out_data_2_1078_Update/ack)
  do_while_stmt_865_branch <=> (branch_block_stmt_864/do_while_stmt_865/do_while_stmt_865_loop_body/condition_evaluated) (branch_block_stmt_864/do_while_stmt_865/loop_exit/ack branch_block_stmt_864/do_while_stmt_865/loop_taken/ack)
}
$module [outputPort_3_Daemon] 
{
  // pipe-declarations for block %outputPort_3_Daemon
  //  file .Aa/switch2x2.opt.aa, line 301
  // pipe-declarations for block %outputPort_3_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 306
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1086] // Branch Block  file .Aa/switch2x2.opt.aa, line 306
    {
      $P [branch_block_stmt_1086__entry__]
      branch_block_stmt_1086__entry__ <-| ($entry)
      $P [branch_block_stmt_1086__exit__]
      branch_block_stmt_1086__exit__ |-> ($exit)
      $P [do_while_stmt_1087__entry__] 
      $P [do_while_stmt_1087__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 308
      <o> [do_while_stmt_1087]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1087__entry__] 
        $P[do_while_stmt_1087__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1087_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1089
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1089_sample_start_] 
          $T[phi_stmt_1089_sample_completed_] 
          $T[phi_stmt_1089_update_start_] 
          $T[phi_stmt_1089_update_completed_] 
          $T[phi_stmt_1089_sample_start__ps] 
          phi_stmt_1089_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1089_sample_completed__ps] 
          phi_stmt_1089_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1089_update_start__ps] 
          phi_stmt_1089_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1089_update_completed__ps] 
          phi_stmt_1089_update_completed_ <-& (phi_stmt_1089_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1089_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1089_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1089_update_start_)
          $T[phi_stmt_1089_loopback_trigger] 
          phi_stmt_1089_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1089_loopback_sample_req] 
          $T[phi_stmt_1089_loopback_sample_req_ps] 
          phi_stmt_1089_loopback_sample_req <-& (phi_stmt_1089_loopback_sample_req_ps)
          phi_stmt_1089_loopback_sample_req &-> ($null)
          $T[phi_stmt_1089_entry_trigger] 
          phi_stmt_1089_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1089_entry_sample_req] 
          $T[phi_stmt_1089_entry_sample_req_ps] 
          phi_stmt_1089_entry_sample_req <-& (phi_stmt_1089_entry_sample_req_ps)
          phi_stmt_1089_entry_sample_req &-> ($null)
          phi_stmt_1089_update_start_ o<-& (phi_stmt_1089_update_completed_ 0)
          phi_stmt_1089_sample_start_ o<-& (phi_stmt_1089_sample_completed_ 1)
          $T[phi_stmt_1089_merged_reqs] 
          $T[phi_stmt_1089_phi_mux_ack] 
          $T[phi_stmt_1089_phi_mux_ack_ps] 
          phi_stmt_1089_phi_mux_ack_ps <-& (phi_stmt_1089_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1089_update_completed_)
          $T[R_ZERO_8_1091_sample_start__ps] 
          $T[R_ZERO_8_1091_sample_completed__ps] 
          $T[R_ZERO_8_1091_update_start__ps] 
          $T[R_ZERO_8_1091_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1091_sample_start_] 
          $T[R_ZERO_8_1091_sample_completed_] 
          R_ZERO_8_1091_sample_completed_ <-& (R_ZERO_8_1091_sample_start_)
          $T[R_ZERO_8_1091_update_start_] 
          $T [R_ZERO_8_1091_update_completed_] $delay 
          R_ZERO_8_1091_update_completed_ <-& (R_ZERO_8_1091_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1091_sample_start_ <-& (R_ZERO_8_1091_sample_start__ps)
          R_ZERO_8_1091_update_start_ <-& (R_ZERO_8_1091_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1091_sample_completed__ps <-& (R_ZERO_8_1091_sample_completed_)
          R_ZERO_8_1091_update_completed__ps <-& (R_ZERO_8_1091_update_completed_)
          $T[R_next_down_counter_1092_sample_start__ps] 
          $T[R_next_down_counter_1092_sample_completed__ps] 
          $T[R_next_down_counter_1092_update_start__ps] 
          $T[R_next_down_counter_1092_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1092_sample_start_] 
          $T[R_next_down_counter_1092_sample_completed_] 
          $T[R_next_down_counter_1092_update_start_] 
          $T[R_next_down_counter_1092_update_completed_] 
          ;;[R_next_down_counter_1092_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1092_sample_start_ &-> (R_next_down_counter_1092_Sample)
          R_next_down_counter_1092_sample_completed_ <-& (R_next_down_counter_1092_Sample)
          ;;[R_next_down_counter_1092_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1092_update_start_ &-> (R_next_down_counter_1092_Update)
          R_next_down_counter_1092_update_completed_ <-& (R_next_down_counter_1092_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1092_sample_start_ <-& (R_next_down_counter_1092_sample_start__ps)
          R_next_down_counter_1092_update_start_ <-& (R_next_down_counter_1092_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1092_sample_completed__ps <-& (R_next_down_counter_1092_sample_completed_)
          R_next_down_counter_1092_update_completed__ps <-& (R_next_down_counter_1092_update_completed_)
          $phisequencer [ phi_stmt_1089_phi_seq] : 
          phi_stmt_1089_entry_trigger R_ZERO_8_1091_sample_start__ps R_ZERO_8_1091_sample_completed__ps R_ZERO_8_1091_update_start__ps R_ZERO_8_1091_update_completed__ps phi_stmt_1089_loopback_trigger R_next_down_counter_1092_sample_start__ps R_next_down_counter_1092_sample_completed__ps R_next_down_counter_1092_update_start__ps R_next_down_counter_1092_update_completed__ps :
          phi_stmt_1089_sample_start__ps phi_stmt_1089_sample_completed__ps phi_stmt_1089_update_start__ps phi_stmt_1089_update_completed__ps :
          phi_stmt_1089_entry_sample_req_ps phi_stmt_1089_loopback_sample_req_ps : 
          phi_stmt_1089_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1089
          // start:  PHI statement phi_stmt_1093
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1093_sample_start_] 
          $T[phi_stmt_1093_sample_completed_] 
          $T[phi_stmt_1093_update_start_] 
          $T[phi_stmt_1093_update_completed_] 
          $T[phi_stmt_1093_sample_start__ps] 
          phi_stmt_1093_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1093_sample_completed__ps] 
          phi_stmt_1093_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1093_update_start__ps] 
          phi_stmt_1093_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1093_update_completed__ps] 
          phi_stmt_1093_update_completed_ <-& (phi_stmt_1093_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1093_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1093_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1093_update_start_)
          $T[phi_stmt_1093_loopback_trigger] 
          phi_stmt_1093_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1093_loopback_sample_req] 
          $T[phi_stmt_1093_loopback_sample_req_ps] 
          phi_stmt_1093_loopback_sample_req <-& (phi_stmt_1093_loopback_sample_req_ps)
          phi_stmt_1093_loopback_sample_req &-> ($null)
          $T[phi_stmt_1093_entry_trigger] 
          phi_stmt_1093_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1093_entry_sample_req] 
          $T[phi_stmt_1093_entry_sample_req_ps] 
          phi_stmt_1093_entry_sample_req <-& (phi_stmt_1093_entry_sample_req_ps)
          phi_stmt_1093_entry_sample_req &-> ($null)
          phi_stmt_1093_update_start_ o<-& (phi_stmt_1093_update_completed_ 0)
          phi_stmt_1093_sample_start_ o<-& (phi_stmt_1093_sample_completed_ 1)
          $T[phi_stmt_1093_merged_reqs] 
          $T[phi_stmt_1093_phi_mux_ack] 
          $T[phi_stmt_1093_phi_mux_ack_ps] 
          phi_stmt_1093_phi_mux_ack_ps <-& (phi_stmt_1093_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1093_update_completed_)
          $T[R_ZERO_33_1095_sample_start__ps] 
          $T[R_ZERO_33_1095_sample_completed__ps] 
          $T[R_ZERO_33_1095_update_start__ps] 
          $T[R_ZERO_33_1095_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1095_sample_start_] 
          $T[R_ZERO_33_1095_sample_completed_] 
          R_ZERO_33_1095_sample_completed_ <-& (R_ZERO_33_1095_sample_start_)
          $T[R_ZERO_33_1095_update_start_] 
          $T [R_ZERO_33_1095_update_completed_] $delay 
          R_ZERO_33_1095_update_completed_ <-& (R_ZERO_33_1095_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1095_sample_start_ <-& (R_ZERO_33_1095_sample_start__ps)
          R_ZERO_33_1095_update_start_ <-& (R_ZERO_33_1095_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1095_sample_completed__ps <-& (R_ZERO_33_1095_sample_completed_)
          R_ZERO_33_1095_update_completed__ps <-& (R_ZERO_33_1095_update_completed_)
          $T[RPIPE_noblock_obuf_1_3_1097_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1097_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_3_1097_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1097_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_3
          $T[RPIPE_noblock_obuf_1_3_1097_sample_start_] 
          $T[RPIPE_noblock_obuf_1_3_1097_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_3_1097_update_start_] 
          $T[RPIPE_noblock_obuf_1_3_1097_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_3_1097 with guard R_read_from_1_1096
          // root phi_stmt_1093 not in visited_elements
          // root phi_stmt_1098 not in visited_elements
          // root phi_stmt_1103 not in visited_elements
          // root phi_stmt_1108 not in visited_elements
          // root phi_stmt_1113 not in visited_elements
          // root phi_stmt_1117 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_3_1097_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_3_1097_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_3_1097_sample_start_ &-> (RPIPE_noblock_obuf_1_3_1097_Sample)
          RPIPE_noblock_obuf_1_3_1097_sample_completed_ <-& (RPIPE_noblock_obuf_1_3_1097_Sample)
          RPIPE_noblock_obuf_1_3_1097_update_start_ <-& (RPIPE_noblock_obuf_1_3_1097_sample_completed_)
          RPIPE_noblock_obuf_1_3_1097_update_start_ &-> (RPIPE_noblock_obuf_1_3_1097_Update)
          RPIPE_noblock_obuf_1_3_1097_update_completed_ <-& (RPIPE_noblock_obuf_1_3_1097_Update)
          RPIPE_noblock_obuf_1_3_1097_sample_start_ o<-& (RPIPE_noblock_obuf_1_3_1097_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_3_1097_sample_start_ <-& (RPIPE_noblock_obuf_1_3_1097_sample_start__ps)
          RPIPE_noblock_obuf_1_3_1097_update_start_ <-& (RPIPE_noblock_obuf_1_3_1097_update_start__ps)
          // RAW reenables for noblock_obuf_1_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_3_1097_sample_completed__ps <-& (RPIPE_noblock_obuf_1_3_1097_sample_completed_)
          RPIPE_noblock_obuf_1_3_1097_update_completed__ps <-& (RPIPE_noblock_obuf_1_3_1097_update_completed_)
          $phisequencer [ phi_stmt_1093_phi_seq] : 
          phi_stmt_1093_entry_trigger R_ZERO_33_1095_sample_start__ps R_ZERO_33_1095_sample_completed__ps R_ZERO_33_1095_update_start__ps R_ZERO_33_1095_update_completed__ps phi_stmt_1093_loopback_trigger RPIPE_noblock_obuf_1_3_1097_sample_start__ps RPIPE_noblock_obuf_1_3_1097_sample_completed__ps RPIPE_noblock_obuf_1_3_1097_update_start__ps RPIPE_noblock_obuf_1_3_1097_update_completed__ps :
          phi_stmt_1093_sample_start__ps phi_stmt_1093_sample_completed__ps phi_stmt_1093_update_start__ps phi_stmt_1093_update_completed__ps :
          phi_stmt_1093_entry_sample_req_ps phi_stmt_1093_loopback_sample_req_ps : 
          phi_stmt_1093_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1093
          // start:  PHI statement phi_stmt_1098
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1098_sample_start_] 
          $T[phi_stmt_1098_sample_completed_] 
          $T[phi_stmt_1098_update_start_] 
          $T[phi_stmt_1098_update_completed_] 
          $T[phi_stmt_1098_sample_start__ps] 
          phi_stmt_1098_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1098_sample_completed__ps] 
          phi_stmt_1098_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1098_update_start__ps] 
          phi_stmt_1098_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1098_update_completed__ps] 
          phi_stmt_1098_update_completed_ <-& (phi_stmt_1098_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1098_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1098_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1098_update_start_)
          $T[phi_stmt_1098_loopback_trigger] 
          phi_stmt_1098_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1098_loopback_sample_req] 
          $T[phi_stmt_1098_loopback_sample_req_ps] 
          phi_stmt_1098_loopback_sample_req <-& (phi_stmt_1098_loopback_sample_req_ps)
          phi_stmt_1098_loopback_sample_req &-> ($null)
          $T[phi_stmt_1098_entry_trigger] 
          phi_stmt_1098_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1098_entry_sample_req] 
          $T[phi_stmt_1098_entry_sample_req_ps] 
          phi_stmt_1098_entry_sample_req <-& (phi_stmt_1098_entry_sample_req_ps)
          phi_stmt_1098_entry_sample_req &-> ($null)
          phi_stmt_1098_update_start_ o<-& (phi_stmt_1098_update_completed_ 0)
          phi_stmt_1098_sample_start_ o<-& (phi_stmt_1098_sample_completed_ 1)
          $T[phi_stmt_1098_merged_reqs] 
          $T[phi_stmt_1098_phi_mux_ack] 
          $T[phi_stmt_1098_phi_mux_ack_ps] 
          phi_stmt_1098_phi_mux_ack_ps <-& (phi_stmt_1098_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1098_update_completed_)
          $T[R_ZERO_33_1100_sample_start__ps] 
          $T[R_ZERO_33_1100_sample_completed__ps] 
          $T[R_ZERO_33_1100_update_start__ps] 
          $T[R_ZERO_33_1100_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1100_sample_start_] 
          $T[R_ZERO_33_1100_sample_completed_] 
          R_ZERO_33_1100_sample_completed_ <-& (R_ZERO_33_1100_sample_start_)
          $T[R_ZERO_33_1100_update_start_] 
          $T [R_ZERO_33_1100_update_completed_] $delay 
          R_ZERO_33_1100_update_completed_ <-& (R_ZERO_33_1100_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1100_sample_start_ <-& (R_ZERO_33_1100_sample_start__ps)
          R_ZERO_33_1100_update_start_ <-& (R_ZERO_33_1100_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1100_sample_completed__ps <-& (R_ZERO_33_1100_sample_completed_)
          R_ZERO_33_1100_update_completed__ps <-& (R_ZERO_33_1100_update_completed_)
          $T[RPIPE_noblock_obuf_2_3_1102_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1102_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_3_1102_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1102_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_3
          $T[RPIPE_noblock_obuf_2_3_1102_sample_start_] 
          $T[RPIPE_noblock_obuf_2_3_1102_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_3_1102_update_start_] 
          $T[RPIPE_noblock_obuf_2_3_1102_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_3_1102 with guard R_read_from_2_1101
          // root phi_stmt_1098 not in visited_elements
          // root phi_stmt_1103 not in visited_elements
          // root phi_stmt_1108 not in visited_elements
          // root phi_stmt_1113 not in visited_elements
          // root phi_stmt_1117 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_3_1102_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_3_1102_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_3_1102_sample_start_ &-> (RPIPE_noblock_obuf_2_3_1102_Sample)
          RPIPE_noblock_obuf_2_3_1102_sample_completed_ <-& (RPIPE_noblock_obuf_2_3_1102_Sample)
          RPIPE_noblock_obuf_2_3_1102_update_start_ <-& (RPIPE_noblock_obuf_2_3_1102_sample_completed_)
          RPIPE_noblock_obuf_2_3_1102_update_start_ &-> (RPIPE_noblock_obuf_2_3_1102_Update)
          RPIPE_noblock_obuf_2_3_1102_update_completed_ <-& (RPIPE_noblock_obuf_2_3_1102_Update)
          RPIPE_noblock_obuf_2_3_1102_sample_start_ o<-& (RPIPE_noblock_obuf_2_3_1102_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_3_1102_sample_start_ <-& (RPIPE_noblock_obuf_2_3_1102_sample_start__ps)
          RPIPE_noblock_obuf_2_3_1102_update_start_ <-& (RPIPE_noblock_obuf_2_3_1102_update_start__ps)
          // RAW reenables for noblock_obuf_2_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_3_1102_sample_completed__ps <-& (RPIPE_noblock_obuf_2_3_1102_sample_completed_)
          RPIPE_noblock_obuf_2_3_1102_update_completed__ps <-& (RPIPE_noblock_obuf_2_3_1102_update_completed_)
          $phisequencer [ phi_stmt_1098_phi_seq] : 
          phi_stmt_1098_entry_trigger R_ZERO_33_1100_sample_start__ps R_ZERO_33_1100_sample_completed__ps R_ZERO_33_1100_update_start__ps R_ZERO_33_1100_update_completed__ps phi_stmt_1098_loopback_trigger RPIPE_noblock_obuf_2_3_1102_sample_start__ps RPIPE_noblock_obuf_2_3_1102_sample_completed__ps RPIPE_noblock_obuf_2_3_1102_update_start__ps RPIPE_noblock_obuf_2_3_1102_update_completed__ps :
          phi_stmt_1098_sample_start__ps phi_stmt_1098_sample_completed__ps phi_stmt_1098_update_start__ps phi_stmt_1098_update_completed__ps :
          phi_stmt_1098_entry_sample_req_ps phi_stmt_1098_loopback_sample_req_ps : 
          phi_stmt_1098_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1098
          // start:  PHI statement phi_stmt_1103
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1103_sample_start_] 
          $T[phi_stmt_1103_sample_completed_] 
          $T[phi_stmt_1103_update_start_] 
          $T[phi_stmt_1103_update_completed_] 
          $T[phi_stmt_1103_sample_start__ps] 
          phi_stmt_1103_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1103_sample_completed__ps] 
          phi_stmt_1103_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1103_update_start__ps] 
          phi_stmt_1103_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1103_update_completed__ps] 
          phi_stmt_1103_update_completed_ <-& (phi_stmt_1103_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1103_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1103_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1103_update_start_)
          $T[phi_stmt_1103_loopback_trigger] 
          phi_stmt_1103_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1103_loopback_sample_req] 
          $T[phi_stmt_1103_loopback_sample_req_ps] 
          phi_stmt_1103_loopback_sample_req <-& (phi_stmt_1103_loopback_sample_req_ps)
          phi_stmt_1103_loopback_sample_req &-> ($null)
          $T[phi_stmt_1103_entry_trigger] 
          phi_stmt_1103_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1103_entry_sample_req] 
          $T[phi_stmt_1103_entry_sample_req_ps] 
          phi_stmt_1103_entry_sample_req <-& (phi_stmt_1103_entry_sample_req_ps)
          phi_stmt_1103_entry_sample_req &-> ($null)
          phi_stmt_1103_update_start_ o<-& (phi_stmt_1103_update_completed_ 0)
          phi_stmt_1103_sample_start_ o<-& (phi_stmt_1103_sample_completed_ 1)
          $T[phi_stmt_1103_merged_reqs] 
          $T[phi_stmt_1103_phi_mux_ack] 
          $T[phi_stmt_1103_phi_mux_ack_ps] 
          phi_stmt_1103_phi_mux_ack_ps <-& (phi_stmt_1103_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1103_update_completed_)
          $T[R_ZERO_33_1105_sample_start__ps] 
          $T[R_ZERO_33_1105_sample_completed__ps] 
          $T[R_ZERO_33_1105_update_start__ps] 
          $T[R_ZERO_33_1105_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1105_sample_start_] 
          $T[R_ZERO_33_1105_sample_completed_] 
          R_ZERO_33_1105_sample_completed_ <-& (R_ZERO_33_1105_sample_start_)
          $T[R_ZERO_33_1105_update_start_] 
          $T [R_ZERO_33_1105_update_completed_] $delay 
          R_ZERO_33_1105_update_completed_ <-& (R_ZERO_33_1105_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1105_sample_start_ <-& (R_ZERO_33_1105_sample_start__ps)
          R_ZERO_33_1105_update_start_ <-& (R_ZERO_33_1105_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1105_sample_completed__ps <-& (R_ZERO_33_1105_sample_completed_)
          R_ZERO_33_1105_update_completed__ps <-& (R_ZERO_33_1105_update_completed_)
          $T[RPIPE_noblock_obuf_3_3_1107_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1107_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_3_1107_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1107_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_3
          $T[RPIPE_noblock_obuf_3_3_1107_sample_start_] 
          $T[RPIPE_noblock_obuf_3_3_1107_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_3_1107_update_start_] 
          $T[RPIPE_noblock_obuf_3_3_1107_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_3_1107 with guard R_read_from_3_1106
          // root phi_stmt_1103 not in visited_elements
          // root phi_stmt_1108 not in visited_elements
          // root phi_stmt_1113 not in visited_elements
          // root phi_stmt_1117 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_3_1107_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_3_1107_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_3_1107_sample_start_ &-> (RPIPE_noblock_obuf_3_3_1107_Sample)
          RPIPE_noblock_obuf_3_3_1107_sample_completed_ <-& (RPIPE_noblock_obuf_3_3_1107_Sample)
          RPIPE_noblock_obuf_3_3_1107_update_start_ <-& (RPIPE_noblock_obuf_3_3_1107_sample_completed_)
          RPIPE_noblock_obuf_3_3_1107_update_start_ &-> (RPIPE_noblock_obuf_3_3_1107_Update)
          RPIPE_noblock_obuf_3_3_1107_update_completed_ <-& (RPIPE_noblock_obuf_3_3_1107_Update)
          RPIPE_noblock_obuf_3_3_1107_sample_start_ o<-& (RPIPE_noblock_obuf_3_3_1107_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_3_1107_sample_start_ <-& (RPIPE_noblock_obuf_3_3_1107_sample_start__ps)
          RPIPE_noblock_obuf_3_3_1107_update_start_ <-& (RPIPE_noblock_obuf_3_3_1107_update_start__ps)
          // RAW reenables for noblock_obuf_3_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_3_1107_sample_completed__ps <-& (RPIPE_noblock_obuf_3_3_1107_sample_completed_)
          RPIPE_noblock_obuf_3_3_1107_update_completed__ps <-& (RPIPE_noblock_obuf_3_3_1107_update_completed_)
          $phisequencer [ phi_stmt_1103_phi_seq] : 
          phi_stmt_1103_entry_trigger R_ZERO_33_1105_sample_start__ps R_ZERO_33_1105_sample_completed__ps R_ZERO_33_1105_update_start__ps R_ZERO_33_1105_update_completed__ps phi_stmt_1103_loopback_trigger RPIPE_noblock_obuf_3_3_1107_sample_start__ps RPIPE_noblock_obuf_3_3_1107_sample_completed__ps RPIPE_noblock_obuf_3_3_1107_update_start__ps RPIPE_noblock_obuf_3_3_1107_update_completed__ps :
          phi_stmt_1103_sample_start__ps phi_stmt_1103_sample_completed__ps phi_stmt_1103_update_start__ps phi_stmt_1103_update_completed__ps :
          phi_stmt_1103_entry_sample_req_ps phi_stmt_1103_loopback_sample_req_ps : 
          phi_stmt_1103_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1103
          // start:  PHI statement phi_stmt_1108
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1108_sample_start_] 
          $T[phi_stmt_1108_sample_completed_] 
          $T[phi_stmt_1108_update_start_] 
          $T[phi_stmt_1108_update_completed_] 
          $T[phi_stmt_1108_sample_start__ps] 
          phi_stmt_1108_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1108_sample_completed__ps] 
          phi_stmt_1108_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1108_update_start__ps] 
          phi_stmt_1108_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1108_update_completed__ps] 
          phi_stmt_1108_update_completed_ <-& (phi_stmt_1108_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1108_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1108_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1108_update_start_)
          $T[phi_stmt_1108_loopback_trigger] 
          phi_stmt_1108_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1108_loopback_sample_req] 
          $T[phi_stmt_1108_loopback_sample_req_ps] 
          phi_stmt_1108_loopback_sample_req <-& (phi_stmt_1108_loopback_sample_req_ps)
          phi_stmt_1108_loopback_sample_req &-> ($null)
          $T[phi_stmt_1108_entry_trigger] 
          phi_stmt_1108_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1108_entry_sample_req] 
          $T[phi_stmt_1108_entry_sample_req_ps] 
          phi_stmt_1108_entry_sample_req <-& (phi_stmt_1108_entry_sample_req_ps)
          phi_stmt_1108_entry_sample_req &-> ($null)
          phi_stmt_1108_update_start_ o<-& (phi_stmt_1108_update_completed_ 0)
          phi_stmt_1108_sample_start_ o<-& (phi_stmt_1108_sample_completed_ 1)
          $T[phi_stmt_1108_merged_reqs] 
          $T[phi_stmt_1108_phi_mux_ack] 
          $T[phi_stmt_1108_phi_mux_ack_ps] 
          phi_stmt_1108_phi_mux_ack_ps <-& (phi_stmt_1108_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1108_update_completed_)
          $T[R_ZERO_33_1110_sample_start__ps] 
          $T[R_ZERO_33_1110_sample_completed__ps] 
          $T[R_ZERO_33_1110_update_start__ps] 
          $T[R_ZERO_33_1110_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1110_sample_start_] 
          $T[R_ZERO_33_1110_sample_completed_] 
          R_ZERO_33_1110_sample_completed_ <-& (R_ZERO_33_1110_sample_start_)
          $T[R_ZERO_33_1110_update_start_] 
          $T [R_ZERO_33_1110_update_completed_] $delay 
          R_ZERO_33_1110_update_completed_ <-& (R_ZERO_33_1110_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1110_sample_start_ <-& (R_ZERO_33_1110_sample_start__ps)
          R_ZERO_33_1110_update_start_ <-& (R_ZERO_33_1110_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1110_sample_completed__ps <-& (R_ZERO_33_1110_sample_completed_)
          R_ZERO_33_1110_update_completed__ps <-& (R_ZERO_33_1110_update_completed_)
          $T[RPIPE_noblock_obuf_4_3_1112_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1112_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_3_1112_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1112_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_3
          $T[RPIPE_noblock_obuf_4_3_1112_sample_start_] 
          $T[RPIPE_noblock_obuf_4_3_1112_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_3_1112_update_start_] 
          $T[RPIPE_noblock_obuf_4_3_1112_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_3_1112 with guard R_read_from_4_1111
          // root phi_stmt_1108 not in visited_elements
          // root phi_stmt_1113 not in visited_elements
          // root phi_stmt_1117 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_3_1112_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_3_1112_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_3_1112_sample_start_ &-> (RPIPE_noblock_obuf_4_3_1112_Sample)
          RPIPE_noblock_obuf_4_3_1112_sample_completed_ <-& (RPIPE_noblock_obuf_4_3_1112_Sample)
          RPIPE_noblock_obuf_4_3_1112_update_start_ <-& (RPIPE_noblock_obuf_4_3_1112_sample_completed_)
          RPIPE_noblock_obuf_4_3_1112_update_start_ &-> (RPIPE_noblock_obuf_4_3_1112_Update)
          RPIPE_noblock_obuf_4_3_1112_update_completed_ <-& (RPIPE_noblock_obuf_4_3_1112_Update)
          RPIPE_noblock_obuf_4_3_1112_sample_start_ o<-& (RPIPE_noblock_obuf_4_3_1112_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_3_1112_sample_start_ <-& (RPIPE_noblock_obuf_4_3_1112_sample_start__ps)
          RPIPE_noblock_obuf_4_3_1112_update_start_ <-& (RPIPE_noblock_obuf_4_3_1112_update_start__ps)
          // RAW reenables for noblock_obuf_4_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_3_1112_sample_completed__ps <-& (RPIPE_noblock_obuf_4_3_1112_sample_completed_)
          RPIPE_noblock_obuf_4_3_1112_update_completed__ps <-& (RPIPE_noblock_obuf_4_3_1112_update_completed_)
          $phisequencer [ phi_stmt_1108_phi_seq] : 
          phi_stmt_1108_entry_trigger R_ZERO_33_1110_sample_start__ps R_ZERO_33_1110_sample_completed__ps R_ZERO_33_1110_update_start__ps R_ZERO_33_1110_update_completed__ps phi_stmt_1108_loopback_trigger RPIPE_noblock_obuf_4_3_1112_sample_start__ps RPIPE_noblock_obuf_4_3_1112_sample_completed__ps RPIPE_noblock_obuf_4_3_1112_update_start__ps RPIPE_noblock_obuf_4_3_1112_update_completed__ps :
          phi_stmt_1108_sample_start__ps phi_stmt_1108_sample_completed__ps phi_stmt_1108_update_start__ps phi_stmt_1108_update_completed__ps :
          phi_stmt_1108_entry_sample_req_ps phi_stmt_1108_loopback_sample_req_ps : 
          phi_stmt_1108_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1108
          // start:  PHI statement phi_stmt_1113
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1113_sample_start_] 
          $T[phi_stmt_1113_sample_completed_] 
          $T[phi_stmt_1113_update_start_] 
          $T[phi_stmt_1113_update_completed_] 
          $T[phi_stmt_1113_sample_start__ps] 
          phi_stmt_1113_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1113_sample_completed__ps] 
          phi_stmt_1113_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1113_update_start__ps] 
          phi_stmt_1113_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1113_update_completed__ps] 
          phi_stmt_1113_update_completed_ <-& (phi_stmt_1113_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1113_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1113_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1113_update_start_)
          $T[phi_stmt_1113_loopback_trigger] 
          phi_stmt_1113_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1113_loopback_sample_req] 
          $T[phi_stmt_1113_loopback_sample_req_ps] 
          phi_stmt_1113_loopback_sample_req <-& (phi_stmt_1113_loopback_sample_req_ps)
          phi_stmt_1113_loopback_sample_req &-> ($null)
          $T[phi_stmt_1113_entry_trigger] 
          phi_stmt_1113_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1113_entry_sample_req] 
          $T[phi_stmt_1113_entry_sample_req_ps] 
          phi_stmt_1113_entry_sample_req <-& (phi_stmt_1113_entry_sample_req_ps)
          phi_stmt_1113_entry_sample_req &-> ($null)
          phi_stmt_1113_update_start_ o<-& (phi_stmt_1113_update_completed_ 0)
          phi_stmt_1113_sample_start_ o<-& (phi_stmt_1113_sample_completed_ 1)
          $T[phi_stmt_1113_merged_reqs] 
          $T[phi_stmt_1113_phi_mux_ack] 
          $T[phi_stmt_1113_phi_mux_ack_ps] 
          phi_stmt_1113_phi_mux_ack_ps <-& (phi_stmt_1113_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1113_update_completed_)
          $T[R_ZERO_3_1115_sample_start__ps] 
          $T[R_ZERO_3_1115_sample_completed__ps] 
          $T[R_ZERO_3_1115_update_start__ps] 
          $T[R_ZERO_3_1115_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1115_sample_start_] 
          $T[R_ZERO_3_1115_sample_completed_] 
          R_ZERO_3_1115_sample_completed_ <-& (R_ZERO_3_1115_sample_start_)
          $T[R_ZERO_3_1115_update_start_] 
          $T [R_ZERO_3_1115_update_completed_] $delay 
          R_ZERO_3_1115_update_completed_ <-& (R_ZERO_3_1115_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1115_sample_start_ <-& (R_ZERO_3_1115_sample_start__ps)
          R_ZERO_3_1115_update_start_ <-& (R_ZERO_3_1115_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1115_sample_completed__ps <-& (R_ZERO_3_1115_sample_completed_)
          R_ZERO_3_1115_update_completed__ps <-& (R_ZERO_3_1115_update_completed_)
          $T[R_next_active_packet_1116_sample_start__ps] 
          $T[R_next_active_packet_1116_sample_completed__ps] 
          $T[R_next_active_packet_1116_update_start__ps] 
          $T[R_next_active_packet_1116_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1116_sample_start_] 
          $T[R_next_active_packet_1116_sample_completed_] 
          $T[R_next_active_packet_1116_update_start_] 
          $T[R_next_active_packet_1116_update_completed_] 
          ;;[R_next_active_packet_1116_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1116_sample_start_ &-> (R_next_active_packet_1116_Sample)
          R_next_active_packet_1116_sample_completed_ <-& (R_next_active_packet_1116_Sample)
          ;;[R_next_active_packet_1116_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1116_update_start_ &-> (R_next_active_packet_1116_Update)
          R_next_active_packet_1116_update_completed_ <-& (R_next_active_packet_1116_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1116_sample_start_ <-& (R_next_active_packet_1116_sample_start__ps)
          R_next_active_packet_1116_update_start_ <-& (R_next_active_packet_1116_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1116_sample_completed__ps <-& (R_next_active_packet_1116_sample_completed_)
          R_next_active_packet_1116_update_completed__ps <-& (R_next_active_packet_1116_update_completed_)
          $phisequencer [ phi_stmt_1113_phi_seq] : 
          phi_stmt_1113_entry_trigger R_ZERO_3_1115_sample_start__ps R_ZERO_3_1115_sample_completed__ps R_ZERO_3_1115_update_start__ps R_ZERO_3_1115_update_completed__ps phi_stmt_1113_loopback_trigger R_next_active_packet_1116_sample_start__ps R_next_active_packet_1116_sample_completed__ps R_next_active_packet_1116_update_start__ps R_next_active_packet_1116_update_completed__ps :
          phi_stmt_1113_sample_start__ps phi_stmt_1113_sample_completed__ps phi_stmt_1113_update_start__ps phi_stmt_1113_update_completed__ps :
          phi_stmt_1113_entry_sample_req_ps phi_stmt_1113_loopback_sample_req_ps : 
          phi_stmt_1113_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1113
          // start:  PHI statement phi_stmt_1117
          // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1117_sample_start_] 
          $T[phi_stmt_1117_sample_completed_] 
          $T[phi_stmt_1117_update_start_] 
          $T[phi_stmt_1117_update_completed_] 
          $T[phi_stmt_1117_sample_start__ps] 
          phi_stmt_1117_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1117_sample_completed__ps] 
          phi_stmt_1117_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1117_update_start__ps] 
          phi_stmt_1117_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1117_update_completed__ps] 
          phi_stmt_1117_update_completed_ <-& (phi_stmt_1117_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1117_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1117_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1117_update_start_)
          $T[phi_stmt_1117_loopback_trigger] 
          phi_stmt_1117_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1117_loopback_sample_req] 
          $T[phi_stmt_1117_loopback_sample_req_ps] 
          phi_stmt_1117_loopback_sample_req <-& (phi_stmt_1117_loopback_sample_req_ps)
          phi_stmt_1117_loopback_sample_req &-> ($null)
          $T[phi_stmt_1117_entry_trigger] 
          phi_stmt_1117_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1117_entry_sample_req] 
          $T[phi_stmt_1117_entry_sample_req_ps] 
          phi_stmt_1117_entry_sample_req <-& (phi_stmt_1117_entry_sample_req_ps)
          phi_stmt_1117_entry_sample_req &-> ($null)
          phi_stmt_1117_update_start_ o<-& (phi_stmt_1117_update_completed_ 0)
          phi_stmt_1117_sample_start_ o<-& (phi_stmt_1117_sample_completed_ 1)
          $T[phi_stmt_1117_merged_reqs] 
          $T[phi_stmt_1117_phi_mux_ack] 
          $T[phi_stmt_1117_phi_mux_ack_ps] 
          phi_stmt_1117_phi_mux_ack_ps <-& (phi_stmt_1117_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1117_update_completed_)
          $T[R_ONE_3_1119_sample_start__ps] 
          $T[R_ONE_3_1119_sample_completed__ps] 
          $T[R_ONE_3_1119_update_start__ps] 
          $T[R_ONE_3_1119_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ONE_3_1119_sample_start_] 
          $T[R_ONE_3_1119_sample_completed_] 
          R_ONE_3_1119_sample_completed_ <-& (R_ONE_3_1119_sample_start_)
          $T[R_ONE_3_1119_update_start_] 
          $T [R_ONE_3_1119_update_completed_] $delay 
          R_ONE_3_1119_update_completed_ <-& (R_ONE_3_1119_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ONE_3_1119_sample_start_ <-& (R_ONE_3_1119_sample_start__ps)
          R_ONE_3_1119_update_start_ <-& (R_ONE_3_1119_update_start__ps)
          // Phi complete dependency.
          R_ONE_3_1119_sample_completed__ps <-& (R_ONE_3_1119_sample_completed_)
          R_ONE_3_1119_update_completed__ps <-& (R_ONE_3_1119_update_completed_)
          $T[R_next_pkt_priority_1120_sample_start__ps] 
          $T[R_next_pkt_priority_1120_sample_completed__ps] 
          $T[R_next_pkt_priority_1120_update_start__ps] 
          $T[R_next_pkt_priority_1120_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_1120_sample_start_] 
          $T[R_next_pkt_priority_1120_sample_completed_] 
          $T[R_next_pkt_priority_1120_update_start_] 
          $T[R_next_pkt_priority_1120_update_completed_] 
          ;;[R_next_pkt_priority_1120_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_1120_sample_start_ &-> (R_next_pkt_priority_1120_Sample)
          R_next_pkt_priority_1120_sample_completed_ <-& (R_next_pkt_priority_1120_Sample)
          ;;[R_next_pkt_priority_1120_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_1120_update_start_ &-> (R_next_pkt_priority_1120_Update)
          R_next_pkt_priority_1120_update_completed_ <-& (R_next_pkt_priority_1120_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_1120_sample_start_ <-& (R_next_pkt_priority_1120_sample_start__ps)
          R_next_pkt_priority_1120_update_start_ <-& (R_next_pkt_priority_1120_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_1120_sample_completed__ps <-& (R_next_pkt_priority_1120_sample_completed_)
          R_next_pkt_priority_1120_update_completed__ps <-& (R_next_pkt_priority_1120_update_completed_)
          $phisequencer [ phi_stmt_1117_phi_seq] : 
          phi_stmt_1117_entry_trigger R_ONE_3_1119_sample_start__ps R_ONE_3_1119_sample_completed__ps R_ONE_3_1119_update_start__ps R_ONE_3_1119_update_completed__ps phi_stmt_1117_loopback_trigger R_next_pkt_priority_1120_sample_start__ps R_next_pkt_priority_1120_sample_completed__ps R_next_pkt_priority_1120_update_start__ps R_next_pkt_priority_1120_update_completed__ps :
          phi_stmt_1117_sample_start__ps phi_stmt_1117_sample_completed__ps phi_stmt_1117_update_start__ps phi_stmt_1117_update_completed__ps :
          phi_stmt_1117_entry_sample_req_ps phi_stmt_1117_loopback_sample_req_ps : 
          phi_stmt_1117_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1117
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 326
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 327
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 328
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 329
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 330
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 331
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 332
          // volatile! 
          // Source expression
          // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
          // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
          // (p1_valid | p2_valid)
          // p1_valid
          // p2_valid
          // (p3_valid | p4_valid)
          // p3_valid
          // p4_valid
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 333
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 334
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 335
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 336
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 337
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 338
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 339
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 340
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_3
          $T[WPIPE_out_data_3_1300_sample_start_] 
          $T[WPIPE_out_data_3_1300_sample_completed_] 
          $T[WPIPE_out_data_3_1300_update_start_] 
          $T[WPIPE_out_data_3_1300_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_3_1300 with guard R_send_flag_1299
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1089_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1093_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1098_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1103_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1108_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1113_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1117_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1089_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1093_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1098_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1103_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1108_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1113_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1117_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          ;;[WPIPE_out_data_3_1300_Sample] 
          {
            // pipe write sample-start out_data_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_3_1300_Update] 
          {
            // pipe write update (complete) out_data_3
            $T [req] $T [ack] 
          }
          WPIPE_out_data_3_1300_sample_start_ &-> (WPIPE_out_data_3_1300_Sample)
          WPIPE_out_data_3_1300_sample_completed_ <-& (WPIPE_out_data_3_1300_Sample)
          WPIPE_out_data_3_1300_update_start_ <-& (WPIPE_out_data_3_1300_sample_completed_)
          WPIPE_out_data_3_1300_update_start_ &-> (WPIPE_out_data_3_1300_Update)
          WPIPE_out_data_3_1300_update_completed_ <-& (WPIPE_out_data_3_1300_Update)
          WPIPE_out_data_3_1300_sample_start_ o<-& (WPIPE_out_data_3_1300_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1300_sample_start_
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1089_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1093_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1098_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1103_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1108_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1113_update_completed_)
          WPIPE_out_data_3_1300_sample_start_ <-& (phi_stmt_1117_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1300_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1089_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1093_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1098_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1103_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1108_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1113_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          phi_stmt_1117_update_start_ o<-& (WPIPE_out_data_3_1300_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
          // pipe read/write dependencies for pipe out_data_3
          // read-dependencies for pipe out_data_3
          // write-dependencies for pipe out_data_3
          // signal write dependencies for out_data_3
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1087__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1087_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1087__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1087_loop_body : condition_evaluated
        $bind do_while_stmt_1087__entry__  => do_while_stmt_1087_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1087_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1087__exit__)
      }
      do_while_stmt_1087__entry__ |-> (do_while_stmt_1087)
      do_while_stmt_1087__exit__ <-| (do_while_stmt_1087)
      do_while_stmt_1087__entry__ <-| (branch_block_stmt_1086__entry__)
      do_while_stmt_1087__exit__ |-> (branch_block_stmt_1086__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 310
    // constant-object-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 306
    // constant-object-declarations for block %outputPort_3_Daemon
    //  file .Aa/switch2x2.opt.aa, line 301
    // constant-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 306
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 308
    // 1 
    $constant $W[konst_1304_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 310
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 311
    // ZERO_8
    $constant $W[R_ZERO_8_1091_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 313
    // ZERO_33
    $constant $W[R_ZERO_33_1095_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // ZERO_33
    $constant $W[R_ZERO_33_1100_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // ZERO_33
    $constant $W[R_ZERO_33_1105_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // ZERO_33
    $constant $W[R_ZERO_33_1110_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 321
    // ZERO_3
    $constant $W[R_ZERO_3_1115_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    // ONE_3
    $constant $W[R_ONE_3_1119_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_1124_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1129_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1134_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1139_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1144_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1147_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1150_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1153_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1157_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1160_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1163_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1166_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 331
    // 0 
    $constant $W[konst_1190_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_1196_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1199_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1209_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1217_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1225_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1233_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1239_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1243_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1246_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1250_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1254_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1258_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1261_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1265_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1272_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1275_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1278_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1281_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1285_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1288_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1291_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1294_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 306
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 308
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 310
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 311
    $W[next_down_counter_1204_1092_buffered] : $int<8>
    // down_counter
    $W[down_counter_1089] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 313
    // noblock_obuf_1_3
    $W[RPIPE_noblock_obuf_1_3_1097_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1093] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // noblock_obuf_2_3
    $W[RPIPE_noblock_obuf_2_3_1102_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1098] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // noblock_obuf_3_3
    $W[RPIPE_noblock_obuf_3_3_1107_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1103] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // noblock_obuf_4_3
    $W[RPIPE_noblock_obuf_4_3_1112_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1108] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 321
    $W[next_active_packet_1180_1116_buffered] : $int<3>
    // active_packet
    $W[active_packet_1113] : $int<3>
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    $W[next_pkt_priority_1180_1120_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_1117] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 326
    // p1_valid
    $W[p1_valid_1126] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 327
    // p2_valid
    $W[p2_valid_1131] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 328
    // p3_valid
    $W[p3_valid_1136] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 329
    // p4_valid
    $W[p4_valid_1141] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 330
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1145_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1148_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1151_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1154_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1155_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1158_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1161_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1164_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1167_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1168_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1170] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 331
    // next_active_packet
    $W[next_active_packet_1180] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_1180] : $int<3>
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 332
    // (p1_valid | p2_valid)
    $intermediate $W[OR_u1_u1_1184_wire] : $int<1>
    // (p3_valid | p4_valid)
    $intermediate $W[OR_u1_u1_1187_wire] : $int<1>
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    $intermediate $W[OR_u1_u1_1188_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1191_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1193] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 333
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1200_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1202_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1204] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 334
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1207_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1210_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1212] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 335
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1215_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1218_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1220] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 336
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1223_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1226_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1228] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 337
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1231_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1234_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1236] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 338
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1240_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1242_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1244_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1247_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1249_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1251_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1252_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1255_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1257_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1259_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1262_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1264_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1266_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1267_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1269] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 339
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1273_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1276_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1279_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1282_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1283_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1286_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1289_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1292_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1295_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1296_wire] : $int<1>
    // send_flag
    $W[send_flag_1298] : $int<1>
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 340
    // out_data_3
    // datapath-instances for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 306
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 308
    ==0? [do_while_stmt_1087_branch] (konst_1304_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 310
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 311
    # := [next_down_counter_1204_1092_buf] (next_down_counter_1204) (next_down_counter_1204_1092_buffered)     $fullrate
    $buffering $out next_down_counter_1204_1092_buf next_down_counter_1204_1092_buffered  1
    # $phi [phi_stmt_1089] (R_ZERO_8_1091_wire_constant next_down_counter_1204_1092_buffered) ( down_counter_1089 ) $fullrate
    // $buffering  $out phi_stmt_1089 down_counter_1089 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 313
    // noblock_obuf_1_3
    $ioport $in [RPIPE_noblock_obuf_1_3_1097_inst] (noblock_obuf_1_3) (RPIPE_noblock_obuf_1_3_1097_wire) $guard ( read_from_1_1212 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_3_1097_inst RPIPE_noblock_obuf_1_3_1097_wire 1
    # $phi [phi_stmt_1093] (R_ZERO_33_1095_wire_constant RPIPE_noblock_obuf_1_3_1097_wire) ( pkt_1_e_word_1093 ) $fullrate
    // $buffering  $out phi_stmt_1093 pkt_1_e_word_1093 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 315
    // noblock_obuf_2_3
    $ioport $in [RPIPE_noblock_obuf_2_3_1102_inst] (noblock_obuf_2_3) (RPIPE_noblock_obuf_2_3_1102_wire) $guard ( read_from_2_1220 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_3_1102_inst RPIPE_noblock_obuf_2_3_1102_wire 1
    # $phi [phi_stmt_1098] (R_ZERO_33_1100_wire_constant RPIPE_noblock_obuf_2_3_1102_wire) ( pkt_2_e_word_1098 ) $fullrate
    // $buffering  $out phi_stmt_1098 pkt_2_e_word_1098 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 317
    // noblock_obuf_3_3
    $ioport $in [RPIPE_noblock_obuf_3_3_1107_inst] (noblock_obuf_3_3) (RPIPE_noblock_obuf_3_3_1107_wire) $guard ( read_from_3_1228 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_3_1107_inst RPIPE_noblock_obuf_3_3_1107_wire 1
    # $phi [phi_stmt_1103] (R_ZERO_33_1105_wire_constant RPIPE_noblock_obuf_3_3_1107_wire) ( pkt_3_e_word_1103 ) $fullrate
    // $buffering  $out phi_stmt_1103 pkt_3_e_word_1103 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 319
    // noblock_obuf_4_3
    $ioport $in [RPIPE_noblock_obuf_4_3_1112_inst] (noblock_obuf_4_3) (RPIPE_noblock_obuf_4_3_1112_wire) $guard ( read_from_4_1236 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_3_1112_inst RPIPE_noblock_obuf_4_3_1112_wire 1
    # $phi [phi_stmt_1108] (R_ZERO_33_1110_wire_constant RPIPE_noblock_obuf_4_3_1112_wire) ( pkt_4_e_word_1108 ) $fullrate
    // $buffering  $out phi_stmt_1108 pkt_4_e_word_1108 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 321
    # := [next_active_packet_1180_1116_buf] (next_active_packet_1180) (next_active_packet_1180_1116_buffered)     $fullrate
    $buffering $out next_active_packet_1180_1116_buf next_active_packet_1180_1116_buffered  1
    # $phi [phi_stmt_1113] (R_ZERO_3_1115_wire_constant next_active_packet_1180_1116_buffered) ( active_packet_1113 ) $fullrate
    // $buffering  $out phi_stmt_1113 active_packet_1113 2
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 323
    # := [next_pkt_priority_1180_1120_buf] (next_pkt_priority_1180) (next_pkt_priority_1180_1120_buffered)     $fullrate
    $buffering $out next_pkt_priority_1180_1120_buf next_pkt_priority_1180_1120_buffered  1
    # $phi [phi_stmt_1117] (R_ONE_3_1119_wire_constant next_pkt_priority_1180_1120_buffered) ( pkt_priority_1117 ) $fullrate
    // $buffering  $out phi_stmt_1117 pkt_priority_1117 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 326
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1125_inst] (pkt_1_e_word_1093 konst_1124_wire_constant) (p1_valid_1126)   $flowthrough 
    $delay BITSEL_u33_u1_1125_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 327
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1130_inst] (pkt_2_e_word_1098 konst_1129_wire_constant) (p2_valid_1131)   $flowthrough 
    $delay BITSEL_u33_u1_1130_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 328
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1135_inst] (pkt_3_e_word_1103 konst_1134_wire_constant) (p3_valid_1136)   $flowthrough 
    $delay BITSEL_u33_u1_1135_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 329
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1140_inst] (pkt_4_e_word_1108 konst_1139_wire_constant) (p4_valid_1141)   $flowthrough 
    $delay BITSEL_u33_u1_1140_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 330
    // (active_packet == 1 )
    ==[EQ_u3_u1_1145_inst] (active_packet_1113 konst_1144_wire_constant) (EQ_u3_u1_1145_wire)   $flowthrough 
    $delay EQ_u3_u1_1145_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1148_inst] (EQ_u3_u1_1145_wire p1_valid_1126 konst_1147_wire_constant) (MUX_1148_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1151_inst] (active_packet_1113 konst_1150_wire_constant) (EQ_u3_u1_1151_wire)   $flowthrough 
    $delay EQ_u3_u1_1151_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1154_inst] (EQ_u3_u1_1151_wire p2_valid_1131 konst_1153_wire_constant) (MUX_1154_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1155_inst] (MUX_1148_wire MUX_1154_wire) (OR_u1_u1_1155_wire)   $flowthrough 
    $delay OR_u1_u1_1155_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1158_inst] (active_packet_1113 konst_1157_wire_constant) (EQ_u3_u1_1158_wire)   $flowthrough 
    $delay EQ_u3_u1_1158_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1161_inst] (EQ_u3_u1_1158_wire p3_valid_1136 konst_1160_wire_constant) (MUX_1161_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1164_inst] (active_packet_1113 konst_1163_wire_constant) (EQ_u3_u1_1164_wire)   $flowthrough 
    $delay EQ_u3_u1_1164_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1167_inst] (EQ_u3_u1_1164_wire p4_valid_1141 konst_1166_wire_constant) (MUX_1167_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1168_inst] (MUX_1161_wire MUX_1167_wire) (OR_u1_u1_1168_wire)   $flowthrough 
    $delay OR_u1_u1_1168_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1169_inst] (OR_u1_u1_1155_wire OR_u1_u1_1168_wire) (valid_active_pkt_word_read_1170)   $flowthrough 
    $delay OR_u1_u1_1169_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 331
    $call [call_stmt_1180_call] $module prioritySelect(down_counter_1089 active_packet_1113 pkt_priority_1117 p1_valid_1126 p2_valid_1131 p3_valid_1136 p4_valid_1141) (next_active_packet_1180 next_pkt_priority_1180)   $flowthrough $fullrate
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 332
    // (p1_valid | p2_valid)
    |[OR_u1_u1_1184_inst] (p1_valid_1126 p2_valid_1131) (OR_u1_u1_1184_wire)   $flowthrough 
    $delay OR_u1_u1_1184_inst 0
    // (p3_valid | p4_valid)
    |[OR_u1_u1_1187_inst] (p3_valid_1136 p4_valid_1141) (OR_u1_u1_1187_wire)   $flowthrough 
    $delay OR_u1_u1_1187_inst 0
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    |[OR_u1_u1_1188_inst] (OR_u1_u1_1184_wire OR_u1_u1_1187_wire) (OR_u1_u1_1188_wire)   $flowthrough 
    $delay OR_u1_u1_1188_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1191_inst] (down_counter_1089 konst_1190_wire_constant) (EQ_u8_u1_1191_wire)   $flowthrough 
    $delay EQ_u8_u1_1191_inst 0
    // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
    &[AND_u1_u1_1192_inst] (OR_u1_u1_1188_wire EQ_u8_u1_1191_wire) (started_new_packet_1193)   $flowthrough 
    $delay AND_u1_u1_1192_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 333
    // (down_counter - 1 )
    -[SUB_u8_u8_1200_inst] (down_counter_1089 konst_1199_wire_constant) (SUB_u8_u8_1200_wire)   $flowthrough 
    $delay SUB_u8_u8_1200_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1202_inst] (valid_active_pkt_word_read_1170 SUB_u8_u8_1200_wire down_counter_1089) (MUX_1202_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1203_inst] (started_new_packet_1193 konst_1196_wire_constant MUX_1202_wire) (next_down_counter_1204)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 334
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1207_inst] (p1_valid_1126) (NOT_u1_u1_1207_wire)   $flowthrough
    $delay NOT_u1_u1_1207_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1210_inst] (next_active_packet_1180 konst_1209_wire_constant) (EQ_u3_u1_1210_wire)   $flowthrough 
    $delay EQ_u3_u1_1210_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1211_inst] (NOT_u1_u1_1207_wire EQ_u3_u1_1210_wire) (read_from_1_1212)   $flowthrough 
    $delay OR_u1_u1_1211_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 335
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1215_inst] (p2_valid_1131) (NOT_u1_u1_1215_wire)   $flowthrough
    $delay NOT_u1_u1_1215_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1218_inst] (next_active_packet_1180 konst_1217_wire_constant) (EQ_u3_u1_1218_wire)   $flowthrough 
    $delay EQ_u3_u1_1218_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1219_inst] (NOT_u1_u1_1215_wire EQ_u3_u1_1218_wire) (read_from_2_1220)   $flowthrough 
    $delay OR_u1_u1_1219_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 336
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1223_inst] (p3_valid_1136) (NOT_u1_u1_1223_wire)   $flowthrough
    $delay NOT_u1_u1_1223_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1226_inst] (next_active_packet_1180 konst_1225_wire_constant) (EQ_u3_u1_1226_wire)   $flowthrough 
    $delay EQ_u3_u1_1226_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1227_inst] (NOT_u1_u1_1223_wire EQ_u3_u1_1226_wire) (read_from_3_1228)   $flowthrough 
    $delay OR_u1_u1_1227_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 337
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1231_inst] (p4_valid_1141) (NOT_u1_u1_1231_wire)   $flowthrough
    $delay NOT_u1_u1_1231_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1234_inst] (next_active_packet_1180 konst_1233_wire_constant) (EQ_u3_u1_1234_wire)   $flowthrough 
    $delay EQ_u3_u1_1234_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1235_inst] (NOT_u1_u1_1231_wire EQ_u3_u1_1234_wire) (read_from_4_1236)   $flowthrough 
    $delay OR_u1_u1_1235_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 338
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1240_inst] (next_active_packet_1180 konst_1239_wire_constant) (EQ_u3_u1_1240_wire)   $flowthrough 
    $delay EQ_u3_u1_1240_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1242_inst] (pkt_1_e_word_1093 31 0) (slice_1242_wire)  $flowthrough
    $delay slice_1242_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1244_inst] (EQ_u3_u1_1240_wire slice_1242_wire konst_1243_wire_constant) (MUX_1244_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1247_inst] (next_active_packet_1180 konst_1246_wire_constant) (EQ_u3_u1_1247_wire)   $flowthrough 
    $delay EQ_u3_u1_1247_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1249_inst] (pkt_2_e_word_1098 31 0) (slice_1249_wire)  $flowthrough
    $delay slice_1249_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1251_inst] (EQ_u3_u1_1247_wire slice_1249_wire konst_1250_wire_constant) (MUX_1251_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1252_inst] (MUX_1244_wire MUX_1251_wire) (OR_u32_u32_1252_wire)   $flowthrough 
    $delay OR_u32_u32_1252_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1255_inst] (next_active_packet_1180 konst_1254_wire_constant) (EQ_u3_u1_1255_wire)   $flowthrough 
    $delay EQ_u3_u1_1255_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1257_inst] (pkt_3_e_word_1103 31 0) (slice_1257_wire)  $flowthrough
    $delay slice_1257_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1259_inst] (EQ_u3_u1_1255_wire slice_1257_wire konst_1258_wire_constant) (MUX_1259_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1262_inst] (next_active_packet_1180 konst_1261_wire_constant) (EQ_u3_u1_1262_wire)   $flowthrough 
    $delay EQ_u3_u1_1262_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1264_inst] (pkt_4_e_word_1108 31 0) (slice_1264_wire)  $flowthrough
    $delay slice_1264_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1266_inst] (EQ_u3_u1_1262_wire slice_1264_wire konst_1265_wire_constant) (MUX_1266_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1267_inst] (MUX_1259_wire MUX_1266_wire) (OR_u32_u32_1267_wire)   $flowthrough 
    $delay OR_u32_u32_1267_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1268_inst] (OR_u32_u32_1252_wire OR_u32_u32_1267_wire) (data_to_out_1269)   $flowthrough 
    $delay OR_u32_u32_1268_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 339
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1273_inst] (next_active_packet_1180 konst_1272_wire_constant) (EQ_u3_u1_1273_wire)   $flowthrough 
    $delay EQ_u3_u1_1273_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1276_inst] (EQ_u3_u1_1273_wire p1_valid_1126 konst_1275_wire_constant) (MUX_1276_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1279_inst] (next_active_packet_1180 konst_1278_wire_constant) (EQ_u3_u1_1279_wire)   $flowthrough 
    $delay EQ_u3_u1_1279_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1282_inst] (EQ_u3_u1_1279_wire p2_valid_1131 konst_1281_wire_constant) (MUX_1282_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1283_inst] (MUX_1276_wire MUX_1282_wire) (OR_u1_u1_1283_wire)   $flowthrough 
    $delay OR_u1_u1_1283_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1286_inst] (next_active_packet_1180 konst_1285_wire_constant) (EQ_u3_u1_1286_wire)   $flowthrough 
    $delay EQ_u3_u1_1286_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1289_inst] (EQ_u3_u1_1286_wire p3_valid_1136 konst_1288_wire_constant) (MUX_1289_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1292_inst] (next_active_packet_1180 konst_1291_wire_constant) (EQ_u3_u1_1292_wire)   $flowthrough 
    $delay EQ_u3_u1_1292_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1295_inst] (EQ_u3_u1_1292_wire p4_valid_1141 konst_1294_wire_constant) (MUX_1295_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1296_inst] (MUX_1289_wire MUX_1295_wire) (OR_u1_u1_1296_wire)   $flowthrough 
    $delay OR_u1_u1_1296_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1297_inst] (OR_u1_u1_1283_wire OR_u1_u1_1296_wire) (send_flag_1298)   $flowthrough 
    $delay OR_u1_u1_1297_inst 0
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 340
    // out_data_3
    $ioport $out [WPIPE_out_data_3_1300_inst]  (data_to_out_1269) (out_data_3) $guard ( send_flag_1298 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1087
  //  file .Aa/switch2x2.opt.aa, line 308
  phi_stmt_1089 <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1089_entry_sample_req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1089_loopback_sample_req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1089_phi_mux_ack)
  next_down_counter_1204_1092_buf <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_down_counter_1092_Sample/req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_down_counter_1092_Update/req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_down_counter_1092_Sample/ack branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_down_counter_1092_Update/ack)
  phi_stmt_1093 <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1093_entry_sample_req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1093_loopback_sample_req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1093_phi_mux_ack)
  // noblock_obuf_1_3
  RPIPE_noblock_obuf_1_3_1097_inst <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_1_3_1097_Sample/rr branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_1_3_1097_Update/cr) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_1_3_1097_Sample/ra branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_1_3_1097_Update/ca)
  phi_stmt_1098 <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1098_entry_sample_req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1098_loopback_sample_req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1098_phi_mux_ack)
  // noblock_obuf_2_3
  RPIPE_noblock_obuf_2_3_1102_inst <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_2_3_1102_Sample/rr branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_2_3_1102_Update/cr) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_2_3_1102_Sample/ra branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_2_3_1102_Update/ca)
  phi_stmt_1103 <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1103_entry_sample_req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1103_loopback_sample_req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1103_phi_mux_ack)
  // noblock_obuf_3_3
  RPIPE_noblock_obuf_3_3_1107_inst <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_3_3_1107_Sample/rr branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_3_3_1107_Update/cr) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_3_3_1107_Sample/ra branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_3_3_1107_Update/ca)
  phi_stmt_1108 <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1108_entry_sample_req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1108_loopback_sample_req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1108_phi_mux_ack)
  // noblock_obuf_4_3
  RPIPE_noblock_obuf_4_3_1112_inst <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_4_3_1112_Sample/rr branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_4_3_1112_Update/cr) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_4_3_1112_Sample/ra branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/RPIPE_noblock_obuf_4_3_1112_Update/ca)
  phi_stmt_1113 <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1113_entry_sample_req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1113_loopback_sample_req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1113_phi_mux_ack)
  next_active_packet_1180_1116_buf <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_active_packet_1116_Sample/req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_active_packet_1116_Update/req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_active_packet_1116_Sample/ack branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_active_packet_1116_Update/ack)
  phi_stmt_1117 <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1117_entry_sample_req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1117_loopback_sample_req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/phi_stmt_1117_phi_mux_ack)
  next_pkt_priority_1180_1120_buf <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_pkt_priority_1120_Sample/req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_pkt_priority_1120_Update/req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_pkt_priority_1120_Sample/ack branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/R_next_pkt_priority_1120_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 326
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 327
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 328
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 329
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 330
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 331
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 332
  // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
  // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
  // (p1_valid | p2_valid)
  // p1_valid
  // p2_valid
  // (p3_valid | p4_valid)
  // p3_valid
  // p4_valid
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 333
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 334
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 335
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 336
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 337
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 338
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 339
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 340
  // data_to_out
  // out_data_3
  WPIPE_out_data_3_1300_inst <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/WPIPE_out_data_3_1300_Sample/req branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/WPIPE_out_data_3_1300_Update/req) (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/WPIPE_out_data_3_1300_Sample/ack branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/WPIPE_out_data_3_1300_Update/ack)
  do_while_stmt_1087_branch <=> (branch_block_stmt_1086/do_while_stmt_1087/do_while_stmt_1087_loop_body/condition_evaluated) (branch_block_stmt_1086/do_while_stmt_1087/loop_exit/ack branch_block_stmt_1086/do_while_stmt_1087/loop_taken/ack)
}
$module [outputPort_4_Daemon] 
{
  // pipe-declarations for block %outputPort_4_Daemon
  //  file .Aa/switch2x2.opt.aa, line 344
  // pipe-declarations for block %outputPort_4_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 349
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1308] // Branch Block  file .Aa/switch2x2.opt.aa, line 349
    {
      $P [branch_block_stmt_1308__entry__]
      branch_block_stmt_1308__entry__ <-| ($entry)
      $P [branch_block_stmt_1308__exit__]
      branch_block_stmt_1308__exit__ |-> ($exit)
      $P [do_while_stmt_1309__entry__] 
      $P [do_while_stmt_1309__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 351
      <o> [do_while_stmt_1309]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1309__entry__] 
        $P[do_while_stmt_1309__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1309_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1311
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1311_sample_start_] 
          $T[phi_stmt_1311_sample_completed_] 
          $T[phi_stmt_1311_update_start_] 
          $T[phi_stmt_1311_update_completed_] 
          $T[phi_stmt_1311_sample_start__ps] 
          phi_stmt_1311_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1311_sample_completed__ps] 
          phi_stmt_1311_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1311_update_start__ps] 
          phi_stmt_1311_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1311_update_completed__ps] 
          phi_stmt_1311_update_completed_ <-& (phi_stmt_1311_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1311_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1311_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1311_update_start_)
          $T[phi_stmt_1311_loopback_trigger] 
          phi_stmt_1311_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1311_loopback_sample_req] 
          $T[phi_stmt_1311_loopback_sample_req_ps] 
          phi_stmt_1311_loopback_sample_req <-& (phi_stmt_1311_loopback_sample_req_ps)
          phi_stmt_1311_loopback_sample_req &-> ($null)
          $T[phi_stmt_1311_entry_trigger] 
          phi_stmt_1311_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1311_entry_sample_req] 
          $T[phi_stmt_1311_entry_sample_req_ps] 
          phi_stmt_1311_entry_sample_req <-& (phi_stmt_1311_entry_sample_req_ps)
          phi_stmt_1311_entry_sample_req &-> ($null)
          phi_stmt_1311_update_start_ o<-& (phi_stmt_1311_update_completed_ 0)
          phi_stmt_1311_sample_start_ o<-& (phi_stmt_1311_sample_completed_ 1)
          $T[phi_stmt_1311_merged_reqs] 
          $T[phi_stmt_1311_phi_mux_ack] 
          $T[phi_stmt_1311_phi_mux_ack_ps] 
          phi_stmt_1311_phi_mux_ack_ps <-& (phi_stmt_1311_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1311_update_completed_)
          $T[R_ZERO_8_1313_sample_start__ps] 
          $T[R_ZERO_8_1313_sample_completed__ps] 
          $T[R_ZERO_8_1313_update_start__ps] 
          $T[R_ZERO_8_1313_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1313_sample_start_] 
          $T[R_ZERO_8_1313_sample_completed_] 
          R_ZERO_8_1313_sample_completed_ <-& (R_ZERO_8_1313_sample_start_)
          $T[R_ZERO_8_1313_update_start_] 
          $T [R_ZERO_8_1313_update_completed_] $delay 
          R_ZERO_8_1313_update_completed_ <-& (R_ZERO_8_1313_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1313_sample_start_ <-& (R_ZERO_8_1313_sample_start__ps)
          R_ZERO_8_1313_update_start_ <-& (R_ZERO_8_1313_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1313_sample_completed__ps <-& (R_ZERO_8_1313_sample_completed_)
          R_ZERO_8_1313_update_completed__ps <-& (R_ZERO_8_1313_update_completed_)
          $T[R_next_down_counter_1314_sample_start__ps] 
          $T[R_next_down_counter_1314_sample_completed__ps] 
          $T[R_next_down_counter_1314_update_start__ps] 
          $T[R_next_down_counter_1314_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1314_sample_start_] 
          $T[R_next_down_counter_1314_sample_completed_] 
          $T[R_next_down_counter_1314_update_start_] 
          $T[R_next_down_counter_1314_update_completed_] 
          ;;[R_next_down_counter_1314_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1314_sample_start_ &-> (R_next_down_counter_1314_Sample)
          R_next_down_counter_1314_sample_completed_ <-& (R_next_down_counter_1314_Sample)
          ;;[R_next_down_counter_1314_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1314_update_start_ &-> (R_next_down_counter_1314_Update)
          R_next_down_counter_1314_update_completed_ <-& (R_next_down_counter_1314_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1314_sample_start_ <-& (R_next_down_counter_1314_sample_start__ps)
          R_next_down_counter_1314_update_start_ <-& (R_next_down_counter_1314_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1314_sample_completed__ps <-& (R_next_down_counter_1314_sample_completed_)
          R_next_down_counter_1314_update_completed__ps <-& (R_next_down_counter_1314_update_completed_)
          $phisequencer [ phi_stmt_1311_phi_seq] : 
          phi_stmt_1311_entry_trigger R_ZERO_8_1313_sample_start__ps R_ZERO_8_1313_sample_completed__ps R_ZERO_8_1313_update_start__ps R_ZERO_8_1313_update_completed__ps phi_stmt_1311_loopback_trigger R_next_down_counter_1314_sample_start__ps R_next_down_counter_1314_sample_completed__ps R_next_down_counter_1314_update_start__ps R_next_down_counter_1314_update_completed__ps :
          phi_stmt_1311_sample_start__ps phi_stmt_1311_sample_completed__ps phi_stmt_1311_update_start__ps phi_stmt_1311_update_completed__ps :
          phi_stmt_1311_entry_sample_req_ps phi_stmt_1311_loopback_sample_req_ps : 
          phi_stmt_1311_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1311
          // start:  PHI statement phi_stmt_1315
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1315_sample_start_] 
          $T[phi_stmt_1315_sample_completed_] 
          $T[phi_stmt_1315_update_start_] 
          $T[phi_stmt_1315_update_completed_] 
          $T[phi_stmt_1315_sample_start__ps] 
          phi_stmt_1315_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1315_sample_completed__ps] 
          phi_stmt_1315_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1315_update_start__ps] 
          phi_stmt_1315_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1315_update_completed__ps] 
          phi_stmt_1315_update_completed_ <-& (phi_stmt_1315_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1315_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1315_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1315_update_start_)
          $T[phi_stmt_1315_loopback_trigger] 
          phi_stmt_1315_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1315_loopback_sample_req] 
          $T[phi_stmt_1315_loopback_sample_req_ps] 
          phi_stmt_1315_loopback_sample_req <-& (phi_stmt_1315_loopback_sample_req_ps)
          phi_stmt_1315_loopback_sample_req &-> ($null)
          $T[phi_stmt_1315_entry_trigger] 
          phi_stmt_1315_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1315_entry_sample_req] 
          $T[phi_stmt_1315_entry_sample_req_ps] 
          phi_stmt_1315_entry_sample_req <-& (phi_stmt_1315_entry_sample_req_ps)
          phi_stmt_1315_entry_sample_req &-> ($null)
          phi_stmt_1315_update_start_ o<-& (phi_stmt_1315_update_completed_ 0)
          phi_stmt_1315_sample_start_ o<-& (phi_stmt_1315_sample_completed_ 1)
          $T[phi_stmt_1315_merged_reqs] 
          $T[phi_stmt_1315_phi_mux_ack] 
          $T[phi_stmt_1315_phi_mux_ack_ps] 
          phi_stmt_1315_phi_mux_ack_ps <-& (phi_stmt_1315_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1315_update_completed_)
          $T[R_ZERO_33_1317_sample_start__ps] 
          $T[R_ZERO_33_1317_sample_completed__ps] 
          $T[R_ZERO_33_1317_update_start__ps] 
          $T[R_ZERO_33_1317_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1317_sample_start_] 
          $T[R_ZERO_33_1317_sample_completed_] 
          R_ZERO_33_1317_sample_completed_ <-& (R_ZERO_33_1317_sample_start_)
          $T[R_ZERO_33_1317_update_start_] 
          $T [R_ZERO_33_1317_update_completed_] $delay 
          R_ZERO_33_1317_update_completed_ <-& (R_ZERO_33_1317_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1317_sample_start_ <-& (R_ZERO_33_1317_sample_start__ps)
          R_ZERO_33_1317_update_start_ <-& (R_ZERO_33_1317_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1317_sample_completed__ps <-& (R_ZERO_33_1317_sample_completed_)
          R_ZERO_33_1317_update_completed__ps <-& (R_ZERO_33_1317_update_completed_)
          $T[RPIPE_noblock_obuf_1_4_1319_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1319_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_4_1319_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1319_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_4
          $T[RPIPE_noblock_obuf_1_4_1319_sample_start_] 
          $T[RPIPE_noblock_obuf_1_4_1319_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_4_1319_update_start_] 
          $T[RPIPE_noblock_obuf_1_4_1319_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_4_1319 with guard R_read_from_1_1318
          // root phi_stmt_1315 not in visited_elements
          // root phi_stmt_1320 not in visited_elements
          // root phi_stmt_1325 not in visited_elements
          // root phi_stmt_1330 not in visited_elements
          // root phi_stmt_1335 not in visited_elements
          // root phi_stmt_1339 not in visited_elements
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_4_1319_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_4_1319_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_4_1319_sample_start_ &-> (RPIPE_noblock_obuf_1_4_1319_Sample)
          RPIPE_noblock_obuf_1_4_1319_sample_completed_ <-& (RPIPE_noblock_obuf_1_4_1319_Sample)
          RPIPE_noblock_obuf_1_4_1319_update_start_ <-& (RPIPE_noblock_obuf_1_4_1319_sample_completed_)
          RPIPE_noblock_obuf_1_4_1319_update_start_ &-> (RPIPE_noblock_obuf_1_4_1319_Update)
          RPIPE_noblock_obuf_1_4_1319_update_completed_ <-& (RPIPE_noblock_obuf_1_4_1319_Update)
          RPIPE_noblock_obuf_1_4_1319_sample_start_ o<-& (RPIPE_noblock_obuf_1_4_1319_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_4_1319_sample_start_ <-& (RPIPE_noblock_obuf_1_4_1319_sample_start__ps)
          RPIPE_noblock_obuf_1_4_1319_update_start_ <-& (RPIPE_noblock_obuf_1_4_1319_update_start__ps)
          // RAW reenables for noblock_obuf_1_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_4_1319_sample_completed__ps <-& (RPIPE_noblock_obuf_1_4_1319_sample_completed_)
          RPIPE_noblock_obuf_1_4_1319_update_completed__ps <-& (RPIPE_noblock_obuf_1_4_1319_update_completed_)
          $phisequencer [ phi_stmt_1315_phi_seq] : 
          phi_stmt_1315_entry_trigger R_ZERO_33_1317_sample_start__ps R_ZERO_33_1317_sample_completed__ps R_ZERO_33_1317_update_start__ps R_ZERO_33_1317_update_completed__ps phi_stmt_1315_loopback_trigger RPIPE_noblock_obuf_1_4_1319_sample_start__ps RPIPE_noblock_obuf_1_4_1319_sample_completed__ps RPIPE_noblock_obuf_1_4_1319_update_start__ps RPIPE_noblock_obuf_1_4_1319_update_completed__ps :
          phi_stmt_1315_sample_start__ps phi_stmt_1315_sample_completed__ps phi_stmt_1315_update_start__ps phi_stmt_1315_update_completed__ps :
          phi_stmt_1315_entry_sample_req_ps phi_stmt_1315_loopback_sample_req_ps : 
          phi_stmt_1315_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1315
          // start:  PHI statement phi_stmt_1320
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1320_sample_start_] 
          $T[phi_stmt_1320_sample_completed_] 
          $T[phi_stmt_1320_update_start_] 
          $T[phi_stmt_1320_update_completed_] 
          $T[phi_stmt_1320_sample_start__ps] 
          phi_stmt_1320_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1320_sample_completed__ps] 
          phi_stmt_1320_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1320_update_start__ps] 
          phi_stmt_1320_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1320_update_completed__ps] 
          phi_stmt_1320_update_completed_ <-& (phi_stmt_1320_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1320_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1320_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1320_update_start_)
          $T[phi_stmt_1320_loopback_trigger] 
          phi_stmt_1320_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1320_loopback_sample_req] 
          $T[phi_stmt_1320_loopback_sample_req_ps] 
          phi_stmt_1320_loopback_sample_req <-& (phi_stmt_1320_loopback_sample_req_ps)
          phi_stmt_1320_loopback_sample_req &-> ($null)
          $T[phi_stmt_1320_entry_trigger] 
          phi_stmt_1320_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1320_entry_sample_req] 
          $T[phi_stmt_1320_entry_sample_req_ps] 
          phi_stmt_1320_entry_sample_req <-& (phi_stmt_1320_entry_sample_req_ps)
          phi_stmt_1320_entry_sample_req &-> ($null)
          phi_stmt_1320_update_start_ o<-& (phi_stmt_1320_update_completed_ 0)
          phi_stmt_1320_sample_start_ o<-& (phi_stmt_1320_sample_completed_ 1)
          $T[phi_stmt_1320_merged_reqs] 
          $T[phi_stmt_1320_phi_mux_ack] 
          $T[phi_stmt_1320_phi_mux_ack_ps] 
          phi_stmt_1320_phi_mux_ack_ps <-& (phi_stmt_1320_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1320_update_completed_)
          $T[R_ZERO_33_1322_sample_start__ps] 
          $T[R_ZERO_33_1322_sample_completed__ps] 
          $T[R_ZERO_33_1322_update_start__ps] 
          $T[R_ZERO_33_1322_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1322_sample_start_] 
          $T[R_ZERO_33_1322_sample_completed_] 
          R_ZERO_33_1322_sample_completed_ <-& (R_ZERO_33_1322_sample_start_)
          $T[R_ZERO_33_1322_update_start_] 
          $T [R_ZERO_33_1322_update_completed_] $delay 
          R_ZERO_33_1322_update_completed_ <-& (R_ZERO_33_1322_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1322_sample_start_ <-& (R_ZERO_33_1322_sample_start__ps)
          R_ZERO_33_1322_update_start_ <-& (R_ZERO_33_1322_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1322_sample_completed__ps <-& (R_ZERO_33_1322_sample_completed_)
          R_ZERO_33_1322_update_completed__ps <-& (R_ZERO_33_1322_update_completed_)
          $T[RPIPE_noblock_obuf_2_4_1324_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1324_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_4_1324_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1324_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_4
          $T[RPIPE_noblock_obuf_2_4_1324_sample_start_] 
          $T[RPIPE_noblock_obuf_2_4_1324_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_4_1324_update_start_] 
          $T[RPIPE_noblock_obuf_2_4_1324_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_4_1324 with guard R_read_from_2_1323
          // root phi_stmt_1320 not in visited_elements
          // root phi_stmt_1325 not in visited_elements
          // root phi_stmt_1330 not in visited_elements
          // root phi_stmt_1335 not in visited_elements
          // root phi_stmt_1339 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_4_1324_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_4_1324_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_4_1324_sample_start_ &-> (RPIPE_noblock_obuf_2_4_1324_Sample)
          RPIPE_noblock_obuf_2_4_1324_sample_completed_ <-& (RPIPE_noblock_obuf_2_4_1324_Sample)
          RPIPE_noblock_obuf_2_4_1324_update_start_ <-& (RPIPE_noblock_obuf_2_4_1324_sample_completed_)
          RPIPE_noblock_obuf_2_4_1324_update_start_ &-> (RPIPE_noblock_obuf_2_4_1324_Update)
          RPIPE_noblock_obuf_2_4_1324_update_completed_ <-& (RPIPE_noblock_obuf_2_4_1324_Update)
          RPIPE_noblock_obuf_2_4_1324_sample_start_ o<-& (RPIPE_noblock_obuf_2_4_1324_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_4_1324_sample_start_ <-& (RPIPE_noblock_obuf_2_4_1324_sample_start__ps)
          RPIPE_noblock_obuf_2_4_1324_update_start_ <-& (RPIPE_noblock_obuf_2_4_1324_update_start__ps)
          // RAW reenables for noblock_obuf_2_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_4_1324_sample_completed__ps <-& (RPIPE_noblock_obuf_2_4_1324_sample_completed_)
          RPIPE_noblock_obuf_2_4_1324_update_completed__ps <-& (RPIPE_noblock_obuf_2_4_1324_update_completed_)
          $phisequencer [ phi_stmt_1320_phi_seq] : 
          phi_stmt_1320_entry_trigger R_ZERO_33_1322_sample_start__ps R_ZERO_33_1322_sample_completed__ps R_ZERO_33_1322_update_start__ps R_ZERO_33_1322_update_completed__ps phi_stmt_1320_loopback_trigger RPIPE_noblock_obuf_2_4_1324_sample_start__ps RPIPE_noblock_obuf_2_4_1324_sample_completed__ps RPIPE_noblock_obuf_2_4_1324_update_start__ps RPIPE_noblock_obuf_2_4_1324_update_completed__ps :
          phi_stmt_1320_sample_start__ps phi_stmt_1320_sample_completed__ps phi_stmt_1320_update_start__ps phi_stmt_1320_update_completed__ps :
          phi_stmt_1320_entry_sample_req_ps phi_stmt_1320_loopback_sample_req_ps : 
          phi_stmt_1320_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1320
          // start:  PHI statement phi_stmt_1325
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1325_sample_start_] 
          $T[phi_stmt_1325_sample_completed_] 
          $T[phi_stmt_1325_update_start_] 
          $T[phi_stmt_1325_update_completed_] 
          $T[phi_stmt_1325_sample_start__ps] 
          phi_stmt_1325_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1325_sample_completed__ps] 
          phi_stmt_1325_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1325_update_start__ps] 
          phi_stmt_1325_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1325_update_completed__ps] 
          phi_stmt_1325_update_completed_ <-& (phi_stmt_1325_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1325_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1325_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1325_update_start_)
          $T[phi_stmt_1325_loopback_trigger] 
          phi_stmt_1325_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1325_loopback_sample_req] 
          $T[phi_stmt_1325_loopback_sample_req_ps] 
          phi_stmt_1325_loopback_sample_req <-& (phi_stmt_1325_loopback_sample_req_ps)
          phi_stmt_1325_loopback_sample_req &-> ($null)
          $T[phi_stmt_1325_entry_trigger] 
          phi_stmt_1325_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1325_entry_sample_req] 
          $T[phi_stmt_1325_entry_sample_req_ps] 
          phi_stmt_1325_entry_sample_req <-& (phi_stmt_1325_entry_sample_req_ps)
          phi_stmt_1325_entry_sample_req &-> ($null)
          phi_stmt_1325_update_start_ o<-& (phi_stmt_1325_update_completed_ 0)
          phi_stmt_1325_sample_start_ o<-& (phi_stmt_1325_sample_completed_ 1)
          $T[phi_stmt_1325_merged_reqs] 
          $T[phi_stmt_1325_phi_mux_ack] 
          $T[phi_stmt_1325_phi_mux_ack_ps] 
          phi_stmt_1325_phi_mux_ack_ps <-& (phi_stmt_1325_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1325_update_completed_)
          $T[R_ZERO_33_1327_sample_start__ps] 
          $T[R_ZERO_33_1327_sample_completed__ps] 
          $T[R_ZERO_33_1327_update_start__ps] 
          $T[R_ZERO_33_1327_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1327_sample_start_] 
          $T[R_ZERO_33_1327_sample_completed_] 
          R_ZERO_33_1327_sample_completed_ <-& (R_ZERO_33_1327_sample_start_)
          $T[R_ZERO_33_1327_update_start_] 
          $T [R_ZERO_33_1327_update_completed_] $delay 
          R_ZERO_33_1327_update_completed_ <-& (R_ZERO_33_1327_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1327_sample_start_ <-& (R_ZERO_33_1327_sample_start__ps)
          R_ZERO_33_1327_update_start_ <-& (R_ZERO_33_1327_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1327_sample_completed__ps <-& (R_ZERO_33_1327_sample_completed_)
          R_ZERO_33_1327_update_completed__ps <-& (R_ZERO_33_1327_update_completed_)
          $T[RPIPE_noblock_obuf_3_4_1329_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1329_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_4_1329_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1329_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_4
          $T[RPIPE_noblock_obuf_3_4_1329_sample_start_] 
          $T[RPIPE_noblock_obuf_3_4_1329_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_4_1329_update_start_] 
          $T[RPIPE_noblock_obuf_3_4_1329_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_4_1329 with guard R_read_from_3_1328
          // root phi_stmt_1325 not in visited_elements
          // root phi_stmt_1330 not in visited_elements
          // root phi_stmt_1335 not in visited_elements
          // root phi_stmt_1339 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_4_1329_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_4_1329_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_4_1329_sample_start_ &-> (RPIPE_noblock_obuf_3_4_1329_Sample)
          RPIPE_noblock_obuf_3_4_1329_sample_completed_ <-& (RPIPE_noblock_obuf_3_4_1329_Sample)
          RPIPE_noblock_obuf_3_4_1329_update_start_ <-& (RPIPE_noblock_obuf_3_4_1329_sample_completed_)
          RPIPE_noblock_obuf_3_4_1329_update_start_ &-> (RPIPE_noblock_obuf_3_4_1329_Update)
          RPIPE_noblock_obuf_3_4_1329_update_completed_ <-& (RPIPE_noblock_obuf_3_4_1329_Update)
          RPIPE_noblock_obuf_3_4_1329_sample_start_ o<-& (RPIPE_noblock_obuf_3_4_1329_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_4_1329_sample_start_ <-& (RPIPE_noblock_obuf_3_4_1329_sample_start__ps)
          RPIPE_noblock_obuf_3_4_1329_update_start_ <-& (RPIPE_noblock_obuf_3_4_1329_update_start__ps)
          // RAW reenables for noblock_obuf_3_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_4_1329_sample_completed__ps <-& (RPIPE_noblock_obuf_3_4_1329_sample_completed_)
          RPIPE_noblock_obuf_3_4_1329_update_completed__ps <-& (RPIPE_noblock_obuf_3_4_1329_update_completed_)
          $phisequencer [ phi_stmt_1325_phi_seq] : 
          phi_stmt_1325_entry_trigger R_ZERO_33_1327_sample_start__ps R_ZERO_33_1327_sample_completed__ps R_ZERO_33_1327_update_start__ps R_ZERO_33_1327_update_completed__ps phi_stmt_1325_loopback_trigger RPIPE_noblock_obuf_3_4_1329_sample_start__ps RPIPE_noblock_obuf_3_4_1329_sample_completed__ps RPIPE_noblock_obuf_3_4_1329_update_start__ps RPIPE_noblock_obuf_3_4_1329_update_completed__ps :
          phi_stmt_1325_sample_start__ps phi_stmt_1325_sample_completed__ps phi_stmt_1325_update_start__ps phi_stmt_1325_update_completed__ps :
          phi_stmt_1325_entry_sample_req_ps phi_stmt_1325_loopback_sample_req_ps : 
          phi_stmt_1325_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1325
          // start:  PHI statement phi_stmt_1330
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1330_sample_start_] 
          $T[phi_stmt_1330_sample_completed_] 
          $T[phi_stmt_1330_update_start_] 
          $T[phi_stmt_1330_update_completed_] 
          $T[phi_stmt_1330_sample_start__ps] 
          phi_stmt_1330_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1330_sample_completed__ps] 
          phi_stmt_1330_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1330_update_start__ps] 
          phi_stmt_1330_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1330_update_completed__ps] 
          phi_stmt_1330_update_completed_ <-& (phi_stmt_1330_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1330_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1330_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1330_update_start_)
          $T[phi_stmt_1330_loopback_trigger] 
          phi_stmt_1330_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1330_loopback_sample_req] 
          $T[phi_stmt_1330_loopback_sample_req_ps] 
          phi_stmt_1330_loopback_sample_req <-& (phi_stmt_1330_loopback_sample_req_ps)
          phi_stmt_1330_loopback_sample_req &-> ($null)
          $T[phi_stmt_1330_entry_trigger] 
          phi_stmt_1330_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1330_entry_sample_req] 
          $T[phi_stmt_1330_entry_sample_req_ps] 
          phi_stmt_1330_entry_sample_req <-& (phi_stmt_1330_entry_sample_req_ps)
          phi_stmt_1330_entry_sample_req &-> ($null)
          phi_stmt_1330_update_start_ o<-& (phi_stmt_1330_update_completed_ 0)
          phi_stmt_1330_sample_start_ o<-& (phi_stmt_1330_sample_completed_ 1)
          $T[phi_stmt_1330_merged_reqs] 
          $T[phi_stmt_1330_phi_mux_ack] 
          $T[phi_stmt_1330_phi_mux_ack_ps] 
          phi_stmt_1330_phi_mux_ack_ps <-& (phi_stmt_1330_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1330_update_completed_)
          $T[R_ZERO_33_1332_sample_start__ps] 
          $T[R_ZERO_33_1332_sample_completed__ps] 
          $T[R_ZERO_33_1332_update_start__ps] 
          $T[R_ZERO_33_1332_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1332_sample_start_] 
          $T[R_ZERO_33_1332_sample_completed_] 
          R_ZERO_33_1332_sample_completed_ <-& (R_ZERO_33_1332_sample_start_)
          $T[R_ZERO_33_1332_update_start_] 
          $T [R_ZERO_33_1332_update_completed_] $delay 
          R_ZERO_33_1332_update_completed_ <-& (R_ZERO_33_1332_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1332_sample_start_ <-& (R_ZERO_33_1332_sample_start__ps)
          R_ZERO_33_1332_update_start_ <-& (R_ZERO_33_1332_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1332_sample_completed__ps <-& (R_ZERO_33_1332_sample_completed_)
          R_ZERO_33_1332_update_completed__ps <-& (R_ZERO_33_1332_update_completed_)
          $T[RPIPE_noblock_obuf_4_4_1334_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1334_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_4_1334_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1334_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_4
          $T[RPIPE_noblock_obuf_4_4_1334_sample_start_] 
          $T[RPIPE_noblock_obuf_4_4_1334_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_4_1334_update_start_] 
          $T[RPIPE_noblock_obuf_4_4_1334_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_4_1334 with guard R_read_from_4_1333
          // root phi_stmt_1330 not in visited_elements
          // root phi_stmt_1335 not in visited_elements
          // root phi_stmt_1339 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_4_1334_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_4_1334_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_4_1334_sample_start_ &-> (RPIPE_noblock_obuf_4_4_1334_Sample)
          RPIPE_noblock_obuf_4_4_1334_sample_completed_ <-& (RPIPE_noblock_obuf_4_4_1334_Sample)
          RPIPE_noblock_obuf_4_4_1334_update_start_ <-& (RPIPE_noblock_obuf_4_4_1334_sample_completed_)
          RPIPE_noblock_obuf_4_4_1334_update_start_ &-> (RPIPE_noblock_obuf_4_4_1334_Update)
          RPIPE_noblock_obuf_4_4_1334_update_completed_ <-& (RPIPE_noblock_obuf_4_4_1334_Update)
          RPIPE_noblock_obuf_4_4_1334_sample_start_ o<-& (RPIPE_noblock_obuf_4_4_1334_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_4_1334_sample_start_ <-& (RPIPE_noblock_obuf_4_4_1334_sample_start__ps)
          RPIPE_noblock_obuf_4_4_1334_update_start_ <-& (RPIPE_noblock_obuf_4_4_1334_update_start__ps)
          // RAW reenables for noblock_obuf_4_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_4_1334_sample_completed__ps <-& (RPIPE_noblock_obuf_4_4_1334_sample_completed_)
          RPIPE_noblock_obuf_4_4_1334_update_completed__ps <-& (RPIPE_noblock_obuf_4_4_1334_update_completed_)
          $phisequencer [ phi_stmt_1330_phi_seq] : 
          phi_stmt_1330_entry_trigger R_ZERO_33_1332_sample_start__ps R_ZERO_33_1332_sample_completed__ps R_ZERO_33_1332_update_start__ps R_ZERO_33_1332_update_completed__ps phi_stmt_1330_loopback_trigger RPIPE_noblock_obuf_4_4_1334_sample_start__ps RPIPE_noblock_obuf_4_4_1334_sample_completed__ps RPIPE_noblock_obuf_4_4_1334_update_start__ps RPIPE_noblock_obuf_4_4_1334_update_completed__ps :
          phi_stmt_1330_sample_start__ps phi_stmt_1330_sample_completed__ps phi_stmt_1330_update_start__ps phi_stmt_1330_update_completed__ps :
          phi_stmt_1330_entry_sample_req_ps phi_stmt_1330_loopback_sample_req_ps : 
          phi_stmt_1330_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1330
          // start:  PHI statement phi_stmt_1335
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1335_sample_start_] 
          $T[phi_stmt_1335_sample_completed_] 
          $T[phi_stmt_1335_update_start_] 
          $T[phi_stmt_1335_update_completed_] 
          $T[phi_stmt_1335_sample_start__ps] 
          phi_stmt_1335_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1335_sample_completed__ps] 
          phi_stmt_1335_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1335_update_start__ps] 
          phi_stmt_1335_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1335_update_completed__ps] 
          phi_stmt_1335_update_completed_ <-& (phi_stmt_1335_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1335_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1335_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1335_update_start_)
          $T[phi_stmt_1335_loopback_trigger] 
          phi_stmt_1335_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1335_loopback_sample_req] 
          $T[phi_stmt_1335_loopback_sample_req_ps] 
          phi_stmt_1335_loopback_sample_req <-& (phi_stmt_1335_loopback_sample_req_ps)
          phi_stmt_1335_loopback_sample_req &-> ($null)
          $T[phi_stmt_1335_entry_trigger] 
          phi_stmt_1335_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1335_entry_sample_req] 
          $T[phi_stmt_1335_entry_sample_req_ps] 
          phi_stmt_1335_entry_sample_req <-& (phi_stmt_1335_entry_sample_req_ps)
          phi_stmt_1335_entry_sample_req &-> ($null)
          phi_stmt_1335_update_start_ o<-& (phi_stmt_1335_update_completed_ 0)
          phi_stmt_1335_sample_start_ o<-& (phi_stmt_1335_sample_completed_ 1)
          $T[phi_stmt_1335_merged_reqs] 
          $T[phi_stmt_1335_phi_mux_ack] 
          $T[phi_stmt_1335_phi_mux_ack_ps] 
          phi_stmt_1335_phi_mux_ack_ps <-& (phi_stmt_1335_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1335_update_completed_)
          $T[R_ZERO_3_1337_sample_start__ps] 
          $T[R_ZERO_3_1337_sample_completed__ps] 
          $T[R_ZERO_3_1337_update_start__ps] 
          $T[R_ZERO_3_1337_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1337_sample_start_] 
          $T[R_ZERO_3_1337_sample_completed_] 
          R_ZERO_3_1337_sample_completed_ <-& (R_ZERO_3_1337_sample_start_)
          $T[R_ZERO_3_1337_update_start_] 
          $T [R_ZERO_3_1337_update_completed_] $delay 
          R_ZERO_3_1337_update_completed_ <-& (R_ZERO_3_1337_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1337_sample_start_ <-& (R_ZERO_3_1337_sample_start__ps)
          R_ZERO_3_1337_update_start_ <-& (R_ZERO_3_1337_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1337_sample_completed__ps <-& (R_ZERO_3_1337_sample_completed_)
          R_ZERO_3_1337_update_completed__ps <-& (R_ZERO_3_1337_update_completed_)
          $T[R_next_active_packet_1338_sample_start__ps] 
          $T[R_next_active_packet_1338_sample_completed__ps] 
          $T[R_next_active_packet_1338_update_start__ps] 
          $T[R_next_active_packet_1338_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1338_sample_start_] 
          $T[R_next_active_packet_1338_sample_completed_] 
          $T[R_next_active_packet_1338_update_start_] 
          $T[R_next_active_packet_1338_update_completed_] 
          ;;[R_next_active_packet_1338_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1338_sample_start_ &-> (R_next_active_packet_1338_Sample)
          R_next_active_packet_1338_sample_completed_ <-& (R_next_active_packet_1338_Sample)
          ;;[R_next_active_packet_1338_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1338_update_start_ &-> (R_next_active_packet_1338_Update)
          R_next_active_packet_1338_update_completed_ <-& (R_next_active_packet_1338_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1338_sample_start_ <-& (R_next_active_packet_1338_sample_start__ps)
          R_next_active_packet_1338_update_start_ <-& (R_next_active_packet_1338_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1338_sample_completed__ps <-& (R_next_active_packet_1338_sample_completed_)
          R_next_active_packet_1338_update_completed__ps <-& (R_next_active_packet_1338_update_completed_)
          $phisequencer [ phi_stmt_1335_phi_seq] : 
          phi_stmt_1335_entry_trigger R_ZERO_3_1337_sample_start__ps R_ZERO_3_1337_sample_completed__ps R_ZERO_3_1337_update_start__ps R_ZERO_3_1337_update_completed__ps phi_stmt_1335_loopback_trigger R_next_active_packet_1338_sample_start__ps R_next_active_packet_1338_sample_completed__ps R_next_active_packet_1338_update_start__ps R_next_active_packet_1338_update_completed__ps :
          phi_stmt_1335_sample_start__ps phi_stmt_1335_sample_completed__ps phi_stmt_1335_update_start__ps phi_stmt_1335_update_completed__ps :
          phi_stmt_1335_entry_sample_req_ps phi_stmt_1335_loopback_sample_req_ps : 
          phi_stmt_1335_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1335
          // start:  PHI statement phi_stmt_1339
          // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1339_sample_start_] 
          $T[phi_stmt_1339_sample_completed_] 
          $T[phi_stmt_1339_update_start_] 
          $T[phi_stmt_1339_update_completed_] 
          $T[phi_stmt_1339_sample_start__ps] 
          phi_stmt_1339_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1339_sample_completed__ps] 
          phi_stmt_1339_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1339_update_start__ps] 
          phi_stmt_1339_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1339_update_completed__ps] 
          phi_stmt_1339_update_completed_ <-& (phi_stmt_1339_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1339_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1339_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1339_update_start_)
          $T[phi_stmt_1339_loopback_trigger] 
          phi_stmt_1339_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1339_loopback_sample_req] 
          $T[phi_stmt_1339_loopback_sample_req_ps] 
          phi_stmt_1339_loopback_sample_req <-& (phi_stmt_1339_loopback_sample_req_ps)
          phi_stmt_1339_loopback_sample_req &-> ($null)
          $T[phi_stmt_1339_entry_trigger] 
          phi_stmt_1339_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1339_entry_sample_req] 
          $T[phi_stmt_1339_entry_sample_req_ps] 
          phi_stmt_1339_entry_sample_req <-& (phi_stmt_1339_entry_sample_req_ps)
          phi_stmt_1339_entry_sample_req &-> ($null)
          phi_stmt_1339_update_start_ o<-& (phi_stmt_1339_update_completed_ 0)
          phi_stmt_1339_sample_start_ o<-& (phi_stmt_1339_sample_completed_ 1)
          $T[phi_stmt_1339_merged_reqs] 
          $T[phi_stmt_1339_phi_mux_ack] 
          $T[phi_stmt_1339_phi_mux_ack_ps] 
          phi_stmt_1339_phi_mux_ack_ps <-& (phi_stmt_1339_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1339_update_completed_)
          $T[R_ONE_3_1341_sample_start__ps] 
          $T[R_ONE_3_1341_sample_completed__ps] 
          $T[R_ONE_3_1341_update_start__ps] 
          $T[R_ONE_3_1341_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ONE_3_1341_sample_start_] 
          $T[R_ONE_3_1341_sample_completed_] 
          R_ONE_3_1341_sample_completed_ <-& (R_ONE_3_1341_sample_start_)
          $T[R_ONE_3_1341_update_start_] 
          $T [R_ONE_3_1341_update_completed_] $delay 
          R_ONE_3_1341_update_completed_ <-& (R_ONE_3_1341_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ONE_3_1341_sample_start_ <-& (R_ONE_3_1341_sample_start__ps)
          R_ONE_3_1341_update_start_ <-& (R_ONE_3_1341_update_start__ps)
          // Phi complete dependency.
          R_ONE_3_1341_sample_completed__ps <-& (R_ONE_3_1341_sample_completed_)
          R_ONE_3_1341_update_completed__ps <-& (R_ONE_3_1341_update_completed_)
          $T[R_next_pkt_priority_1342_sample_start__ps] 
          $T[R_next_pkt_priority_1342_sample_completed__ps] 
          $T[R_next_pkt_priority_1342_update_start__ps] 
          $T[R_next_pkt_priority_1342_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_priority_1342_sample_start_] 
          $T[R_next_pkt_priority_1342_sample_completed_] 
          $T[R_next_pkt_priority_1342_update_start_] 
          $T[R_next_pkt_priority_1342_update_completed_] 
          ;;[R_next_pkt_priority_1342_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_priority_1342_sample_start_ &-> (R_next_pkt_priority_1342_Sample)
          R_next_pkt_priority_1342_sample_completed_ <-& (R_next_pkt_priority_1342_Sample)
          ;;[R_next_pkt_priority_1342_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_priority_1342_update_start_ &-> (R_next_pkt_priority_1342_Update)
          R_next_pkt_priority_1342_update_completed_ <-& (R_next_pkt_priority_1342_Update)
          // RAW reenables for next_pkt_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_priority_1342_sample_start_ <-& (R_next_pkt_priority_1342_sample_start__ps)
          R_next_pkt_priority_1342_update_start_ <-& (R_next_pkt_priority_1342_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_priority_1342_sample_completed__ps <-& (R_next_pkt_priority_1342_sample_completed_)
          R_next_pkt_priority_1342_update_completed__ps <-& (R_next_pkt_priority_1342_update_completed_)
          $phisequencer [ phi_stmt_1339_phi_seq] : 
          phi_stmt_1339_entry_trigger R_ONE_3_1341_sample_start__ps R_ONE_3_1341_sample_completed__ps R_ONE_3_1341_update_start__ps R_ONE_3_1341_update_completed__ps phi_stmt_1339_loopback_trigger R_next_pkt_priority_1342_sample_start__ps R_next_pkt_priority_1342_sample_completed__ps R_next_pkt_priority_1342_update_start__ps R_next_pkt_priority_1342_update_completed__ps :
          phi_stmt_1339_sample_start__ps phi_stmt_1339_sample_completed__ps phi_stmt_1339_update_start__ps phi_stmt_1339_update_completed__ps :
          phi_stmt_1339_entry_sample_req_ps phi_stmt_1339_loopback_sample_req_ps : 
          phi_stmt_1339_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1339
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 369
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 370
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 371
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 372
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 373
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  file .Aa/switch2x2.opt.aa, line 374
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_priority
          // WAR dependency: Read: next_pkt_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 375
          // volatile! 
          // Source expression
          // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
          // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
          // (p1_valid | p2_valid)
          // p1_valid
          // p2_valid
          // (p3_valid | p4_valid)
          // p3_valid
          // p4_valid
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 376
          // volatile! 
          // Source expression
          // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 377
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 378
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 379
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 380
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 381
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 382
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 383
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_4
          $T[WPIPE_out_data_4_1522_sample_start_] 
          $T[WPIPE_out_data_4_1522_sample_completed_] 
          $T[WPIPE_out_data_4_1522_update_start_] 
          $T[WPIPE_out_data_4_1522_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_4_1522 with guard R_send_flag_1521
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1311_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1315_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1320_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1325_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1330_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1335_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1339_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1311_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1315_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1320_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1325_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1330_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1335_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1339_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          ;;[WPIPE_out_data_4_1522_Sample] 
          {
            // pipe write sample-start out_data_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_4_1522_Update] 
          {
            // pipe write update (complete) out_data_4
            $T [req] $T [ack] 
          }
          WPIPE_out_data_4_1522_sample_start_ &-> (WPIPE_out_data_4_1522_Sample)
          WPIPE_out_data_4_1522_sample_completed_ <-& (WPIPE_out_data_4_1522_Sample)
          WPIPE_out_data_4_1522_update_start_ <-& (WPIPE_out_data_4_1522_sample_completed_)
          WPIPE_out_data_4_1522_update_start_ &-> (WPIPE_out_data_4_1522_Update)
          WPIPE_out_data_4_1522_update_completed_ <-& (WPIPE_out_data_4_1522_Update)
          WPIPE_out_data_4_1522_sample_start_ o<-& (WPIPE_out_data_4_1522_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_4_1522_sample_start_
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1311_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1315_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1320_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1325_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1330_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1335_update_completed_)
          WPIPE_out_data_4_1522_sample_start_ <-& (phi_stmt_1339_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_4_1522_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1311_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1315_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1320_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1325_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1330_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1335_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          phi_stmt_1339_update_start_ o<-& (WPIPE_out_data_4_1522_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
          // pipe read/write dependencies for pipe out_data_4
          // read-dependencies for pipe out_data_4
          // write-dependencies for pipe out_data_4
          // signal write dependencies for out_data_4
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1309__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1309_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1309__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1309_loop_body : condition_evaluated
        $bind do_while_stmt_1309__entry__  => do_while_stmt_1309_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1309_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1309__exit__)
      }
      do_while_stmt_1309__entry__ |-> (do_while_stmt_1309)
      do_while_stmt_1309__exit__ <-| (do_while_stmt_1309)
      do_while_stmt_1309__entry__ <-| (branch_block_stmt_1308__entry__)
      do_while_stmt_1309__exit__ |-> (branch_block_stmt_1308__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 353
    // constant-object-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 349
    // constant-object-declarations for block %outputPort_4_Daemon
    //  file .Aa/switch2x2.opt.aa, line 344
    // constant-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 349
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 351
    // 1 
    $constant $W[konst_1526_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 353
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 354
    // ZERO_8
    $constant $W[R_ZERO_8_1313_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 356
    // ZERO_33
    $constant $W[R_ZERO_33_1317_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 358
    // ZERO_33
    $constant $W[R_ZERO_33_1322_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 360
    // ZERO_33
    $constant $W[R_ZERO_33_1327_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 362
    // ZERO_33
    $constant $W[R_ZERO_33_1332_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 364
    // ZERO_3
    $constant $W[R_ZERO_3_1337_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 366
    // ONE_3
    $constant $W[R_ONE_3_1341_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_1346_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1351_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1356_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1361_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1366_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1369_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1372_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1375_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1379_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1382_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1385_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1388_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 374
    // 0 
    $constant $W[konst_1412_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 63 
    $constant $W[konst_1418_wire_constant] : $int<8> := _b00111111// 63
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1421_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1431_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1439_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1447_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1455_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1461_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1465_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1468_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1472_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1476_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1480_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1483_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1487_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1494_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1497_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1500_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1503_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1507_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1510_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1513_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1516_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 349
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 351
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 353
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 354
    $W[next_down_counter_1426_1314_buffered] : $int<8>
    // down_counter
    $W[down_counter_1311] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 356
    // noblock_obuf_1_4
    $W[RPIPE_noblock_obuf_1_4_1319_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1315] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 358
    // noblock_obuf_2_4
    $W[RPIPE_noblock_obuf_2_4_1324_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1320] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 360
    // noblock_obuf_3_4
    $W[RPIPE_noblock_obuf_3_4_1329_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1325] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 362
    // noblock_obuf_4_4
    $W[RPIPE_noblock_obuf_4_4_1334_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1330] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 364
    $W[next_active_packet_1402_1338_buffered] : $int<3>
    // active_packet
    $W[active_packet_1335] : $int<3>
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 366
    $W[next_pkt_priority_1402_1342_buffered] : $int<3>
    // pkt_priority
    $W[pkt_priority_1339] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 369
    // p1_valid
    $W[p1_valid_1348] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 370
    // p2_valid
    $W[p2_valid_1353] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 371
    // p3_valid
    $W[p3_valid_1358] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 372
    // p4_valid
    $W[p4_valid_1363] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 373
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1367_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1370_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1373_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1376_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1377_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1380_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1383_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1386_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1389_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1390_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1392] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 374
    // next_active_packet
    $W[next_active_packet_1402] : $int<3>
    // next_pkt_priority
    $W[next_pkt_priority_1402] : $int<3>
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 375
    // (p1_valid | p2_valid)
    $intermediate $W[OR_u1_u1_1406_wire] : $int<1>
    // (p3_valid | p4_valid)
    $intermediate $W[OR_u1_u1_1409_wire] : $int<1>
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    $intermediate $W[OR_u1_u1_1410_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1413_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1415] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 376
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1422_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1424_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1426] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 377
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1429_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1432_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1434] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 378
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1437_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1440_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1442] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 379
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1445_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1448_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1450] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 380
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1453_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1456_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1458] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 381
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1462_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1464_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1466_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1469_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1471_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1473_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1474_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1477_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1479_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1481_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1484_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1486_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1488_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1489_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1491] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 382
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1495_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1498_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1501_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1504_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1505_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1508_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1511_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1514_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1517_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1518_wire] : $int<1>
    // send_flag
    $W[send_flag_1520] : $int<1>
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 383
    // out_data_4
    // datapath-instances for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 349
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 351
    ==0? [do_while_stmt_1309_branch] (konst_1526_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 353
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 354
    # := [next_down_counter_1426_1314_buf] (next_down_counter_1426) (next_down_counter_1426_1314_buffered)     $fullrate
    $buffering $out next_down_counter_1426_1314_buf next_down_counter_1426_1314_buffered  1
    # $phi [phi_stmt_1311] (R_ZERO_8_1313_wire_constant next_down_counter_1426_1314_buffered) ( down_counter_1311 ) $fullrate
    // $buffering  $out phi_stmt_1311 down_counter_1311 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 356
    // noblock_obuf_1_4
    $ioport $in [RPIPE_noblock_obuf_1_4_1319_inst] (noblock_obuf_1_4) (RPIPE_noblock_obuf_1_4_1319_wire) $guard ( read_from_1_1434 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_4_1319_inst RPIPE_noblock_obuf_1_4_1319_wire 1
    # $phi [phi_stmt_1315] (R_ZERO_33_1317_wire_constant RPIPE_noblock_obuf_1_4_1319_wire) ( pkt_1_e_word_1315 ) $fullrate
    // $buffering  $out phi_stmt_1315 pkt_1_e_word_1315 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 358
    // noblock_obuf_2_4
    $ioport $in [RPIPE_noblock_obuf_2_4_1324_inst] (noblock_obuf_2_4) (RPIPE_noblock_obuf_2_4_1324_wire) $guard ( read_from_2_1442 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_4_1324_inst RPIPE_noblock_obuf_2_4_1324_wire 1
    # $phi [phi_stmt_1320] (R_ZERO_33_1322_wire_constant RPIPE_noblock_obuf_2_4_1324_wire) ( pkt_2_e_word_1320 ) $fullrate
    // $buffering  $out phi_stmt_1320 pkt_2_e_word_1320 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 360
    // noblock_obuf_3_4
    $ioport $in [RPIPE_noblock_obuf_3_4_1329_inst] (noblock_obuf_3_4) (RPIPE_noblock_obuf_3_4_1329_wire) $guard ( read_from_3_1450 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_4_1329_inst RPIPE_noblock_obuf_3_4_1329_wire 1
    # $phi [phi_stmt_1325] (R_ZERO_33_1327_wire_constant RPIPE_noblock_obuf_3_4_1329_wire) ( pkt_3_e_word_1325 ) $fullrate
    // $buffering  $out phi_stmt_1325 pkt_3_e_word_1325 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 362
    // noblock_obuf_4_4
    $ioport $in [RPIPE_noblock_obuf_4_4_1334_inst] (noblock_obuf_4_4) (RPIPE_noblock_obuf_4_4_1334_wire) $guard ( read_from_4_1458 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_4_1334_inst RPIPE_noblock_obuf_4_4_1334_wire 1
    # $phi [phi_stmt_1330] (R_ZERO_33_1332_wire_constant RPIPE_noblock_obuf_4_4_1334_wire) ( pkt_4_e_word_1330 ) $fullrate
    // $buffering  $out phi_stmt_1330 pkt_4_e_word_1330 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 364
    # := [next_active_packet_1402_1338_buf] (next_active_packet_1402) (next_active_packet_1402_1338_buffered)     $fullrate
    $buffering $out next_active_packet_1402_1338_buf next_active_packet_1402_1338_buffered  1
    # $phi [phi_stmt_1335] (R_ZERO_3_1337_wire_constant next_active_packet_1402_1338_buffered) ( active_packet_1335 ) $fullrate
    // $buffering  $out phi_stmt_1335 active_packet_1335 2
    // 			$phi pkt_priority := 			  ONE_3 $on   $entry 			  next_pkt_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 366
    # := [next_pkt_priority_1402_1342_buf] (next_pkt_priority_1402) (next_pkt_priority_1402_1342_buffered)     $fullrate
    $buffering $out next_pkt_priority_1402_1342_buf next_pkt_priority_1402_1342_buffered  1
    # $phi [phi_stmt_1339] (R_ONE_3_1341_wire_constant next_pkt_priority_1402_1342_buffered) ( pkt_priority_1339 ) $fullrate
    // $buffering  $out phi_stmt_1339 pkt_priority_1339 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 369
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1347_inst] (pkt_1_e_word_1315 konst_1346_wire_constant) (p1_valid_1348)   $flowthrough 
    $delay BITSEL_u33_u1_1347_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 370
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1352_inst] (pkt_2_e_word_1320 konst_1351_wire_constant) (p2_valid_1353)   $flowthrough 
    $delay BITSEL_u33_u1_1352_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 371
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1357_inst] (pkt_3_e_word_1325 konst_1356_wire_constant) (p3_valid_1358)   $flowthrough 
    $delay BITSEL_u33_u1_1357_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 372
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1362_inst] (pkt_4_e_word_1330 konst_1361_wire_constant) (p4_valid_1363)   $flowthrough 
    $delay BITSEL_u33_u1_1362_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 373
    // (active_packet == 1 )
    ==[EQ_u3_u1_1367_inst] (active_packet_1335 konst_1366_wire_constant) (EQ_u3_u1_1367_wire)   $flowthrough 
    $delay EQ_u3_u1_1367_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1370_inst] (EQ_u3_u1_1367_wire p1_valid_1348 konst_1369_wire_constant) (MUX_1370_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1373_inst] (active_packet_1335 konst_1372_wire_constant) (EQ_u3_u1_1373_wire)   $flowthrough 
    $delay EQ_u3_u1_1373_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1376_inst] (EQ_u3_u1_1373_wire p2_valid_1353 konst_1375_wire_constant) (MUX_1376_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1377_inst] (MUX_1370_wire MUX_1376_wire) (OR_u1_u1_1377_wire)   $flowthrough 
    $delay OR_u1_u1_1377_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1380_inst] (active_packet_1335 konst_1379_wire_constant) (EQ_u3_u1_1380_wire)   $flowthrough 
    $delay EQ_u3_u1_1380_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1383_inst] (EQ_u3_u1_1380_wire p3_valid_1358 konst_1382_wire_constant) (MUX_1383_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1386_inst] (active_packet_1335 konst_1385_wire_constant) (EQ_u3_u1_1386_wire)   $flowthrough 
    $delay EQ_u3_u1_1386_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1389_inst] (EQ_u3_u1_1386_wire p4_valid_1363 konst_1388_wire_constant) (MUX_1389_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1390_inst] (MUX_1383_wire MUX_1389_wire) (OR_u1_u1_1390_wire)   $flowthrough 
    $delay OR_u1_u1_1390_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1391_inst] (OR_u1_u1_1377_wire OR_u1_u1_1390_wire) (valid_active_pkt_word_read_1392)   $flowthrough 
    $delay OR_u1_u1_1391_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
    //  file .Aa/switch2x2.opt.aa, line 374
    $call [call_stmt_1402_call] $module prioritySelect(down_counter_1311 active_packet_1335 pkt_priority_1339 p1_valid_1348 p2_valid_1353 p3_valid_1358 p4_valid_1363) (next_active_packet_1402 next_pkt_priority_1402)   $flowthrough $fullrate
    // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 375
    // (p1_valid | p2_valid)
    |[OR_u1_u1_1406_inst] (p1_valid_1348 p2_valid_1353) (OR_u1_u1_1406_wire)   $flowthrough 
    $delay OR_u1_u1_1406_inst 0
    // (p3_valid | p4_valid)
    |[OR_u1_u1_1409_inst] (p3_valid_1358 p4_valid_1363) (OR_u1_u1_1409_wire)   $flowthrough 
    $delay OR_u1_u1_1409_inst 0
    // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
    |[OR_u1_u1_1410_inst] (OR_u1_u1_1406_wire OR_u1_u1_1409_wire) (OR_u1_u1_1410_wire)   $flowthrough 
    $delay OR_u1_u1_1410_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1413_inst] (down_counter_1311 konst_1412_wire_constant) (EQ_u8_u1_1413_wire)   $flowthrough 
    $delay EQ_u8_u1_1413_inst 0
    // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
    &[AND_u1_u1_1414_inst] (OR_u1_u1_1410_wire EQ_u8_u1_1413_wire) (started_new_packet_1415)   $flowthrough 
    $delay AND_u1_u1_1414_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 376
    // (down_counter - 1 )
    -[SUB_u8_u8_1422_inst] (down_counter_1311 konst_1421_wire_constant) (SUB_u8_u8_1422_wire)   $flowthrough 
    $delay SUB_u8_u8_1422_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1424_inst] (valid_active_pkt_word_read_1392 SUB_u8_u8_1422_wire down_counter_1311) (MUX_1424_wire)  $flowthrough
    // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1425_inst] (started_new_packet_1415 konst_1418_wire_constant MUX_1424_wire) (next_down_counter_1426)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 377
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1429_inst] (p1_valid_1348) (NOT_u1_u1_1429_wire)   $flowthrough
    $delay NOT_u1_u1_1429_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1432_inst] (next_active_packet_1402 konst_1431_wire_constant) (EQ_u3_u1_1432_wire)   $flowthrough 
    $delay EQ_u3_u1_1432_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1433_inst] (NOT_u1_u1_1429_wire EQ_u3_u1_1432_wire) (read_from_1_1434)   $flowthrough 
    $delay OR_u1_u1_1433_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 378
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1437_inst] (p2_valid_1353) (NOT_u1_u1_1437_wire)   $flowthrough
    $delay NOT_u1_u1_1437_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1440_inst] (next_active_packet_1402 konst_1439_wire_constant) (EQ_u3_u1_1440_wire)   $flowthrough 
    $delay EQ_u3_u1_1440_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1441_inst] (NOT_u1_u1_1437_wire EQ_u3_u1_1440_wire) (read_from_2_1442)   $flowthrough 
    $delay OR_u1_u1_1441_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 379
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1445_inst] (p3_valid_1358) (NOT_u1_u1_1445_wire)   $flowthrough
    $delay NOT_u1_u1_1445_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1448_inst] (next_active_packet_1402 konst_1447_wire_constant) (EQ_u3_u1_1448_wire)   $flowthrough 
    $delay EQ_u3_u1_1448_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1449_inst] (NOT_u1_u1_1445_wire EQ_u3_u1_1448_wire) (read_from_3_1450)   $flowthrough 
    $delay OR_u1_u1_1449_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 380
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1453_inst] (p4_valid_1363) (NOT_u1_u1_1453_wire)   $flowthrough
    $delay NOT_u1_u1_1453_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1456_inst] (next_active_packet_1402 konst_1455_wire_constant) (EQ_u3_u1_1456_wire)   $flowthrough 
    $delay EQ_u3_u1_1456_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1457_inst] (NOT_u1_u1_1453_wire EQ_u3_u1_1456_wire) (read_from_4_1458)   $flowthrough 
    $delay OR_u1_u1_1457_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 381
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1462_inst] (next_active_packet_1402 konst_1461_wire_constant) (EQ_u3_u1_1462_wire)   $flowthrough 
    $delay EQ_u3_u1_1462_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1464_inst] (pkt_1_e_word_1315 31 0) (slice_1464_wire)  $flowthrough
    $delay slice_1464_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1466_inst] (EQ_u3_u1_1462_wire slice_1464_wire konst_1465_wire_constant) (MUX_1466_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1469_inst] (next_active_packet_1402 konst_1468_wire_constant) (EQ_u3_u1_1469_wire)   $flowthrough 
    $delay EQ_u3_u1_1469_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1471_inst] (pkt_2_e_word_1320 31 0) (slice_1471_wire)  $flowthrough
    $delay slice_1471_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1473_inst] (EQ_u3_u1_1469_wire slice_1471_wire konst_1472_wire_constant) (MUX_1473_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1474_inst] (MUX_1466_wire MUX_1473_wire) (OR_u32_u32_1474_wire)   $flowthrough 
    $delay OR_u32_u32_1474_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1477_inst] (next_active_packet_1402 konst_1476_wire_constant) (EQ_u3_u1_1477_wire)   $flowthrough 
    $delay EQ_u3_u1_1477_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1479_inst] (pkt_3_e_word_1325 31 0) (slice_1479_wire)  $flowthrough
    $delay slice_1479_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1481_inst] (EQ_u3_u1_1477_wire slice_1479_wire konst_1480_wire_constant) (MUX_1481_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1484_inst] (next_active_packet_1402 konst_1483_wire_constant) (EQ_u3_u1_1484_wire)   $flowthrough 
    $delay EQ_u3_u1_1484_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1486_inst] (pkt_4_e_word_1330 31 0) (slice_1486_wire)  $flowthrough
    $delay slice_1486_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1488_inst] (EQ_u3_u1_1484_wire slice_1486_wire konst_1487_wire_constant) (MUX_1488_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1489_inst] (MUX_1481_wire MUX_1488_wire) (OR_u32_u32_1489_wire)   $flowthrough 
    $delay OR_u32_u32_1489_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1490_inst] (OR_u32_u32_1474_wire OR_u32_u32_1489_wire) (data_to_out_1491)   $flowthrough 
    $delay OR_u32_u32_1490_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 382
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1495_inst] (next_active_packet_1402 konst_1494_wire_constant) (EQ_u3_u1_1495_wire)   $flowthrough 
    $delay EQ_u3_u1_1495_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1498_inst] (EQ_u3_u1_1495_wire p1_valid_1348 konst_1497_wire_constant) (MUX_1498_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1501_inst] (next_active_packet_1402 konst_1500_wire_constant) (EQ_u3_u1_1501_wire)   $flowthrough 
    $delay EQ_u3_u1_1501_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1504_inst] (EQ_u3_u1_1501_wire p2_valid_1353 konst_1503_wire_constant) (MUX_1504_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1505_inst] (MUX_1498_wire MUX_1504_wire) (OR_u1_u1_1505_wire)   $flowthrough 
    $delay OR_u1_u1_1505_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1508_inst] (next_active_packet_1402 konst_1507_wire_constant) (EQ_u3_u1_1508_wire)   $flowthrough 
    $delay EQ_u3_u1_1508_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1511_inst] (EQ_u3_u1_1508_wire p3_valid_1358 konst_1510_wire_constant) (MUX_1511_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1514_inst] (next_active_packet_1402 konst_1513_wire_constant) (EQ_u3_u1_1514_wire)   $flowthrough 
    $delay EQ_u3_u1_1514_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1517_inst] (EQ_u3_u1_1514_wire p4_valid_1363 konst_1516_wire_constant) (MUX_1517_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1518_inst] (MUX_1511_wire MUX_1517_wire) (OR_u1_u1_1518_wire)   $flowthrough 
    $delay OR_u1_u1_1518_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1519_inst] (OR_u1_u1_1505_wire OR_u1_u1_1518_wire) (send_flag_1520)   $flowthrough 
    $delay OR_u1_u1_1519_inst 0
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 383
    // out_data_4
    $ioport $out [WPIPE_out_data_4_1522_inst]  (data_to_out_1491) (out_data_4) $guard ( send_flag_1520 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1309
  //  file .Aa/switch2x2.opt.aa, line 351
  phi_stmt_1311 <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1311_entry_sample_req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1311_loopback_sample_req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1311_phi_mux_ack)
  next_down_counter_1426_1314_buf <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_down_counter_1314_Sample/req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_down_counter_1314_Update/req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_down_counter_1314_Sample/ack branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_down_counter_1314_Update/ack)
  phi_stmt_1315 <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1315_entry_sample_req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1315_loopback_sample_req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1315_phi_mux_ack)
  // noblock_obuf_1_4
  RPIPE_noblock_obuf_1_4_1319_inst <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_1_4_1319_Sample/rr branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_1_4_1319_Update/cr) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_1_4_1319_Sample/ra branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_1_4_1319_Update/ca)
  phi_stmt_1320 <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1320_entry_sample_req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1320_loopback_sample_req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1320_phi_mux_ack)
  // noblock_obuf_2_4
  RPIPE_noblock_obuf_2_4_1324_inst <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_2_4_1324_Sample/rr branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_2_4_1324_Update/cr) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_2_4_1324_Sample/ra branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_2_4_1324_Update/ca)
  phi_stmt_1325 <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1325_entry_sample_req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1325_loopback_sample_req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1325_phi_mux_ack)
  // noblock_obuf_3_4
  RPIPE_noblock_obuf_3_4_1329_inst <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_3_4_1329_Sample/rr branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_3_4_1329_Update/cr) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_3_4_1329_Sample/ra branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_3_4_1329_Update/ca)
  phi_stmt_1330 <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1330_entry_sample_req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1330_loopback_sample_req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1330_phi_mux_ack)
  // noblock_obuf_4_4
  RPIPE_noblock_obuf_4_4_1334_inst <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_4_4_1334_Sample/rr branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_4_4_1334_Update/cr) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_4_4_1334_Sample/ra branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/RPIPE_noblock_obuf_4_4_1334_Update/ca)
  phi_stmt_1335 <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1335_entry_sample_req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1335_loopback_sample_req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1335_phi_mux_ack)
  next_active_packet_1402_1338_buf <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_active_packet_1338_Sample/req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_active_packet_1338_Update/req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_active_packet_1338_Sample/ack branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_active_packet_1338_Update/ack)
  phi_stmt_1339 <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1339_entry_sample_req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1339_loopback_sample_req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/phi_stmt_1339_phi_mux_ack)
  next_pkt_priority_1402_1342_buf <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_pkt_priority_1342_Sample/req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_pkt_priority_1342_Update/req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_pkt_priority_1342_Sample/ack branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/R_next_pkt_priority_1342_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 369
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 370
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 371
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 372
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 373
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_priority ) 
  //  file .Aa/switch2x2.opt.aa, line 374
  // down_counter
  // active_packet
  // pkt_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 375
  // (((p1_valid | p2_valid) | (p3_valid | p4_valid)) & (down_counter == 0 ))
  // ((p1_valid | p2_valid) | (p3_valid | p4_valid))
  // (p1_valid | p2_valid)
  // p1_valid
  // p2_valid
  // (p3_valid | p4_valid)
  // p3_valid
  // p4_valid
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 376
  // started_new_packet
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet 63   ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 377
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 378
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 379
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 380
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 381
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 382
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 383
  // data_to_out
  // out_data_4
  WPIPE_out_data_4_1522_inst <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/WPIPE_out_data_4_1522_Sample/req branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/WPIPE_out_data_4_1522_Update/req) (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/WPIPE_out_data_4_1522_Sample/ack branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/WPIPE_out_data_4_1522_Update/ack)
  do_while_stmt_1309_branch <=> (branch_block_stmt_1308/do_while_stmt_1309/do_while_stmt_1309_loop_body/condition_evaluated) (branch_block_stmt_1308/do_while_stmt_1309/loop_exit/ack branch_block_stmt_1308/do_while_stmt_1309/loop_taken/ack)
}
