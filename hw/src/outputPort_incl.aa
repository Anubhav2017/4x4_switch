
$module [ ##OUTPUTPORTDAEMON ]
	$in () $out () $is
{
	$branchblock[loop] {

		$dopipeline $depth OUTPUT_PORT_PIPELINE_DEPTH 
			$fullrate 

			$merge $entry $loopback
				// down_counter keeps the number of words from
				// the active packet that need to be read.
				//    0 means all words have been read.
				$phi down_counter := 
					ZERO_8 $on $entry next_down_counter $on $loopback

				// pkt_1_e_word is the word that we will read from the
				// first input queue "now".  Note we may not read from
				// the queue.
				$phi pkt_1_e_word := 
					ZERO_33 $on $entry 
						$guard (read_from_1) 
							##NOBLOCKOBUF_FROM_1  $on $loopback

				// pkt_2_e_word is the word that we will read from the
				// second input queue "now".  Note we may not read from
				// the queue.
				$phi pkt_2_e_word := 
					ZERO_33 $on $entry 
						$guard (read_from_2) 
							##NOBLOCKOBUF_FROM_2  $on $loopback

				$phi pkt_3_e_word := 
					ZERO_33 $on $entry 
						$guard (read_from_3) 
							##NOBLOCKOBUF_FROM_3  $on $loopback

				$phi pkt_4_e_word := 
					ZERO_33 $on $entry 
						$guard (read_from_4) 
							##NOBLOCKOBUF_FROM_4  $on $loopback


				$phi active_packet := 
					ZERO_3 $on $entry next_active_packet $on $loopback


			$endmerge


			$volatile p1_valid := (pkt_1_e_word [] 32)
			$volatile p2_valid := (pkt_2_e_word [] 32)
			$volatile p3_valid := (pkt_3_e_word [] 32)
			$volatile p4_valid := (pkt_4_e_word [] 32)


			//$rreport ( ##OUTPUTPORTDAEMON 
			//		state_summary 
			//			active_packet
			//			down_counter
            //                                    //next_down_counter
			//			
            //                                    
			//			pkt_1_e_word 
			//			pkt_2_e_word
            //                                    pkt_3_e_word 
			//			pkt_4_e_word
			//	)

			//
			// do we have a valid word from the active packet?
			//
			$volatile valid_active_pkt_word_read :=
				($excmux 
					(active_packet == 1) p1_valid
					(active_packet == 2) p2_valid
					(active_packet == 3) p3_valid
					(active_packet == 4) p4_valid)

			$volatile $call prioritySelect 
					   (down_counter active_packet p1_valid p2_valid p3_valid p4_valid)
							(next_active_packet)

			//
			// started_new_packet means the obvious
			//
			$volatile started_new_packet := 
				(($reduce | p1_valid p2_valid p3_valid p4_valid) & (down_counter == 0))


			$volatile next_down_counter :=
				($mux started_new_packet 63 // one word already read, 63 left.
					($mux valid_active_pkt_word_read (down_counter - 1) down_counter))

			

			$volatile read_from_1 := 
				($reduce |
					(~p1_valid)
					(next_active_packet == 1))

			$volatile read_from_2 := 
				($reduce |
					(~p2_valid)  		
					(next_active_packet == 2))

			$volatile read_from_3 := 
				($reduce |
					(~p3_valid)  		
					(next_active_packet == 3))

			$volatile read_from_4 := 
				($reduce |
					(~p4_valid)  		
					(next_active_packet == 4))

			// send to output port.
			$volatile data_to_out := ($excmux
									(next_active_packet == 1) ($slice pkt_1_e_word 31 0)
									(next_active_packet == 2) ($slice pkt_2_e_word 31 0)
									(next_active_packet == 3) ($slice pkt_3_e_word 31 0)
									(next_active_packet == 4) ($slice pkt_4_e_word 31 0)

								)

			//
			// to send data you must have valid data.
			//
			$volatile send_flag := ($excmux 
							(next_active_packet == 1) p1_valid 
							(next_active_packet == 2) p2_valid 
							(next_active_packet == 3) p3_valid
							(next_active_packet == 4) p4_valid)
						
			// send if necessary..
			$guard (send_flag)
				##OUTPUT_PORT := data_to_out

			//$rreport ( ##OUTPUTPORTDAEMON 
			//			send_information started_new_packet next_active_packet send_flag p1_valid p2_valid p3_valid p4_valid data_to_out)
	
		$while 1
	}
}

